{"ast":null,"code":"/**\r\n * DevExtreme (localization/ldml/date.format.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.getFormat = void 0;\n\nvar _number = _interopRequireDefault(require(\"../number\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ARABIC_COMMA = \"\\u060c\";\nvar FORMAT_SEPARATORS = \" .,:;/\\\\<>()-[]\" + ARABIC_COMMA;\nvar AM_PM_PATTERN = \". m.\";\n\nvar checkDigit = function (char) {\n  var code = char && _number.default.convertDigits(char, false).charCodeAt(0);\n\n  var zeroCode = _number.default.convertDigits(\"0\", false).charCodeAt(0);\n\n  return zeroCode <= code && code < zeroCode + 10;\n};\n\nvar checkPatternContinue = function (text, patterns, index, isDigit) {\n  var char = text[index];\n  var nextChar = text[index + 1];\n\n  if (!isDigit) {\n    if (\".\" === char || \" \" === char && text.slice(index - 1, index + 3) === AM_PM_PATTERN) {\n      return true;\n    }\n\n    if (\"-\" === char && !checkDigit(nextChar)) {\n      return true;\n    }\n  }\n\n  var isDigitChanged = isDigit && patterns.some(function (pattern) {\n    return text[index] !== pattern[index];\n  });\n  return FORMAT_SEPARATORS.indexOf(char) < 0 && isDigit === checkDigit(char) && (!isDigit || isDigitChanged);\n};\n\nvar getPatternStartIndex = function (defaultPattern, index) {\n  if (!checkDigit(defaultPattern[index])) {\n    while (index > 0 && !checkDigit(defaultPattern[index - 1]) && (\".\" === defaultPattern[index - 1] || FORMAT_SEPARATORS.indexOf(defaultPattern[index - 1]) < 0)) {\n      index--;\n    }\n  }\n\n  return index;\n};\n\nvar getDifference = function (defaultPattern, patterns, processedIndexes, isDigit) {\n  var i = 0;\n  var result = [];\n\n  var patternsFilter = function (pattern) {\n    return defaultPattern[i] !== pattern[i] && (void 0 === isDigit || checkDigit(defaultPattern[i]) === isDigit);\n  };\n\n  if (!Array.isArray(patterns)) {\n    patterns = [patterns];\n  }\n\n  for (i = 0; i < defaultPattern.length; i++) {\n    if (processedIndexes.indexOf(i) < 0 && patterns.filter(patternsFilter).length) {\n      i = getPatternStartIndex(defaultPattern, i);\n\n      do {\n        isDigit = checkDigit(defaultPattern[i]);\n\n        if (!result.length && !isDigit && checkDigit(patterns[0][i])) {\n          break;\n        }\n\n        result.push(i);\n        processedIndexes.unshift(i);\n        i++;\n      } while (defaultPattern[i] && checkPatternContinue(defaultPattern, patterns, i, isDigit));\n\n      break;\n    }\n  }\n\n  if (1 === result.length && (\"0\" === defaultPattern[processedIndexes[0] - 1] || \"\\u0660\" === defaultPattern[processedIndexes[0] - 1])) {\n    processedIndexes.unshift(processedIndexes[0] - 1);\n  }\n\n  return result;\n};\n\nvar replaceCharsCore = function (pattern, indexes, char, patternPositions) {\n  var baseCharIndex = indexes[0];\n  var patternIndex = baseCharIndex < patternPositions.length ? patternPositions[baseCharIndex] : baseCharIndex;\n  indexes.forEach(function (_, index) {\n    pattern = pattern.substr(0, patternIndex + index) + (char.length > 1 ? char[index] : char) + pattern.substr(patternIndex + index + 1);\n  });\n\n  if (1 === indexes.length) {\n    pattern = pattern.replace(\"0\" + char, char + char);\n    pattern = pattern.replace(\"\\u0660\" + char, char + char);\n  }\n\n  return pattern;\n};\n\nvar replaceChars = function (pattern, indexes, char, patternPositions) {\n  var i;\n  var index;\n  var patternIndex;\n\n  if (!checkDigit(pattern[indexes[0]] || \"0\")) {\n    var letterCount = Math.max(indexes.length <= 3 ? 3 : 4, char.length);\n\n    while (indexes.length > letterCount) {\n      index = indexes.pop();\n      patternIndex = patternPositions[index];\n      patternPositions[index] = -1;\n\n      for (i = index + 1; i < patternPositions.length; i++) {\n        patternPositions[i]--;\n      }\n\n      pattern = pattern.substr(0, patternIndex) + pattern.substr(patternIndex + 1);\n    }\n\n    index = indexes[indexes.length - 1] + 1, patternIndex = index < patternPositions.length ? patternPositions[index] : index;\n\n    while (indexes.length < letterCount) {\n      indexes.push(indexes[indexes.length - 1] + 1);\n\n      for (i = index; i < patternPositions.length; i++) {\n        patternPositions[i]++;\n      }\n\n      pattern = pattern.substr(0, patternIndex) + \" \" + pattern.substr(patternIndex);\n    }\n  }\n\n  pattern = replaceCharsCore(pattern, indexes, char, patternPositions);\n  return pattern;\n};\n\nvar formatValue = function (value, formatter) {\n  if (Array.isArray(value)) {\n    return value.map(function (value) {\n      return (formatter(value) || \"\").toString();\n    });\n  }\n\n  return (formatter(value) || \"\").toString();\n};\n\nvar ESCAPE_CHARS_REGEXP = /[a-zA-Z]/g;\n\nvar escapeChars = function (pattern, defaultPattern, processedIndexes, patternPositions) {\n  var escapeIndexes = defaultPattern.split(\"\").map(function (char, index) {\n    if (processedIndexes.indexOf(index) < 0 && (char.match(ESCAPE_CHARS_REGEXP) || \"'\" === char)) {\n      return patternPositions[index];\n    }\n\n    return -1;\n  });\n  pattern = pattern.split(\"\").map(function (char, index) {\n    var result = char;\n    var isCurrentCharEscaped = escapeIndexes.indexOf(index) >= 0;\n    var isPrevCharEscaped = index > 0 && escapeIndexes.indexOf(index - 1) >= 0;\n    var isNextCharEscaped = escapeIndexes.indexOf(index + 1) >= 0;\n\n    if (isCurrentCharEscaped) {\n      if (!isPrevCharEscaped) {\n        result = \"'\" + result;\n      }\n\n      if (!isNextCharEscaped) {\n        result += \"'\";\n      }\n    }\n\n    return result;\n  }).join(\"\");\n  return pattern;\n};\n\nvar getFormat = function (formatter) {\n  var processedIndexes = [];\n  var defaultPattern = formatValue(new Date(2009, 8, 8, 6, 5, 4), formatter);\n  var patternPositions = defaultPattern.split(\"\").map(function (_, index) {\n    return index;\n  });\n  var result = defaultPattern;\n  var replacedPatterns = {};\n  var datePatterns = [{\n    date: new Date(2009, 8, 8, 6, 5, 4, 111),\n    pattern: \"S\"\n  }, {\n    date: new Date(2009, 8, 8, 6, 5, 2),\n    pattern: \"s\"\n  }, {\n    date: new Date(2009, 8, 8, 6, 2, 4),\n    pattern: \"m\"\n  }, {\n    date: new Date(2009, 8, 8, 18, 5, 4),\n    pattern: \"H\",\n    isDigit: true\n  }, {\n    date: new Date(2009, 8, 8, 2, 5, 4),\n    pattern: \"h\",\n    isDigit: true\n  }, {\n    date: new Date(2009, 8, 8, 18, 5, 4),\n    pattern: \"a\",\n    isDigit: false\n  }, {\n    date: new Date(2009, 8, 1, 6, 5, 4),\n    pattern: \"d\"\n  }, {\n    date: [new Date(2009, 8, 2, 6, 5, 4), new Date(2009, 8, 3, 6, 5, 4), new Date(2009, 8, 4, 6, 5, 4)],\n    pattern: \"E\"\n  }, {\n    date: new Date(2009, 9, 6, 6, 5, 4),\n    pattern: \"M\"\n  }, {\n    date: new Date(1998, 8, 8, 6, 5, 4),\n    pattern: \"y\"\n  }];\n\n  if (!result) {\n    return;\n  }\n\n  datePatterns.forEach(function (test) {\n    var diff = getDifference(defaultPattern, formatValue(test.date, formatter), processedIndexes, test.isDigit);\n    var pattern = \"M\" === test.pattern && !replacedPatterns.d ? \"L\" : test.pattern;\n    result = replaceChars(result, diff, pattern, patternPositions);\n    replacedPatterns[pattern] = diff.length;\n  });\n  result = escapeChars(result, defaultPattern, processedIndexes, patternPositions);\n\n  if (processedIndexes.length) {\n    return result;\n  }\n};\n\nexports.getFormat = getFormat;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/localization/ldml/date.format.js"],"names":["exports","getFormat","_number","_interopRequireDefault","require","obj","__esModule","ARABIC_COMMA","FORMAT_SEPARATORS","AM_PM_PATTERN","checkDigit","char","code","default","convertDigits","charCodeAt","zeroCode","checkPatternContinue","text","patterns","index","isDigit","nextChar","slice","isDigitChanged","some","pattern","indexOf","getPatternStartIndex","defaultPattern","getDifference","processedIndexes","i","result","patternsFilter","Array","isArray","length","filter","push","unshift","replaceCharsCore","indexes","patternPositions","baseCharIndex","patternIndex","forEach","_","substr","replace","replaceChars","letterCount","Math","max","pop","formatValue","value","formatter","map","toString","ESCAPE_CHARS_REGEXP","escapeChars","escapeIndexes","split","match","isCurrentCharEscaped","isPrevCharEscaped","isNextCharEscaped","join","Date","replacedPatterns","datePatterns","date","test","diff","d"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (localization/ldml/date.format.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.getFormat = void 0;\r\nvar _number = _interopRequireDefault(require(\"../number\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar ARABIC_COMMA = \"\\u060c\";\r\nvar FORMAT_SEPARATORS = \" .,:;/\\\\<>()-[]\" + ARABIC_COMMA;\r\nvar AM_PM_PATTERN = \". m.\";\r\nvar checkDigit = function(char) {\r\n    var code = char && _number.default.convertDigits(char, false).charCodeAt(0);\r\n    var zeroCode = _number.default.convertDigits(\"0\", false).charCodeAt(0);\r\n    return zeroCode <= code && code < zeroCode + 10\r\n};\r\nvar checkPatternContinue = function(text, patterns, index, isDigit) {\r\n    var char = text[index];\r\n    var nextChar = text[index + 1];\r\n    if (!isDigit) {\r\n        if (\".\" === char || \" \" === char && text.slice(index - 1, index + 3) === AM_PM_PATTERN) {\r\n            return true\r\n        }\r\n        if (\"-\" === char && !checkDigit(nextChar)) {\r\n            return true\r\n        }\r\n    }\r\n    var isDigitChanged = isDigit && patterns.some(function(pattern) {\r\n        return text[index] !== pattern[index]\r\n    });\r\n    return FORMAT_SEPARATORS.indexOf(char) < 0 && isDigit === checkDigit(char) && (!isDigit || isDigitChanged)\r\n};\r\nvar getPatternStartIndex = function(defaultPattern, index) {\r\n    if (!checkDigit(defaultPattern[index])) {\r\n        while (index > 0 && !checkDigit(defaultPattern[index - 1]) && (\".\" === defaultPattern[index - 1] || FORMAT_SEPARATORS.indexOf(defaultPattern[index - 1]) < 0)) {\r\n            index--\r\n        }\r\n    }\r\n    return index\r\n};\r\nvar getDifference = function(defaultPattern, patterns, processedIndexes, isDigit) {\r\n    var i = 0;\r\n    var result = [];\r\n    var patternsFilter = function(pattern) {\r\n        return defaultPattern[i] !== pattern[i] && (void 0 === isDigit || checkDigit(defaultPattern[i]) === isDigit)\r\n    };\r\n    if (!Array.isArray(patterns)) {\r\n        patterns = [patterns]\r\n    }\r\n    for (i = 0; i < defaultPattern.length; i++) {\r\n        if (processedIndexes.indexOf(i) < 0 && patterns.filter(patternsFilter).length) {\r\n            i = getPatternStartIndex(defaultPattern, i);\r\n            do {\r\n                isDigit = checkDigit(defaultPattern[i]);\r\n                if (!result.length && !isDigit && checkDigit(patterns[0][i])) {\r\n                    break\r\n                }\r\n                result.push(i);\r\n                processedIndexes.unshift(i);\r\n                i++\r\n            } while (defaultPattern[i] && checkPatternContinue(defaultPattern, patterns, i, isDigit));\r\n            break\r\n        }\r\n    }\r\n    if (1 === result.length && (\"0\" === defaultPattern[processedIndexes[0] - 1] || \"\\u0660\" === defaultPattern[processedIndexes[0] - 1])) {\r\n        processedIndexes.unshift(processedIndexes[0] - 1)\r\n    }\r\n    return result\r\n};\r\nvar replaceCharsCore = function(pattern, indexes, char, patternPositions) {\r\n    var baseCharIndex = indexes[0];\r\n    var patternIndex = baseCharIndex < patternPositions.length ? patternPositions[baseCharIndex] : baseCharIndex;\r\n    indexes.forEach(function(_, index) {\r\n        pattern = pattern.substr(0, patternIndex + index) + (char.length > 1 ? char[index] : char) + pattern.substr(patternIndex + index + 1)\r\n    });\r\n    if (1 === indexes.length) {\r\n        pattern = pattern.replace(\"0\" + char, char + char);\r\n        pattern = pattern.replace(\"\\u0660\" + char, char + char)\r\n    }\r\n    return pattern\r\n};\r\nvar replaceChars = function(pattern, indexes, char, patternPositions) {\r\n    var i;\r\n    var index;\r\n    var patternIndex;\r\n    if (!checkDigit(pattern[indexes[0]] || \"0\")) {\r\n        var letterCount = Math.max(indexes.length <= 3 ? 3 : 4, char.length);\r\n        while (indexes.length > letterCount) {\r\n            index = indexes.pop();\r\n            patternIndex = patternPositions[index];\r\n            patternPositions[index] = -1;\r\n            for (i = index + 1; i < patternPositions.length; i++) {\r\n                patternPositions[i]--\r\n            }\r\n            pattern = pattern.substr(0, patternIndex) + pattern.substr(patternIndex + 1)\r\n        }\r\n        index = indexes[indexes.length - 1] + 1, patternIndex = index < patternPositions.length ? patternPositions[index] : index;\r\n        while (indexes.length < letterCount) {\r\n            indexes.push(indexes[indexes.length - 1] + 1);\r\n            for (i = index; i < patternPositions.length; i++) {\r\n                patternPositions[i]++\r\n            }\r\n            pattern = pattern.substr(0, patternIndex) + \" \" + pattern.substr(patternIndex)\r\n        }\r\n    }\r\n    pattern = replaceCharsCore(pattern, indexes, char, patternPositions);\r\n    return pattern\r\n};\r\nvar formatValue = function(value, formatter) {\r\n    if (Array.isArray(value)) {\r\n        return value.map(function(value) {\r\n            return (formatter(value) || \"\").toString()\r\n        })\r\n    }\r\n    return (formatter(value) || \"\").toString()\r\n};\r\nvar ESCAPE_CHARS_REGEXP = /[a-zA-Z]/g;\r\nvar escapeChars = function(pattern, defaultPattern, processedIndexes, patternPositions) {\r\n    var escapeIndexes = defaultPattern.split(\"\").map(function(char, index) {\r\n        if (processedIndexes.indexOf(index) < 0 && (char.match(ESCAPE_CHARS_REGEXP) || \"'\" === char)) {\r\n            return patternPositions[index]\r\n        }\r\n        return -1\r\n    });\r\n    pattern = pattern.split(\"\").map(function(char, index) {\r\n        var result = char;\r\n        var isCurrentCharEscaped = escapeIndexes.indexOf(index) >= 0;\r\n        var isPrevCharEscaped = index > 0 && escapeIndexes.indexOf(index - 1) >= 0;\r\n        var isNextCharEscaped = escapeIndexes.indexOf(index + 1) >= 0;\r\n        if (isCurrentCharEscaped) {\r\n            if (!isPrevCharEscaped) {\r\n                result = \"'\" + result\r\n            }\r\n            if (!isNextCharEscaped) {\r\n                result += \"'\"\r\n            }\r\n        }\r\n        return result\r\n    }).join(\"\");\r\n    return pattern\r\n};\r\nvar getFormat = function(formatter) {\r\n    var processedIndexes = [];\r\n    var defaultPattern = formatValue(new Date(2009, 8, 8, 6, 5, 4), formatter);\r\n    var patternPositions = defaultPattern.split(\"\").map(function(_, index) {\r\n        return index\r\n    });\r\n    var result = defaultPattern;\r\n    var replacedPatterns = {};\r\n    var datePatterns = [{\r\n        date: new Date(2009, 8, 8, 6, 5, 4, 111),\r\n        pattern: \"S\"\r\n    }, {\r\n        date: new Date(2009, 8, 8, 6, 5, 2),\r\n        pattern: \"s\"\r\n    }, {\r\n        date: new Date(2009, 8, 8, 6, 2, 4),\r\n        pattern: \"m\"\r\n    }, {\r\n        date: new Date(2009, 8, 8, 18, 5, 4),\r\n        pattern: \"H\",\r\n        isDigit: true\r\n    }, {\r\n        date: new Date(2009, 8, 8, 2, 5, 4),\r\n        pattern: \"h\",\r\n        isDigit: true\r\n    }, {\r\n        date: new Date(2009, 8, 8, 18, 5, 4),\r\n        pattern: \"a\",\r\n        isDigit: false\r\n    }, {\r\n        date: new Date(2009, 8, 1, 6, 5, 4),\r\n        pattern: \"d\"\r\n    }, {\r\n        date: [new Date(2009, 8, 2, 6, 5, 4), new Date(2009, 8, 3, 6, 5, 4), new Date(2009, 8, 4, 6, 5, 4)],\r\n        pattern: \"E\"\r\n    }, {\r\n        date: new Date(2009, 9, 6, 6, 5, 4),\r\n        pattern: \"M\"\r\n    }, {\r\n        date: new Date(1998, 8, 8, 6, 5, 4),\r\n        pattern: \"y\"\r\n    }];\r\n    if (!result) {\r\n        return\r\n    }\r\n    datePatterns.forEach(function(test) {\r\n        var diff = getDifference(defaultPattern, formatValue(test.date, formatter), processedIndexes, test.isDigit);\r\n        var pattern = \"M\" === test.pattern && !replacedPatterns.d ? \"L\" : test.pattern;\r\n        result = replaceChars(result, diff, pattern, patternPositions);\r\n        replacedPatterns[pattern] = diff.length\r\n    });\r\n    result = escapeChars(result, defaultPattern, processedIndexes, patternPositions);\r\n    if (processedIndexes.length) {\r\n        return result\r\n    }\r\n};\r\nexports.getFormat = getFormat;\r\n"]},"metadata":{},"sourceType":"script"}