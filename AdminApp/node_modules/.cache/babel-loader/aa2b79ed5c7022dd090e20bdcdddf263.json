{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _style = require(\"../../core/utils/style\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _uiGrid_core2 = require(\"./ui.grid_core.columns_view\");\n\nvar _ui = _interopRequireDefault(require(\"../scroll_view/ui.scrollable\"));\n\nvar _remove_event = _interopRequireDefault(require(\"../../core/remove_event\"));\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar CONTENT_CLASS = \"content\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\nvar EMPTY_CLASS = \"dx-empty\";\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\nvar LOADPANEL_HIDE_TIMEOUT = 200;\n\nfunction getMaxHorizontalScrollOffset(scrollable) {\n  return scrollable ? scrollable.scrollWidth() - scrollable.clientWidth() : 0;\n}\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      hoverStateEnabled: false,\n      scrolling: {\n        useNative: \"auto\"\n      },\n      loadPanel: {\n        enabled: \"auto\",\n        text: _message.default.format(\"Loading\"),\n        width: 200,\n        height: 90,\n        showIndicator: true,\n        indicatorSrc: \"\",\n        showPane: true\n      },\n      rowTemplate: null,\n      columnAutoWidth: false,\n      noDataText: _message.default.format(\"dxDataGrid-noDataText\"),\n      wordWrapEnabled: false,\n      showColumnLines: true,\n      showRowLines: false,\n      rowAlternationEnabled: false,\n      activeStateEnabled: false,\n      twoWayBindingEnabled: true\n    };\n  },\n  views: {\n    rowsView: _uiGrid_core2.ColumnsView.inherit(function () {\n      var defaultCellTemplate = function ($container, options) {\n        var isDataTextEmpty = (0, _string.isEmpty)(options.text) && \"data\" === options.rowType;\n        var text = options.text;\n        var container = $container.get(0);\n\n        if (isDataTextEmpty) {\n          _uiGrid_core.default.setEmptyText($container);\n        } else {\n          if (options.column.encodeHtml) {\n            container.textContent = text;\n          } else {\n            container.innerHTML = text;\n          }\n        }\n      };\n\n      var getScrollableBottomPadding = function (that) {\n        var scrollable = that.getScrollable();\n        return scrollable ? Math.ceil(parseFloat(scrollable.$content().css(\"paddingBottom\"))) : 0;\n      };\n\n      return {\n        _getDefaultTemplate: function (column) {\n          switch (column.command) {\n            case \"empty\":\n              return function (container) {\n                container.html(\"&nbsp;\");\n              };\n\n            default:\n              return defaultCellTemplate;\n          }\n        },\n        _getDefaultGroupTemplate: function (column) {\n          var that = this;\n          var summaryTexts = that.option(\"summary.texts\");\n          return function ($container, options) {\n            var data = options.data;\n            var text = options.column.caption + \": \" + options.text;\n            var container = $container.get(0);\n\n            if (options.summaryItems && options.summaryItems.length) {\n              text += \" \" + _uiGrid_core.default.getGroupRowSummaryText(options.summaryItems, summaryTexts);\n            }\n\n            if (data) {\n              if (options.groupContinuedMessage && options.groupContinuesMessage) {\n                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\";\n              } else {\n                if (options.groupContinuesMessage) {\n                  text += \" (\" + options.groupContinuesMessage + \")\";\n                } else {\n                  if (options.groupContinuedMessage) {\n                    text += \" (\" + options.groupContinuedMessage + \")\";\n                  }\n                }\n              }\n            }\n\n            $container.addClass(GROUP_CELL_CLASS);\n\n            if (column.encodeHtml) {\n              container.textContent = text;\n            } else {\n              container.innerHTML = text;\n            }\n          };\n        },\n        _update: function () {},\n        _getCellTemplate: function (options) {\n          var that = this;\n          var column = options.column;\n          var template;\n\n          if (\"group\" === options.rowType && (0, _type.isDefined)(column.groupIndex) && !column.showWhenGrouped && !column.command) {\n            template = column.groupCellTemplate || {\n              allowRenderToDetachedContainer: true,\n              render: that._getDefaultGroupTemplate(column)\n            };\n          } else {\n            if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\n              template = column.cellTemplate;\n            } else {\n              template = {\n                allowRenderToDetachedContainer: true,\n                render: that._getDefaultTemplate(column)\n              };\n            }\n          }\n\n          return template;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var isGroup = \"group\" === row.rowType;\n            var isDataRow = \"data\" === row.rowType;\n            isDataRow && $row.addClass(DATA_ROW_CLASS);\n            isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n            this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\n\n            if (false === row.visible) {\n              $row.hide();\n            }\n\n            if (isGroup) {\n              $row.addClass(GROUP_ROW_CLASS);\n              var isRowExpanded = row.isExpanded;\n              this.setAria(\"role\", \"row\", $row);\n              this.setAria(\"expanded\", (0, _type.isDefined)(isRowExpanded) && isRowExpanded.toString(), $row);\n            }\n          }\n\n          return $row;\n        },\n        _rowPrepared: function ($row, rowOptions, row) {\n          var _this = this;\n\n          if (\"data\" === rowOptions.rowType) {\n            if (this.option(\"rowAlternationEnabled\")) {\n              this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\n              rowOptions.watch && rowOptions.watch(function () {\n                return _this._isAltRow(row);\n              }, function (value) {\n                $row.toggleClass(ROW_ALTERNATION_CLASS, value);\n              });\n            }\n\n            this._setAriaRowIndex(rowOptions, $row);\n\n            rowOptions.watch && rowOptions.watch(function () {\n              return rowOptions.rowIndex;\n            }, function () {\n              return _this._setAriaRowIndex(rowOptions, $row);\n            });\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _setAriaRowIndex: function (row, $row) {\n          var component = this.component;\n          var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && \"virtual\" !== component.option(\"scrolling.rowRenderingMode\");\n          var rowIndex = row.rowIndex + 1;\n\n          if (isPagerMode) {\n            rowIndex = component.pageIndex() * component.pageSize() + rowIndex;\n          } else {\n            rowIndex += this._dataController.getRowIndexOffset();\n          }\n\n          this.setAria(\"rowindex\", rowIndex, $row);\n        },\n        _afterRowPrepared: function (e) {\n          var _this2 = this;\n\n          var arg = e.args[0];\n          var dataController = this._dataController;\n          var row = dataController.getVisibleRows()[arg.rowIndex];\n          var watch = this.option(\"integrationOptions.watchMethod\");\n\n          if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\n            return;\n          }\n\n          var dispose = watch(function () {\n            return dataController.generateDataValues(arg.data, arg.columns);\n          }, function () {\n            dataController.repaintRows([row.rowIndex], _this2.option(\"repaintChangesOnly\"));\n          }, {\n            deep: true,\n            skipImmediate: true\n          });\n\n          _events_engine.default.on(arg.rowElement, _remove_event.default, dispose);\n        },\n        _renderScrollable: function (force) {\n          var that = this;\n          var $element = that.element();\n\n          if (!$element.children().length) {\n            $element.append(\"<div>\");\n          }\n\n          if (force || !that._loadPanel) {\n            that._renderLoadPanel($element, $element.parent(), that._dataController.isLocalStore());\n          }\n\n          if ((force || !that.getScrollable()) && that._dataController.isLoaded()) {\n            var columns = that.getColumns();\n            var allColumnsHasWidth = true;\n\n            for (var i = 0; i < columns.length; i++) {\n              if (!columns[i].width && !columns[i].minWidth) {\n                allColumnsHasWidth = false;\n                break;\n              }\n            }\n\n            if (that.option(\"columnAutoWidth\") || that._hasHeight || allColumnsHasWidth || that._columnsController._isColumnFixing()) {\n              that._renderScrollableCore($element);\n            }\n          }\n        },\n        _handleScroll: function (e) {\n          var that = this;\n          var rtlEnabled = that.option(\"rtlEnabled\");\n          that._isScrollByEvent = !!e.event;\n          that._scrollTop = e.scrollOffset.top;\n          that._scrollLeft = e.scrollOffset.left;\n\n          if (rtlEnabled) {\n            this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft;\n          }\n\n          that.scrollChanged.fire(e.scrollOffset, that.name);\n        },\n        _renderScrollableCore: function ($element) {\n          var that = this;\n\n          var dxScrollableOptions = that._createScrollableOptions();\n\n          var scrollHandler = that._handleScroll.bind(that);\n\n          dxScrollableOptions.onScroll = scrollHandler;\n          dxScrollableOptions.onStop = scrollHandler;\n          that._scrollable = that._createComponent($element, _ui.default, dxScrollableOptions);\n          that._scrollableContainer = that._scrollable && that._scrollable._$container;\n        },\n        _renderLoadPanel: _uiGrid_core.default.renderLoadPanel,\n        _renderContent: function (contentElement, tableElement) {\n          contentElement.empty().append(tableElement);\n          return this._findContentElement();\n        },\n        _updateContent: function (newTableElement, change) {\n          var that = this;\n          var tableElement = that.getTableElement();\n\n          var contentElement = that._findContentElement();\n\n          var changeType = change && change.changeType;\n          var executors = [];\n          var highlightChanges = this.option(\"highlightChanges\");\n          var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\n\n          switch (changeType) {\n            case \"update\":\n              (0, _iterator.each)(change.rowIndices, function (index, rowIndex) {\n                var $newRowElement = that._getRowElements(newTableElement).eq(index);\n\n                var changeType = change.changeTypes && change.changeTypes[index];\n                var item = change.items && change.items[index];\n                executors.push(function () {\n                  var $rowsElement = that._getRowElements();\n\n                  var $rowElement = $rowsElement.eq(rowIndex);\n\n                  switch (changeType) {\n                    case \"update\":\n                      if (item) {\n                        var columnIndices = change.columnIndices && change.columnIndices[index];\n\n                        if ((0, _type.isDefined)(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\n                          $rowElement.toggle(item.visible);\n                        } else {\n                          if (columnIndices) {\n                            that._updateCells($rowElement, $newRowElement, columnIndices);\n                          } else {\n                            $rowElement.replaceWith($newRowElement);\n                          }\n                        }\n                      }\n\n                      break;\n\n                    case \"insert\":\n                      if (!$rowsElement.length) {\n                        if (tableElement) {\n                          var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\n                          $newRowElement.prependTo(target);\n                        }\n                      } else {\n                        if ($rowElement.length) {\n                          $newRowElement.insertBefore($rowElement);\n                        } else {\n                          $newRowElement.insertAfter($rowsElement.last());\n                        }\n                      }\n\n                      if (highlightChanges && change.isLiveUpdate) {\n                        $newRowElement.addClass(rowInsertedClass);\n                      }\n\n                      break;\n\n                    case \"remove\":\n                      $rowElement.remove();\n                  }\n                });\n              });\n              (0, _iterator.each)(executors, function () {\n                this();\n              });\n              newTableElement.remove();\n              break;\n\n            default:\n              that.setTableElement(newTableElement);\n              contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\n\n              that._renderContent(contentElement, newTableElement);\n\n          }\n        },\n        _createEmptyRow: function (className, isFixed, height) {\n          var that = this;\n          var $cell;\n\n          var $row = that._createRow();\n\n          var columns = isFixed ? this.getFixedColumns() : this.getColumns();\n          $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, that.option(\"showColumnLines\"));\n\n          for (var i = 0; i < columns.length; i++) {\n            $cell = that._createCell({\n              column: columns[i],\n              rowType: \"freeSpace\",\n              columnIndex: i,\n              columns: columns\n            });\n            (0, _type.isNumeric)(height) && $cell.css(\"height\", height);\n            $row.append($cell);\n          }\n\n          that.setAria(\"role\", \"presentation\", $row);\n          return $row;\n        },\n        _appendEmptyRow: function ($table, $emptyRow, location) {\n          var $tBodies = this._getBodies($table);\n\n          var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\n          var $container = isTableContainer ? $table : $tBodies;\n\n          if (\"top\" === location) {\n            $container.first().prepend($emptyRow);\n\n            if (isTableContainer) {\n              var $colgroup = $container.children(\"colgroup\");\n              $container.prepend($colgroup);\n            }\n          } else {\n            $container.last().append($emptyRow);\n          }\n        },\n        _renderFreeSpaceRow: function ($tableElement) {\n          var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\n\n          $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\n\n          this._appendEmptyRow($tableElement, $freeSpaceRowElement);\n        },\n        _checkRowKeys: function (options) {\n          var that = this;\n\n          var rows = that._getRows(options);\n\n          var keyExpr = that._dataController.store() && that._dataController.store().key();\n\n          keyExpr && rows.some(function (row) {\n            if (\"data\" === row.rowType && void 0 === row.key) {\n              that._dataController.fireError(\"E1046\", keyExpr);\n\n              return true;\n            }\n          });\n        },\n        _needUpdateRowHeight: function (itemsCount) {\n          return itemsCount > 0 && !this._rowHeight;\n        },\n        _getRowsHeight: function ($tableElement) {\n          var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\n          return $rowElements.toArray().reduce(function (sum, row) {\n            return sum + (0, _position.getBoundingRect)(row).height;\n          }, 0);\n        },\n        _updateRowHeight: function () {\n          var that = this;\n          var $tableElement = that.getTableElement();\n\n          var itemsCount = that._dataController.items().length;\n\n          if ($tableElement && that._needUpdateRowHeight(itemsCount)) {\n            var rowsHeight = that._getRowsHeight($tableElement);\n\n            that._rowHeight = rowsHeight / itemsCount;\n          }\n        },\n        _findContentElement: function () {\n          var $content = this.element();\n          var scrollable = this.getScrollable();\n\n          if ($content) {\n            if (scrollable) {\n              $content = scrollable.$content();\n            }\n\n            return $content.children().first();\n          }\n        },\n        _getRowElements: function (tableElement) {\n          var $rows = this.callBase(tableElement);\n          return $rows && $rows.not(\".\" + FREE_SPACE_CLASS);\n        },\n        _getFreeSpaceRowElements: function ($table) {\n          var tableElements = $table || this.getTableElements();\n          return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS);\n        },\n        _getNoDataText: function () {\n          return this.option(\"noDataText\");\n        },\n        _rowClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowClick\", (0, _extend.extend)({\n            evaluate: function (expr) {\n              var getter = (0, _data.compileGetter)(expr);\n              return getter(item.data);\n            }\n          }, e, item));\n        },\n        _rowDblClick: function (e) {\n          var item = this._dataController.items()[e.rowIndex] || {};\n          this.executeAction(\"onRowDblClick\", (0, _extend.extend)({}, e, item));\n        },\n        _getColumnsCountBeforeGroups: function (columns) {\n          for (var i = 0; i < columns.length; i++) {\n            if (\"groupExpand\" === columns[i].type) {\n              return i;\n            }\n          }\n\n          return 0;\n        },\n        _getGroupCellOptions: function (options) {\n          var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\n\n          var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\n          return {\n            columnIndex: columnIndex,\n            colspan: options.columns.length - columnIndex - 1\n          };\n        },\n        _renderCells: function ($row, options) {\n          if (\"group\" === options.row.rowType) {\n            this._renderGroupedCells($row, options);\n          } else {\n            if (options.row.values) {\n              this.callBase($row, options);\n            }\n          }\n        },\n        _renderGroupedCells: function ($row, options) {\n          var row = options.row;\n          var expandColumn;\n          var columns = options.columns;\n          var rowIndex = row.rowIndex;\n          var isExpanded;\n\n          var groupCellOptions = this._getGroupCellOptions(options);\n\n          for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\n            if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\n              isExpanded = !!row.isExpanded;\n              expandColumn = columns[i];\n            } else {\n              isExpanded = null;\n              expandColumn = {\n                command: \"expand\",\n                cssClass: columns[i].cssClass\n              };\n            }\n\n            this._renderCell($row, {\n              value: isExpanded,\n              row: row,\n              rowIndex: rowIndex,\n              column: expandColumn,\n              columnIndex: i\n            });\n          }\n\n          var groupColumnAlignment = (0, _position.getDefaultAlignment)(this.option(\"rtlEnabled\"));\n          var groupColumn = (0, _extend.extend)({}, columns[groupCellOptions.columnIndex], {\n            command: null,\n            cssClass: null,\n            width: null,\n            showWhenGrouped: false,\n            alignment: groupColumnAlignment\n          });\n\n          if (groupCellOptions.colspan > 1) {\n            groupColumn.colspan = groupCellOptions.colspan;\n          }\n\n          this._renderCell($row, {\n            value: row.values[row.groupIndex],\n            row: row,\n            rowIndex: rowIndex,\n            column: groupColumn,\n            columnIndex: groupCellOptions.columnIndex\n          });\n        },\n        _renderRows: function ($table, options) {\n          var that = this;\n          var scrollingMode = that.option(\"scrolling.mode\");\n          that.callBase($table, (0, _extend.extend)({\n            scrollingMode: scrollingMode\n          }, options));\n\n          that._checkRowKeys(options.change);\n\n          that._renderFreeSpaceRow($table);\n\n          if (!that._hasHeight) {\n            that.updateFreeSpaceRowHeight($table);\n          }\n        },\n        _renderRow: function ($table, options) {\n          var that = this;\n          var row = options.row;\n          var rowTemplate = that.option(\"rowTemplate\");\n\n          if ((\"data\" === row.rowType || \"group\" === row.rowType) && !(0, _type.isDefined)(row.groupIndex) && rowTemplate) {\n            that.renderTemplate($table, rowTemplate, (0, _extend.extend)({\n              columns: options.columns\n            }, row), true);\n          } else {\n            that.callBase($table, options);\n          }\n        },\n        _renderTable: function (options) {\n          var that = this;\n          var $table = that.callBase(options);\n\n          var resizeCompletedHandler = function resizeCompletedHandler() {\n            var scrollableInstance = that.getScrollable();\n\n            if (scrollableInstance && that.element().closest((0, _window.getWindow)().document).length) {\n              that.resizeCompleted.remove(resizeCompletedHandler);\n\n              scrollableInstance._visibilityChanged(true);\n            }\n          };\n\n          if (!(0, _type.isDefined)(that.getTableElement())) {\n            that.setTableElement($table);\n\n            that._renderScrollable(true);\n\n            that.resizeCompleted.add(resizeCompletedHandler);\n          } else {\n            that._renderScrollable();\n          }\n\n          return $table;\n        },\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n\n          if (this.option(\"rowTemplate\")) {\n            $table.appendTo(this.component.$element());\n          }\n\n          return $table;\n        },\n        _renderCore: function (change) {\n          var that = this;\n          var $element = that.element();\n          $element.addClass(that.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\"));\n          $element.toggleClass(EMPTY_CLASS, 0 === that._dataController.items().length);\n          that.setAria(\"role\", \"presentation\", $element);\n\n          var $table = that._renderTable({\n            change: change\n          });\n\n          that._updateContent($table, change);\n\n          that.callBase(change);\n          that._lastColumnWidths = null;\n        },\n        _getRows: function (change) {\n          return change && change.items || this._dataController.items();\n        },\n        _getCellOptions: function (options) {\n          var that = this;\n          var column = options.column;\n          var row = options.row;\n          var data = row.data;\n          var summaryCells = row && row.summaryCells;\n          var value = options.value;\n\n          var displayValue = _uiGrid_core.default.getDisplayValue(column, value, data, row.rowType);\n\n          var parameters = this.callBase(options);\n          parameters.value = value;\n          parameters.oldValue = options.oldValue;\n          parameters.displayValue = displayValue;\n          parameters.row = row;\n          parameters.key = row.key;\n          parameters.data = data;\n          parameters.rowType = row.rowType;\n          parameters.values = row.values;\n          parameters.text = !column.command ? _uiGrid_core.default.formatValue(displayValue, column) : \"\";\n          parameters.rowIndex = row.rowIndex;\n          parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\n          parameters.resized = column.resizedCallbacks;\n\n          if ((0, _type.isDefined)(column.groupIndex) && !column.command) {\n            var groupingTextsOptions = that.option(\"grouping.texts\");\n            var scrollingMode = that.option(\"scrolling.mode\");\n\n            if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n              parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\n              parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage;\n            }\n          }\n\n          return parameters;\n        },\n        _setRowsOpacityCore: function ($rows, visibleColumns, columnIndex, value) {\n          var columnsController = this._columnsController;\n          var columns = columnsController.getColumns();\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n          (0, _iterator.each)($rows, function (rowIndex, row) {\n            if (!(0, _renderer.default)(row).hasClass(GROUP_ROW_CLASS)) {\n              for (var i = 0; i < visibleColumns.length; i++) {\n                if ((0, _type.isNumeric)(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\n                  $rows.eq(rowIndex).children().eq(i).css({\n                    opacity: value\n                  });\n\n                  if (!(0, _type.isNumeric)(columnID)) {\n                    break;\n                  }\n                }\n              }\n            }\n          });\n        },\n        _getDevicePixelRatio: function () {\n          return (0, _window.getWindow)().devicePixelRatio;\n        },\n        renderNoDataText: _uiGrid_core.default.renderNoDataText,\n        getCellOptions: function (rowIndex, columnIdentifier) {\n          var rowOptions = this._dataController.items()[rowIndex];\n\n          var cellOptions;\n          var column;\n\n          if (rowOptions) {\n            if ((0, _type.isString)(columnIdentifier)) {\n              column = this._columnsController.columnOption(columnIdentifier);\n            } else {\n              column = this._columnsController.getVisibleColumns()[columnIdentifier];\n            }\n\n            if (column) {\n              cellOptions = this._getCellOptions({\n                value: column.calculateCellValue(rowOptions.data),\n                rowIndex: rowOptions.rowIndex,\n                row: rowOptions,\n                column: column\n              });\n            }\n          }\n\n          return cellOptions;\n        },\n        getRow: function (index) {\n          if (index >= 0) {\n            var rows = this._getRowElements();\n\n            if (rows.length > index) {\n              return (0, _renderer.default)(rows[index]);\n            }\n          }\n        },\n        updateFreeSpaceRowHeight: function ($table) {\n          var _this3 = this;\n\n          var dataController = this._dataController;\n          var itemCount = dataController.items(true).length;\n\n          var contentElement = this._findContentElement();\n\n          var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\n\n          if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\n            var isFreeSpaceRowVisible = false;\n\n            if (itemCount > 0) {\n              if (!this._hasHeight) {\n                var freeSpaceRowCount = dataController.pageSize() - itemCount;\n                var scrollingMode = this.option(\"scrolling.mode\");\n\n                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\n                  (0, _style.setHeight)(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\n                  isFreeSpaceRowVisible = true;\n                }\n\n                if (!isFreeSpaceRowVisible && $table) {\n                  (0, _style.setHeight)(freeSpaceRowElements, 0);\n                } else {\n                  freeSpaceRowElements.toggle(isFreeSpaceRowVisible);\n                }\n\n                this._updateLastRowBorder(isFreeSpaceRowVisible);\n              } else {\n                freeSpaceRowElements.hide();\n                (0, _common.deferUpdate)(function () {\n                  var scrollbarWidth = _this3.getScrollbarWidth(true);\n\n                  var elementHeightWithoutScrollbar = _this3.element().height() - scrollbarWidth;\n                  var contentHeight = contentElement.outerHeight();\n                  var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\n\n                  var rowsHeight = _this3._getRowsHeight(contentElement.children().first());\n\n                  var $tableElement = $table || _this3.getTableElements();\n\n                  var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\n\n                  var heightCorrection = _this3._getHeightCorrection();\n\n                  var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\n\n                  if (showFreeSpaceRow) {\n                    (0, _common.deferRender)(function () {\n                      freeSpaceRowElements.css(\"height\", resultHeight);\n                      isFreeSpaceRowVisible = true;\n                      freeSpaceRowElements.show();\n                    });\n                  }\n\n                  (0, _common.deferRender)(function () {\n                    return _this3._updateLastRowBorder(isFreeSpaceRowVisible);\n                  });\n                });\n              }\n            } else {\n              freeSpaceRowElements.css(\"height\", 0);\n              freeSpaceRowElements.show();\n\n              this._updateLastRowBorder(true);\n            }\n          }\n        },\n        _getHeightCorrection: function () {\n          var isZoomedWebkit = _browser.default.webkit && this._getDevicePixelRatio() >= 2;\n          var hasExtraBorderTop = _browser.default.mozilla && _browser.default.version >= 70 && !this.option(\"showRowLines\");\n          return isZoomedWebkit || hasExtraBorderTop ? 1 : 0;\n        },\n        _columnOptionChanged: function (e) {\n          var optionNames = e.optionNames;\n\n          if (e.changeTypes.grouping) {\n            return;\n          }\n\n          if (optionNames.width || optionNames.visibleWidth) {\n            this.callBase(e);\n\n            this._fireColumnResizedCallbacks();\n          }\n        },\n        getScrollable: function () {\n          return this._scrollable;\n        },\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          that._editorFactoryController = that.getController(\"editorFactory\");\n          that._rowHeight = 0;\n          that._scrollTop = 0;\n          that._scrollLeft = -1;\n          that._scrollRight = 0;\n          that._hasHeight = false;\n          dataController.loadingChanged.add(function (isLoading, messageText) {\n            that.setLoading(isLoading, messageText);\n          });\n          dataController.dataSourceChanged.add(function () {\n            if (that._scrollLeft >= 0) {\n              that._handleScroll({\n                component: that.getScrollable(),\n                scrollOffset: {\n                  top: that._scrollTop,\n                  left: that._scrollLeft\n                }\n              });\n            }\n          });\n        },\n        _handleDataChanged: function (change) {\n          var that = this;\n\n          switch (change.changeType) {\n            case \"refresh\":\n            case \"prepend\":\n            case \"append\":\n            case \"update\":\n              that.render(null, change);\n              break;\n\n            default:\n              that._update(change);\n\n          }\n        },\n        publicMethods: function () {\n          return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"];\n        },\n        contentWidth: function () {\n          return this.element().width() - this.getScrollbarWidth();\n        },\n        getScrollbarWidth: function (isHorizontal) {\n          var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\n\n          var scrollbarWidth = 0;\n\n          if (scrollableContainer) {\n            if (!isHorizontal) {\n              scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0;\n            } else {\n              scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\n              scrollbarWidth += getScrollableBottomPadding(this);\n            }\n          }\n\n          return scrollbarWidth > 0 ? scrollbarWidth : 0;\n        },\n        _fireColumnResizedCallbacks: function () {\n          var that = this;\n          var lastColumnWidths = that._lastColumnWidths || [];\n          var columnWidths = [];\n          var columns = that.getColumns();\n\n          for (var i = 0; i < columns.length; i++) {\n            columnWidths[i] = columns[i].visibleWidth;\n\n            if (columns[i].resizedCallbacks && !(0, _type.isDefined)(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\n              columns[i].resizedCallbacks.fire(columnWidths[i]);\n            }\n          }\n\n          that._lastColumnWidths = columnWidths;\n        },\n        _updateLastRowBorder: function (isFreeSpaceRowVisible) {\n          if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\n            this.element().addClass(LAST_ROW_BORDER);\n          } else {\n            this.element().removeClass(LAST_ROW_BORDER);\n          }\n        },\n        _updateScrollable: function () {\n          var dxScrollable = _ui.default.getInstance(this.element());\n\n          if (dxScrollable) {\n            dxScrollable.update();\n\n            this._updateHorizontalScrollPosition();\n          }\n        },\n        _updateHorizontalScrollPosition: function () {\n          var scrollable = this.getScrollable();\n          var scrollLeft = scrollable && scrollable.scrollOffset().left;\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\n            var scrollRight = maxHorizontalScrollOffset - scrollLeft;\n\n            if (scrollRight !== this._scrollRight) {\n              this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight;\n            }\n          }\n\n          if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\n            scrollable.scrollTo({\n              x: this._scrollLeft\n            });\n          }\n        },\n        _resizeCore: function () {\n          var that = this;\n\n          that._fireColumnResizedCallbacks();\n\n          that._updateRowHeight();\n\n          (0, _common.deferRender)(function () {\n            that._renderScrollable();\n\n            that.renderNoDataText();\n            that.updateFreeSpaceRowHeight();\n            (0, _common.deferUpdate)(function () {\n              that._updateScrollable();\n            });\n          });\n        },\n        scrollTo: function (location) {\n          var $element = this.element();\n\n          var dxScrollable = $element && _ui.default.getInstance($element);\n\n          if (dxScrollable) {\n            dxScrollable.scrollTo(location);\n          }\n        },\n        height: function (_height, hasHeight) {\n          var that = this;\n          var $element = this.element();\n\n          if (0 === arguments.length) {\n            return $element ? $element.outerHeight(true) : 0;\n          }\n\n          that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\n\n          if ((0, _type.isDefined)(_height) && $element) {\n            (0, _style.setHeight)($element, _height);\n          }\n        },\n        setLoading: function (isLoading, messageText) {\n          var that = this;\n          var loadPanel = that._loadPanel;\n          var dataController = that._dataController;\n          var loadPanelOptions = that.option(\"loadPanel\") || {};\n          var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\n          var $element = that.element();\n\n          if (!(0, _window.hasWindow)()) {\n            return;\n          }\n\n          if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\n            that._renderLoadPanel($element, $element.parent());\n\n            loadPanel = that._loadPanel;\n          }\n\n          if (loadPanel) {\n            var visibilityOptions = {\n              message: messageText || loadPanelOptions.text,\n              animation: animation,\n              visible: isLoading\n            };\n            clearTimeout(that._hideLoadingTimeoutID);\n\n            if (loadPanel.option(\"visible\") && !isLoading) {\n              that._hideLoadingTimeoutID = setTimeout(function () {\n                loadPanel.option(visibilityOptions);\n              }, LOADPANEL_HIDE_TIMEOUT);\n            } else {\n              loadPanel.option(visibilityOptions);\n            }\n          }\n        },\n        setRowsOpacity: function (columnIndex, value) {\n          var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\n\n          this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value);\n        },\n        _getCellElementsCore: function (rowIndex) {\n          var $cells = this.callBase.apply(this, arguments);\n\n          if ($cells) {\n            var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\n\n            if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\n              return $cells.slice(0, groupCellIndex + 1);\n            }\n          }\n\n          return $cells;\n        },\n        getTopVisibleItemIndex: function (isFloor) {\n          var that = this;\n          var itemIndex = 0;\n          var prevOffsetTop = 0;\n          var offsetTop = 0;\n          var scrollPosition = that._scrollTop;\n\n          var $contentElement = that._findContentElement();\n\n          var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\n\n          var items = that._dataController.items();\n\n          var tableElement = that.getTableElement();\n\n          if (items.length && tableElement) {\n            var rowElements = that._getRowElements(tableElement).filter(\":visible\");\n\n            for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\n              prevOffsetTop = offsetTop;\n              var rowElement = rowElements.eq(itemIndex);\n\n              if (rowElement.length) {\n                offsetTop = rowElement.offset().top - contentElementOffsetTop;\n\n                if (offsetTop > scrollPosition) {\n                  if (itemIndex) {\n                    if (isFloor || 2 * scrollPosition < Math.round(offsetTop + prevOffsetTop)) {\n                      itemIndex--;\n                    }\n                  }\n\n                  break;\n                }\n              }\n            }\n\n            if (itemIndex && itemIndex === items.length) {\n              itemIndex--;\n            }\n          }\n\n          return itemIndex;\n        },\n        getTopVisibleRowData: function () {\n          var itemIndex = this.getTopVisibleItemIndex();\n\n          var items = this._dataController.items();\n\n          if (items[itemIndex]) {\n            return items[itemIndex].data;\n          }\n        },\n        _scrollToElement: function ($element, offset) {\n          var scrollable = this.getScrollable();\n          scrollable && scrollable.scrollToElement($element, offset);\n        },\n        optionChanged: function (args) {\n          var that = this;\n          that.callBase(args);\n\n          switch (args.name) {\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n            case \"showRowLines\":\n            case \"rowAlternationEnabled\":\n            case \"rowTemplate\":\n            case \"twoWayBindingEnabled\":\n              that._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            case \"scrolling\":\n              that._rowHeight = null;\n              that._tableElement = null;\n              args.handled = true;\n              break;\n\n            case \"rtlEnabled\":\n              that._rowHeight = null;\n              that._tableElement = null;\n              break;\n\n            case \"loadPanel\":\n              that._tableElement = null;\n\n              that._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\n\n              args.handled = true;\n              break;\n\n            case \"noDataText\":\n              that.renderNoDataText();\n              args.handled = true;\n          }\n        },\n        dispose: function () {\n          clearTimeout(this._hideLoadingTimeoutID);\n          this._scrollable && this._scrollable.dispose();\n        },\n        setScrollerSpacing: function () {}\n      };\n    }())\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.rows.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_window","_events_engine","_common","_style","_type","_iterator","_extend","_position","_string","_data","_uiGrid_core","_uiGrid_core2","_ui","_remove_event","_message","_browser","obj","__esModule","ROWS_VIEW_CLASS","CONTENT_CLASS","NOWRAP_CLASS","GROUP_ROW_CLASS","GROUP_CELL_CLASS","DATA_ROW_CLASS","FREE_SPACE_CLASS","ROW_LINES_CLASS","COLUMN_LINES_CLASS","ROW_ALTERNATION_CLASS","LAST_ROW_BORDER","EMPTY_CLASS","ROW_INSERTED_ANIMATION_CLASS","LOADPANEL_HIDE_TIMEOUT","getMaxHorizontalScrollOffset","scrollable","scrollWidth","clientWidth","_default","defaultOptions","hoverStateEnabled","scrolling","useNative","loadPanel","enabled","text","format","width","height","showIndicator","indicatorSrc","showPane","rowTemplate","columnAutoWidth","noDataText","wordWrapEnabled","showColumnLines","showRowLines","rowAlternationEnabled","activeStateEnabled","twoWayBindingEnabled","views","rowsView","ColumnsView","inherit","defaultCellTemplate","$container","options","isDataTextEmpty","isEmpty","rowType","container","get","setEmptyText","column","encodeHtml","textContent","innerHTML","getScrollableBottomPadding","that","getScrollable","Math","ceil","parseFloat","$content","css","_getDefaultTemplate","command","html","_getDefaultGroupTemplate","summaryTexts","option","data","caption","summaryItems","length","getGroupRowSummaryText","groupContinuedMessage","groupContinuesMessage","addClass","_update","_getCellTemplate","template","isDefined","groupIndex","showWhenGrouped","groupCellTemplate","allowRenderToDetachedContainer","render","cellTemplate","_createRow","row","$row","callBase","isGroup","isDataRow","visible","hide","isRowExpanded","isExpanded","setAria","toString","_rowPrepared","rowOptions","_this","_isAltRow","watch","value","toggleClass","_setAriaRowIndex","rowIndex","apply","arguments","component","isPagerMode","pageIndex","pageSize","_dataController","getRowIndexOffset","_afterRowPrepared","e","_this2","arg","args","dataController","getVisibleRows","isNewRow","dispose","generateDataValues","columns","repaintRows","deep","skipImmediate","on","rowElement","_renderScrollable","force","$element","element","children","append","_loadPanel","_renderLoadPanel","parent","isLocalStore","isLoaded","getColumns","allColumnsHasWidth","i","minWidth","_hasHeight","_columnsController","_isColumnFixing","_renderScrollableCore","_handleScroll","rtlEnabled","_isScrollByEvent","event","_scrollTop","scrollOffset","top","_scrollLeft","left","_scrollRight","scrollChanged","fire","name","dxScrollableOptions","_createScrollableOptions","scrollHandler","bind","onScroll","onStop","_scrollable","_createComponent","_scrollableContainer","_$container","renderLoadPanel","_renderContent","contentElement","tableElement","empty","_findContentElement","_updateContent","newTableElement","change","getTableElement","changeType","executors","highlightChanges","rowInsertedClass","addWidgetPrefix","each","rowIndices","index","$newRowElement","_getRowElements","eq","changeTypes","item","items","push","$rowsElement","$rowElement","columnIndices","is","toggle","_updateCells","replaceWith","target","prependTo","insertBefore","insertAfter","last","isLiveUpdate","remove","setTableElement","_createEmptyRow","className","isFixed","$cell","getFixedColumns","_createCell","columnIndex","isNumeric","_appendEmptyRow","$table","$emptyRow","location","$tBodies","_getBodies","isTableContainer","first","prepend","$colgroup","_renderFreeSpaceRow","$tableElement","$freeSpaceRowElement","_wrapRowIfNeed","_checkRowKeys","rows","_getRows","keyExpr","store","key","some","fireError","_needUpdateRowHeight","itemsCount","_rowHeight","_getRowsHeight","$rowElements","not","toArray","reduce","sum","getBoundingRect","_updateRowHeight","rowsHeight","$rows","_getFreeSpaceRowElements","tableElements","getTableElements","_getNoDataText","_rowClick","executeAction","extend","evaluate","expr","getter","compileGetter","_rowDblClick","_getColumnsCountBeforeGroups","type","_getGroupCellOptions","columnsCountBeforeGroups","colspan","_renderCells","_renderGroupedCells","values","expandColumn","groupCellOptions","allowCollapsing","scrollingMode","cssClass","_renderCell","groupColumnAlignment","getDefaultAlignment","groupColumn","alignment","_renderRows","updateFreeSpaceRowHeight","_renderRow","renderTemplate","_renderTable","resizeCompletedHandler","scrollableInstance","closest","getWindow","document","resizeCompleted","_visibilityChanged","add","_createTable","appendTo","_renderCore","_lastColumnWidths","_getCellOptions","summaryCells","displayValue","getDisplayValue","parameters","oldValue","formatValue","resized","resizedCallbacks","groupingTextsOptions","isContinuationOnNextPage","isContinuation","_setRowsOpacityCore","visibleColumns","columnsController","columnID","isBand","hasClass","isParentBandColumn","opacity","_getDevicePixelRatio","devicePixelRatio","renderNoDataText","getCellOptions","columnIdentifier","cellOptions","isString","columnOption","getVisibleColumns","calculateCellValue","getRow","_this3","itemCount","freeSpaceRowElements","totalCount","isFreeSpaceRowVisible","freeSpaceRowCount","pageCount","setHeight","_updateLastRowBorder","deferUpdate","scrollbarWidth","getScrollbarWidth","elementHeightWithoutScrollbar","contentHeight","outerHeight","showFreeSpaceRow","borderTopWidth","heightCorrection","_getHeightCorrection","resultHeight","deferRender","show","isZoomedWebkit","webkit","hasExtraBorderTop","mozilla","version","_columnOptionChanged","optionNames","grouping","visibleWidth","_fireColumnResizedCallbacks","init","getController","_editorFactoryController","loadingChanged","isLoading","messageText","setLoading","dataSourceChanged","_handleDataChanged","publicMethods","contentWidth","isHorizontal","scrollableContainer","offsetWidth","clientHeight","offsetHeight","lastColumnWidths","columnWidths","removeClass","_updateScrollable","dxScrollable","getInstance","update","_updateHorizontalScrollPosition","scrollLeft","maxHorizontalScrollOffset","scrollRight","scrollTo","x","_resizeCore","_height","hasHeight","loadPanelOptions","animation","hasWindow","visibilityOptions","message","clearTimeout","_hideLoadingTimeoutID","setTimeout","setRowsOpacity","_getCellElementsCore","$cells","groupCellIndex","filter","slice","getTopVisibleItemIndex","isFloor","itemIndex","prevOffsetTop","offsetTop","scrollPosition","$contentElement","contentElementOffsetTop","offset","rowElements","round","getTopVisibleRowData","_scrollToElement","scrollToElement","optionChanged","_invalidate","handled","_tableElement","fullName","setScrollerSpacing","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.rows.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _style = require(\"../../core/utils/style\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _position = require(\"../../core/utils/position\");\r\nvar _string = require(\"../../core/utils/string\");\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _uiGrid_core2 = require(\"./ui.grid_core.columns_view\");\r\nvar _ui = _interopRequireDefault(require(\"../scroll_view/ui.scrollable\"));\r\nvar _remove_event = _interopRequireDefault(require(\"../../core/remove_event\"));\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar FREE_SPACE_CLASS = \"dx-freespace-row\";\r\nvar ROW_LINES_CLASS = \"dx-row-lines\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar ROW_ALTERNATION_CLASS = \"dx-row-alt\";\r\nvar LAST_ROW_BORDER = \"dx-last-row-border\";\r\nvar EMPTY_CLASS = \"dx-empty\";\r\nvar ROW_INSERTED_ANIMATION_CLASS = \"row-inserted-animation\";\r\nvar LOADPANEL_HIDE_TIMEOUT = 200;\r\n\r\nfunction getMaxHorizontalScrollOffset(scrollable) {\r\n    return scrollable ? scrollable.scrollWidth() - scrollable.clientWidth() : 0\r\n}\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            hoverStateEnabled: false,\r\n            scrolling: {\r\n                useNative: \"auto\"\r\n            },\r\n            loadPanel: {\r\n                enabled: \"auto\",\r\n                text: _message.default.format(\"Loading\"),\r\n                width: 200,\r\n                height: 90,\r\n                showIndicator: true,\r\n                indicatorSrc: \"\",\r\n                showPane: true\r\n            },\r\n            rowTemplate: null,\r\n            columnAutoWidth: false,\r\n            noDataText: _message.default.format(\"dxDataGrid-noDataText\"),\r\n            wordWrapEnabled: false,\r\n            showColumnLines: true,\r\n            showRowLines: false,\r\n            rowAlternationEnabled: false,\r\n            activeStateEnabled: false,\r\n            twoWayBindingEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        rowsView: _uiGrid_core2.ColumnsView.inherit(function() {\r\n            var defaultCellTemplate = function($container, options) {\r\n                var isDataTextEmpty = (0, _string.isEmpty)(options.text) && \"data\" === options.rowType;\r\n                var text = options.text;\r\n                var container = $container.get(0);\r\n                if (isDataTextEmpty) {\r\n                    _uiGrid_core.default.setEmptyText($container)\r\n                } else {\r\n                    if (options.column.encodeHtml) {\r\n                        container.textContent = text\r\n                    } else {\r\n                        container.innerHTML = text\r\n                    }\r\n                }\r\n            };\r\n            var getScrollableBottomPadding = function(that) {\r\n                var scrollable = that.getScrollable();\r\n                return scrollable ? Math.ceil(parseFloat(scrollable.$content().css(\"paddingBottom\"))) : 0\r\n            };\r\n            return {\r\n                _getDefaultTemplate: function(column) {\r\n                    switch (column.command) {\r\n                        case \"empty\":\r\n                            return function(container) {\r\n                                container.html(\"&nbsp;\")\r\n                            };\r\n                        default:\r\n                            return defaultCellTemplate\r\n                    }\r\n                },\r\n                _getDefaultGroupTemplate: function(column) {\r\n                    var that = this;\r\n                    var summaryTexts = that.option(\"summary.texts\");\r\n                    return function($container, options) {\r\n                        var data = options.data;\r\n                        var text = options.column.caption + \": \" + options.text;\r\n                        var container = $container.get(0);\r\n                        if (options.summaryItems && options.summaryItems.length) {\r\n                            text += \" \" + _uiGrid_core.default.getGroupRowSummaryText(options.summaryItems, summaryTexts)\r\n                        }\r\n                        if (data) {\r\n                            if (options.groupContinuedMessage && options.groupContinuesMessage) {\r\n                                text += \" (\" + options.groupContinuedMessage + \". \" + options.groupContinuesMessage + \")\"\r\n                            } else {\r\n                                if (options.groupContinuesMessage) {\r\n                                    text += \" (\" + options.groupContinuesMessage + \")\"\r\n                                } else {\r\n                                    if (options.groupContinuedMessage) {\r\n                                        text += \" (\" + options.groupContinuedMessage + \")\"\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        $container.addClass(GROUP_CELL_CLASS);\r\n                        if (column.encodeHtml) {\r\n                            container.textContent = text\r\n                        } else {\r\n                            container.innerHTML = text\r\n                        }\r\n                    }\r\n                },\r\n                _update: function() {},\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    var template;\r\n                    if (\"group\" === options.rowType && (0, _type.isDefined)(column.groupIndex) && !column.showWhenGrouped && !column.command) {\r\n                        template = column.groupCellTemplate || {\r\n                            allowRenderToDetachedContainer: true,\r\n                            render: that._getDefaultGroupTemplate(column)\r\n                        }\r\n                    } else {\r\n                        if ((\"data\" === options.rowType || column.command) && column.cellTemplate) {\r\n                            template = column.cellTemplate\r\n                        } else {\r\n                            template = {\r\n                                allowRenderToDetachedContainer: true,\r\n                                render: that._getDefaultTemplate(column)\r\n                            }\r\n                        }\r\n                    }\r\n                    return template\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var isGroup = \"group\" === row.rowType;\r\n                        var isDataRow = \"data\" === row.rowType;\r\n                        isDataRow && $row.addClass(DATA_ROW_CLASS);\r\n                        isDataRow && this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\r\n                        this.option(\"showColumnLines\") && $row.addClass(COLUMN_LINES_CLASS);\r\n                        if (false === row.visible) {\r\n                            $row.hide()\r\n                        }\r\n                        if (isGroup) {\r\n                            $row.addClass(GROUP_ROW_CLASS);\r\n                            var isRowExpanded = row.isExpanded;\r\n                            this.setAria(\"role\", \"row\", $row);\r\n                            this.setAria(\"expanded\", (0, _type.isDefined)(isRowExpanded) && isRowExpanded.toString(), $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowPrepared: function($row, rowOptions, row) {\r\n                    var _this = this;\r\n                    if (\"data\" === rowOptions.rowType) {\r\n                        if (this.option(\"rowAlternationEnabled\")) {\r\n                            this._isAltRow(row) && $row.addClass(ROW_ALTERNATION_CLASS);\r\n                            rowOptions.watch && rowOptions.watch(function() {\r\n                                return _this._isAltRow(row)\r\n                            }, function(value) {\r\n                                $row.toggleClass(ROW_ALTERNATION_CLASS, value)\r\n                            })\r\n                        }\r\n                        this._setAriaRowIndex(rowOptions, $row);\r\n                        rowOptions.watch && rowOptions.watch(function() {\r\n                            return rowOptions.rowIndex\r\n                        }, function() {\r\n                            return _this._setAriaRowIndex(rowOptions, $row)\r\n                        })\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _setAriaRowIndex: function(row, $row) {\r\n                    var component = this.component;\r\n                    var isPagerMode = \"standard\" === component.option(\"scrolling.mode\") && \"virtual\" !== component.option(\"scrolling.rowRenderingMode\");\r\n                    var rowIndex = row.rowIndex + 1;\r\n                    if (isPagerMode) {\r\n                        rowIndex = component.pageIndex() * component.pageSize() + rowIndex\r\n                    } else {\r\n                        rowIndex += this._dataController.getRowIndexOffset()\r\n                    }\r\n                    this.setAria(\"rowindex\", rowIndex, $row)\r\n                },\r\n                _afterRowPrepared: function(e) {\r\n                    var _this2 = this;\r\n                    var arg = e.args[0];\r\n                    var dataController = this._dataController;\r\n                    var row = dataController.getVisibleRows()[arg.rowIndex];\r\n                    var watch = this.option(\"integrationOptions.watchMethod\");\r\n                    if (!arg.data || \"data\" !== arg.rowType || arg.isNewRow || !this.option(\"twoWayBindingEnabled\") || !watch || !row) {\r\n                        return\r\n                    }\r\n                    var dispose = watch(function() {\r\n                        return dataController.generateDataValues(arg.data, arg.columns)\r\n                    }, function() {\r\n                        dataController.repaintRows([row.rowIndex], _this2.option(\"repaintChangesOnly\"))\r\n                    }, {\r\n                        deep: true,\r\n                        skipImmediate: true\r\n                    });\r\n                    _events_engine.default.on(arg.rowElement, _remove_event.default, dispose)\r\n                },\r\n                _renderScrollable: function(force) {\r\n                    var that = this;\r\n                    var $element = that.element();\r\n                    if (!$element.children().length) {\r\n                        $element.append(\"<div>\")\r\n                    }\r\n                    if (force || !that._loadPanel) {\r\n                        that._renderLoadPanel($element, $element.parent(), that._dataController.isLocalStore())\r\n                    }\r\n                    if ((force || !that.getScrollable()) && that._dataController.isLoaded()) {\r\n                        var columns = that.getColumns();\r\n                        var allColumnsHasWidth = true;\r\n                        for (var i = 0; i < columns.length; i++) {\r\n                            if (!columns[i].width && !columns[i].minWidth) {\r\n                                allColumnsHasWidth = false;\r\n                                break\r\n                            }\r\n                        }\r\n                        if (that.option(\"columnAutoWidth\") || that._hasHeight || allColumnsHasWidth || that._columnsController._isColumnFixing()) {\r\n                            that._renderScrollableCore($element)\r\n                        }\r\n                    }\r\n                },\r\n                _handleScroll: function(e) {\r\n                    var that = this;\r\n                    var rtlEnabled = that.option(\"rtlEnabled\");\r\n                    that._isScrollByEvent = !!e.event;\r\n                    that._scrollTop = e.scrollOffset.top;\r\n                    that._scrollLeft = e.scrollOffset.left;\r\n                    if (rtlEnabled) {\r\n                        this._scrollRight = getMaxHorizontalScrollOffset(e.component) - this._scrollLeft\r\n                    }\r\n                    that.scrollChanged.fire(e.scrollOffset, that.name)\r\n                },\r\n                _renderScrollableCore: function($element) {\r\n                    var that = this;\r\n                    var dxScrollableOptions = that._createScrollableOptions();\r\n                    var scrollHandler = that._handleScroll.bind(that);\r\n                    dxScrollableOptions.onScroll = scrollHandler;\r\n                    dxScrollableOptions.onStop = scrollHandler;\r\n                    that._scrollable = that._createComponent($element, _ui.default, dxScrollableOptions);\r\n                    that._scrollableContainer = that._scrollable && that._scrollable._$container\r\n                },\r\n                _renderLoadPanel: _uiGrid_core.default.renderLoadPanel,\r\n                _renderContent: function(contentElement, tableElement) {\r\n                    contentElement.empty().append(tableElement);\r\n                    return this._findContentElement()\r\n                },\r\n                _updateContent: function(newTableElement, change) {\r\n                    var that = this;\r\n                    var tableElement = that.getTableElement();\r\n                    var contentElement = that._findContentElement();\r\n                    var changeType = change && change.changeType;\r\n                    var executors = [];\r\n                    var highlightChanges = this.option(\"highlightChanges\");\r\n                    var rowInsertedClass = this.addWidgetPrefix(ROW_INSERTED_ANIMATION_CLASS);\r\n                    switch (changeType) {\r\n                        case \"update\":\r\n                            (0, _iterator.each)(change.rowIndices, function(index, rowIndex) {\r\n                                var $newRowElement = that._getRowElements(newTableElement).eq(index);\r\n                                var changeType = change.changeTypes && change.changeTypes[index];\r\n                                var item = change.items && change.items[index];\r\n                                executors.push(function() {\r\n                                    var $rowsElement = that._getRowElements();\r\n                                    var $rowElement = $rowsElement.eq(rowIndex);\r\n                                    switch (changeType) {\r\n                                        case \"update\":\r\n                                            if (item) {\r\n                                                var columnIndices = change.columnIndices && change.columnIndices[index];\r\n                                                if ((0, _type.isDefined)(item.visible) && item.visible !== $rowElement.is(\":visible\")) {\r\n                                                    $rowElement.toggle(item.visible)\r\n                                                } else {\r\n                                                    if (columnIndices) {\r\n                                                        that._updateCells($rowElement, $newRowElement, columnIndices)\r\n                                                    } else {\r\n                                                        $rowElement.replaceWith($newRowElement)\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            break;\r\n                                        case \"insert\":\r\n                                            if (!$rowsElement.length) {\r\n                                                if (tableElement) {\r\n                                                    var target = $newRowElement.is(\"tbody\") ? tableElement : tableElement.children(\"tbody\");\r\n                                                    $newRowElement.prependTo(target)\r\n                                                }\r\n                                            } else {\r\n                                                if ($rowElement.length) {\r\n                                                    $newRowElement.insertBefore($rowElement)\r\n                                                } else {\r\n                                                    $newRowElement.insertAfter($rowsElement.last())\r\n                                                }\r\n                                            }\r\n                                            if (highlightChanges && change.isLiveUpdate) {\r\n                                                $newRowElement.addClass(rowInsertedClass)\r\n                                            }\r\n                                            break;\r\n                                        case \"remove\":\r\n                                            $rowElement.remove()\r\n                                    }\r\n                                })\r\n                            });\r\n                            (0, _iterator.each)(executors, function() {\r\n                                this()\r\n                            });\r\n                            newTableElement.remove();\r\n                            break;\r\n                        default:\r\n                            that.setTableElement(newTableElement);\r\n                            contentElement.addClass(that.addWidgetPrefix(CONTENT_CLASS));\r\n                            that._renderContent(contentElement, newTableElement)\r\n                    }\r\n                },\r\n                _createEmptyRow: function(className, isFixed, height) {\r\n                    var that = this;\r\n                    var $cell;\r\n                    var $row = that._createRow();\r\n                    var columns = isFixed ? this.getFixedColumns() : this.getColumns();\r\n                    $row.addClass(className).toggleClass(COLUMN_LINES_CLASS, that.option(\"showColumnLines\"));\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        $cell = that._createCell({\r\n                            column: columns[i],\r\n                            rowType: \"freeSpace\",\r\n                            columnIndex: i,\r\n                            columns: columns\r\n                        });\r\n                        (0, _type.isNumeric)(height) && $cell.css(\"height\", height);\r\n                        $row.append($cell)\r\n                    }\r\n                    that.setAria(\"role\", \"presentation\", $row);\r\n                    return $row\r\n                },\r\n                _appendEmptyRow: function($table, $emptyRow, location) {\r\n                    var $tBodies = this._getBodies($table);\r\n                    var isTableContainer = !$tBodies.length || $emptyRow.is(\"tbody\");\r\n                    var $container = isTableContainer ? $table : $tBodies;\r\n                    if (\"top\" === location) {\r\n                        $container.first().prepend($emptyRow);\r\n                        if (isTableContainer) {\r\n                            var $colgroup = $container.children(\"colgroup\");\r\n                            $container.prepend($colgroup)\r\n                        }\r\n                    } else {\r\n                        $container.last().append($emptyRow)\r\n                    }\r\n                },\r\n                _renderFreeSpaceRow: function($tableElement) {\r\n                    var $freeSpaceRowElement = this._createEmptyRow(FREE_SPACE_CLASS);\r\n                    $freeSpaceRowElement = this._wrapRowIfNeed($tableElement, $freeSpaceRowElement);\r\n                    this._appendEmptyRow($tableElement, $freeSpaceRowElement)\r\n                },\r\n                _checkRowKeys: function(options) {\r\n                    var that = this;\r\n                    var rows = that._getRows(options);\r\n                    var keyExpr = that._dataController.store() && that._dataController.store().key();\r\n                    keyExpr && rows.some(function(row) {\r\n                        if (\"data\" === row.rowType && void 0 === row.key) {\r\n                            that._dataController.fireError(\"E1046\", keyExpr);\r\n                            return true\r\n                        }\r\n                    })\r\n                },\r\n                _needUpdateRowHeight: function(itemsCount) {\r\n                    return itemsCount > 0 && !this._rowHeight\r\n                },\r\n                _getRowsHeight: function($tableElement) {\r\n                    var $rowElements = $tableElement.children(\"tbody\").children().not(\".dx-virtual-row\").not(\".\" + FREE_SPACE_CLASS);\r\n                    return $rowElements.toArray().reduce(function(sum, row) {\r\n                        return sum + (0, _position.getBoundingRect)(row).height\r\n                    }, 0)\r\n                },\r\n                _updateRowHeight: function() {\r\n                    var that = this;\r\n                    var $tableElement = that.getTableElement();\r\n                    var itemsCount = that._dataController.items().length;\r\n                    if ($tableElement && that._needUpdateRowHeight(itemsCount)) {\r\n                        var rowsHeight = that._getRowsHeight($tableElement);\r\n                        that._rowHeight = rowsHeight / itemsCount\r\n                    }\r\n                },\r\n                _findContentElement: function() {\r\n                    var $content = this.element();\r\n                    var scrollable = this.getScrollable();\r\n                    if ($content) {\r\n                        if (scrollable) {\r\n                            $content = scrollable.$content()\r\n                        }\r\n                        return $content.children().first()\r\n                    }\r\n                },\r\n                _getRowElements: function(tableElement) {\r\n                    var $rows = this.callBase(tableElement);\r\n                    return $rows && $rows.not(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getFreeSpaceRowElements: function($table) {\r\n                    var tableElements = $table || this.getTableElements();\r\n                    return tableElements && tableElements.children(\"tbody\").children(\".\" + FREE_SPACE_CLASS)\r\n                },\r\n                _getNoDataText: function() {\r\n                    return this.option(\"noDataText\")\r\n                },\r\n                _rowClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowClick\", (0, _extend.extend)({\r\n                        evaluate: function(expr) {\r\n                            var getter = (0, _data.compileGetter)(expr);\r\n                            return getter(item.data)\r\n                        }\r\n                    }, e, item))\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    var item = this._dataController.items()[e.rowIndex] || {};\r\n                    this.executeAction(\"onRowDblClick\", (0, _extend.extend)({}, e, item))\r\n                },\r\n                _getColumnsCountBeforeGroups: function(columns) {\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (\"groupExpand\" === columns[i].type) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return 0\r\n                },\r\n                _getGroupCellOptions: function(options) {\r\n                    var columnsCountBeforeGroups = this._getColumnsCountBeforeGroups(options.columns);\r\n                    var columnIndex = (options.row.groupIndex || 0) + columnsCountBeforeGroups;\r\n                    return {\r\n                        columnIndex: columnIndex,\r\n                        colspan: options.columns.length - columnIndex - 1\r\n                    }\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    if (\"group\" === options.row.rowType) {\r\n                        this._renderGroupedCells($row, options)\r\n                    } else {\r\n                        if (options.row.values) {\r\n                            this.callBase($row, options)\r\n                        }\r\n                    }\r\n                },\r\n                _renderGroupedCells: function($row, options) {\r\n                    var row = options.row;\r\n                    var expandColumn;\r\n                    var columns = options.columns;\r\n                    var rowIndex = row.rowIndex;\r\n                    var isExpanded;\r\n                    var groupCellOptions = this._getGroupCellOptions(options);\r\n                    for (var i = 0; i <= groupCellOptions.columnIndex; i++) {\r\n                        if (i === groupCellOptions.columnIndex && columns[i].allowCollapsing && \"infinite\" !== options.scrollingMode) {\r\n                            isExpanded = !!row.isExpanded;\r\n                            expandColumn = columns[i]\r\n                        } else {\r\n                            isExpanded = null;\r\n                            expandColumn = {\r\n                                command: \"expand\",\r\n                                cssClass: columns[i].cssClass\r\n                            }\r\n                        }\r\n                        this._renderCell($row, {\r\n                            value: isExpanded,\r\n                            row: row,\r\n                            rowIndex: rowIndex,\r\n                            column: expandColumn,\r\n                            columnIndex: i\r\n                        })\r\n                    }\r\n                    var groupColumnAlignment = (0, _position.getDefaultAlignment)(this.option(\"rtlEnabled\"));\r\n                    var groupColumn = (0, _extend.extend)({}, columns[groupCellOptions.columnIndex], {\r\n                        command: null,\r\n                        cssClass: null,\r\n                        width: null,\r\n                        showWhenGrouped: false,\r\n                        alignment: groupColumnAlignment\r\n                    });\r\n                    if (groupCellOptions.colspan > 1) {\r\n                        groupColumn.colspan = groupCellOptions.colspan\r\n                    }\r\n                    this._renderCell($row, {\r\n                        value: row.values[row.groupIndex],\r\n                        row: row,\r\n                        rowIndex: rowIndex,\r\n                        column: groupColumn,\r\n                        columnIndex: groupCellOptions.columnIndex\r\n                    })\r\n                },\r\n                _renderRows: function($table, options) {\r\n                    var that = this;\r\n                    var scrollingMode = that.option(\"scrolling.mode\");\r\n                    that.callBase($table, (0, _extend.extend)({\r\n                        scrollingMode: scrollingMode\r\n                    }, options));\r\n                    that._checkRowKeys(options.change);\r\n                    that._renderFreeSpaceRow($table);\r\n                    if (!that._hasHeight) {\r\n                        that.updateFreeSpaceRowHeight($table)\r\n                    }\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    var that = this;\r\n                    var row = options.row;\r\n                    var rowTemplate = that.option(\"rowTemplate\");\r\n                    if ((\"data\" === row.rowType || \"group\" === row.rowType) && !(0, _type.isDefined)(row.groupIndex) && rowTemplate) {\r\n                        that.renderTemplate($table, rowTemplate, (0, _extend.extend)({\r\n                            columns: options.columns\r\n                        }, row), true)\r\n                    } else {\r\n                        that.callBase($table, options)\r\n                    }\r\n                },\r\n                _renderTable: function(options) {\r\n                    var that = this;\r\n                    var $table = that.callBase(options);\r\n                    var resizeCompletedHandler = function resizeCompletedHandler() {\r\n                        var scrollableInstance = that.getScrollable();\r\n                        if (scrollableInstance && that.element().closest((0, _window.getWindow)().document).length) {\r\n                            that.resizeCompleted.remove(resizeCompletedHandler);\r\n                            scrollableInstance._visibilityChanged(true)\r\n                        }\r\n                    };\r\n                    if (!(0, _type.isDefined)(that.getTableElement())) {\r\n                        that.setTableElement($table);\r\n                        that._renderScrollable(true);\r\n                        that.resizeCompleted.add(resizeCompletedHandler)\r\n                    } else {\r\n                        that._renderScrollable()\r\n                    }\r\n                    return $table\r\n                },\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    if (this.option(\"rowTemplate\")) {\r\n                        $table.appendTo(this.component.$element())\r\n                    }\r\n                    return $table\r\n                },\r\n                _renderCore: function(change) {\r\n                    var that = this;\r\n                    var $element = that.element();\r\n                    $element.addClass(that.addWidgetPrefix(ROWS_VIEW_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\"));\r\n                    $element.toggleClass(EMPTY_CLASS, 0 === that._dataController.items().length);\r\n                    that.setAria(\"role\", \"presentation\", $element);\r\n                    var $table = that._renderTable({\r\n                        change: change\r\n                    });\r\n                    that._updateContent($table, change);\r\n                    that.callBase(change);\r\n                    that._lastColumnWidths = null\r\n                },\r\n                _getRows: function(change) {\r\n                    return change && change.items || this._dataController.items()\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    var row = options.row;\r\n                    var data = row.data;\r\n                    var summaryCells = row && row.summaryCells;\r\n                    var value = options.value;\r\n                    var displayValue = _uiGrid_core.default.getDisplayValue(column, value, data, row.rowType);\r\n                    var parameters = this.callBase(options);\r\n                    parameters.value = value;\r\n                    parameters.oldValue = options.oldValue;\r\n                    parameters.displayValue = displayValue;\r\n                    parameters.row = row;\r\n                    parameters.key = row.key;\r\n                    parameters.data = data;\r\n                    parameters.rowType = row.rowType;\r\n                    parameters.values = row.values;\r\n                    parameters.text = !column.command ? _uiGrid_core.default.formatValue(displayValue, column) : \"\";\r\n                    parameters.rowIndex = row.rowIndex;\r\n                    parameters.summaryItems = summaryCells && summaryCells[options.columnIndex];\r\n                    parameters.resized = column.resizedCallbacks;\r\n                    if ((0, _type.isDefined)(column.groupIndex) && !column.command) {\r\n                        var groupingTextsOptions = that.option(\"grouping.texts\");\r\n                        var scrollingMode = that.option(\"scrolling.mode\");\r\n                        if (\"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                            parameters.groupContinuesMessage = data && data.isContinuationOnNextPage && groupingTextsOptions && groupingTextsOptions.groupContinuesMessage;\r\n                            parameters.groupContinuedMessage = data && data.isContinuation && groupingTextsOptions && groupingTextsOptions.groupContinuedMessage\r\n                        }\r\n                    }\r\n                    return parameters\r\n                },\r\n                _setRowsOpacityCore: function($rows, visibleColumns, columnIndex, value) {\r\n                    var columnsController = this._columnsController;\r\n                    var columns = columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    (0, _iterator.each)($rows, function(rowIndex, row) {\r\n                        if (!(0, _renderer.default)(row).hasClass(GROUP_ROW_CLASS)) {\r\n                            for (var i = 0; i < visibleColumns.length; i++) {\r\n                                if ((0, _type.isNumeric)(columnID) && columnsController.isParentBandColumn(visibleColumns[i].index, columnID) || visibleColumns[i].index === columnIndex) {\r\n                                    $rows.eq(rowIndex).children().eq(i).css({\r\n                                        opacity: value\r\n                                    });\r\n                                    if (!(0, _type.isNumeric)(columnID)) {\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    })\r\n                },\r\n                _getDevicePixelRatio: function() {\r\n                    return (0, _window.getWindow)().devicePixelRatio\r\n                },\r\n                renderNoDataText: _uiGrid_core.default.renderNoDataText,\r\n                getCellOptions: function(rowIndex, columnIdentifier) {\r\n                    var rowOptions = this._dataController.items()[rowIndex];\r\n                    var cellOptions;\r\n                    var column;\r\n                    if (rowOptions) {\r\n                        if ((0, _type.isString)(columnIdentifier)) {\r\n                            column = this._columnsController.columnOption(columnIdentifier)\r\n                        } else {\r\n                            column = this._columnsController.getVisibleColumns()[columnIdentifier]\r\n                        }\r\n                        if (column) {\r\n                            cellOptions = this._getCellOptions({\r\n                                value: column.calculateCellValue(rowOptions.data),\r\n                                rowIndex: rowOptions.rowIndex,\r\n                                row: rowOptions,\r\n                                column: column\r\n                            })\r\n                        }\r\n                    }\r\n                    return cellOptions\r\n                },\r\n                getRow: function(index) {\r\n                    if (index >= 0) {\r\n                        var rows = this._getRowElements();\r\n                        if (rows.length > index) {\r\n                            return (0, _renderer.default)(rows[index])\r\n                        }\r\n                    }\r\n                },\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var _this3 = this;\r\n                    var dataController = this._dataController;\r\n                    var itemCount = dataController.items(true).length;\r\n                    var contentElement = this._findContentElement();\r\n                    var freeSpaceRowElements = this._getFreeSpaceRowElements($table);\r\n                    if (freeSpaceRowElements && contentElement && dataController.totalCount() >= 0) {\r\n                        var isFreeSpaceRowVisible = false;\r\n                        if (itemCount > 0) {\r\n                            if (!this._hasHeight) {\r\n                                var freeSpaceRowCount = dataController.pageSize() - itemCount;\r\n                                var scrollingMode = this.option(\"scrolling.mode\");\r\n                                if (freeSpaceRowCount > 0 && dataController.pageCount() > 1 && \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode) {\r\n                                    (0, _style.setHeight)(freeSpaceRowElements, freeSpaceRowCount * this._rowHeight);\r\n                                    isFreeSpaceRowVisible = true\r\n                                }\r\n                                if (!isFreeSpaceRowVisible && $table) {\r\n                                    (0, _style.setHeight)(freeSpaceRowElements, 0)\r\n                                } else {\r\n                                    freeSpaceRowElements.toggle(isFreeSpaceRowVisible)\r\n                                }\r\n                                this._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                            } else {\r\n                                freeSpaceRowElements.hide();\r\n                                (0, _common.deferUpdate)(function() {\r\n                                    var scrollbarWidth = _this3.getScrollbarWidth(true);\r\n                                    var elementHeightWithoutScrollbar = _this3.element().height() - scrollbarWidth;\r\n                                    var contentHeight = contentElement.outerHeight();\r\n                                    var showFreeSpaceRow = elementHeightWithoutScrollbar - contentHeight > 0;\r\n                                    var rowsHeight = _this3._getRowsHeight(contentElement.children().first());\r\n                                    var $tableElement = $table || _this3.getTableElements();\r\n                                    var borderTopWidth = Math.ceil(parseFloat($tableElement.css(\"borderTopWidth\")));\r\n                                    var heightCorrection = _this3._getHeightCorrection();\r\n                                    var resultHeight = elementHeightWithoutScrollbar - rowsHeight - borderTopWidth - heightCorrection;\r\n                                    if (showFreeSpaceRow) {\r\n                                        (0, _common.deferRender)(function() {\r\n                                            freeSpaceRowElements.css(\"height\", resultHeight);\r\n                                            isFreeSpaceRowVisible = true;\r\n                                            freeSpaceRowElements.show()\r\n                                        })\r\n                                    }(0, _common.deferRender)(function() {\r\n                                        return _this3._updateLastRowBorder(isFreeSpaceRowVisible)\r\n                                    })\r\n                                })\r\n                            }\r\n                        } else {\r\n                            freeSpaceRowElements.css(\"height\", 0);\r\n                            freeSpaceRowElements.show();\r\n                            this._updateLastRowBorder(true)\r\n                        }\r\n                    }\r\n                },\r\n                _getHeightCorrection: function() {\r\n                    var isZoomedWebkit = _browser.default.webkit && this._getDevicePixelRatio() >= 2;\r\n                    var hasExtraBorderTop = _browser.default.mozilla && _browser.default.version >= 70 && !this.option(\"showRowLines\");\r\n                    return isZoomedWebkit || hasExtraBorderTop ? 1 : 0\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var optionNames = e.optionNames;\r\n                    if (e.changeTypes.grouping) {\r\n                        return\r\n                    }\r\n                    if (optionNames.width || optionNames.visibleWidth) {\r\n                        this.callBase(e);\r\n                        this._fireColumnResizedCallbacks()\r\n                    }\r\n                },\r\n                getScrollable: function() {\r\n                    return this._scrollable\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var dataController = that.getController(\"data\");\r\n                    that.callBase();\r\n                    that._editorFactoryController = that.getController(\"editorFactory\");\r\n                    that._rowHeight = 0;\r\n                    that._scrollTop = 0;\r\n                    that._scrollLeft = -1;\r\n                    that._scrollRight = 0;\r\n                    that._hasHeight = false;\r\n                    dataController.loadingChanged.add(function(isLoading, messageText) {\r\n                        that.setLoading(isLoading, messageText)\r\n                    });\r\n                    dataController.dataSourceChanged.add(function() {\r\n                        if (that._scrollLeft >= 0) {\r\n                            that._handleScroll({\r\n                                component: that.getScrollable(),\r\n                                scrollOffset: {\r\n                                    top: that._scrollTop,\r\n                                    left: that._scrollLeft\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                _handleDataChanged: function(change) {\r\n                    var that = this;\r\n                    switch (change.changeType) {\r\n                        case \"refresh\":\r\n                        case \"prepend\":\r\n                        case \"append\":\r\n                        case \"update\":\r\n                            that.render(null, change);\r\n                            break;\r\n                        default:\r\n                            that._update(change)\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"isScrollbarVisible\", \"getTopVisibleRowData\", \"getScrollbarWidth\", \"getCellElement\", \"getRowElement\", \"getScrollable\"]\r\n                },\r\n                contentWidth: function() {\r\n                    return this.element().width() - this.getScrollbarWidth()\r\n                },\r\n                getScrollbarWidth: function(isHorizontal) {\r\n                    var scrollableContainer = this._scrollableContainer && this._scrollableContainer.get(0);\r\n                    var scrollbarWidth = 0;\r\n                    if (scrollableContainer) {\r\n                        if (!isHorizontal) {\r\n                            scrollbarWidth = scrollableContainer.clientWidth ? scrollableContainer.offsetWidth - scrollableContainer.clientWidth : 0\r\n                        } else {\r\n                            scrollbarWidth = scrollableContainer.clientHeight ? scrollableContainer.offsetHeight - scrollableContainer.clientHeight : 0;\r\n                            scrollbarWidth += getScrollableBottomPadding(this)\r\n                        }\r\n                    }\r\n                    return scrollbarWidth > 0 ? scrollbarWidth : 0\r\n                },\r\n                _fireColumnResizedCallbacks: function() {\r\n                    var that = this;\r\n                    var lastColumnWidths = that._lastColumnWidths || [];\r\n                    var columnWidths = [];\r\n                    var columns = that.getColumns();\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        columnWidths[i] = columns[i].visibleWidth;\r\n                        if (columns[i].resizedCallbacks && !(0, _type.isDefined)(columns[i].groupIndex) && lastColumnWidths[i] !== columnWidths[i]) {\r\n                            columns[i].resizedCallbacks.fire(columnWidths[i])\r\n                        }\r\n                    }\r\n                    that._lastColumnWidths = columnWidths\r\n                },\r\n                _updateLastRowBorder: function(isFreeSpaceRowVisible) {\r\n                    if (this.option(\"showBorders\") && this.option(\"showRowLines\") && !isFreeSpaceRowVisible) {\r\n                        this.element().addClass(LAST_ROW_BORDER)\r\n                    } else {\r\n                        this.element().removeClass(LAST_ROW_BORDER)\r\n                    }\r\n                },\r\n                _updateScrollable: function() {\r\n                    var dxScrollable = _ui.default.getInstance(this.element());\r\n                    if (dxScrollable) {\r\n                        dxScrollable.update();\r\n                        this._updateHorizontalScrollPosition()\r\n                    }\r\n                },\r\n                _updateHorizontalScrollPosition: function() {\r\n                    var scrollable = this.getScrollable();\r\n                    var scrollLeft = scrollable && scrollable.scrollOffset().left;\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        var maxHorizontalScrollOffset = getMaxHorizontalScrollOffset(scrollable);\r\n                        var scrollRight = maxHorizontalScrollOffset - scrollLeft;\r\n                        if (scrollRight !== this._scrollRight) {\r\n                            this._scrollLeft = maxHorizontalScrollOffset - this._scrollRight\r\n                        }\r\n                    }\r\n                    if (this._scrollLeft >= 0 && scrollLeft !== this._scrollLeft) {\r\n                        scrollable.scrollTo({\r\n                            x: this._scrollLeft\r\n                        })\r\n                    }\r\n                },\r\n                _resizeCore: function() {\r\n                    var that = this;\r\n                    that._fireColumnResizedCallbacks();\r\n                    that._updateRowHeight();\r\n                    (0, _common.deferRender)(function() {\r\n                        that._renderScrollable();\r\n                        that.renderNoDataText();\r\n                        that.updateFreeSpaceRowHeight();\r\n                        (0, _common.deferUpdate)(function() {\r\n                            that._updateScrollable()\r\n                        })\r\n                    })\r\n                },\r\n                scrollTo: function(location) {\r\n                    var $element = this.element();\r\n                    var dxScrollable = $element && _ui.default.getInstance($element);\r\n                    if (dxScrollable) {\r\n                        dxScrollable.scrollTo(location)\r\n                    }\r\n                },\r\n                height: function(_height, hasHeight) {\r\n                    var that = this;\r\n                    var $element = this.element();\r\n                    if (0 === arguments.length) {\r\n                        return $element ? $element.outerHeight(true) : 0\r\n                    }\r\n                    that._hasHeight = void 0 === hasHeight ? \"auto\" !== _height : hasHeight;\r\n                    if ((0, _type.isDefined)(_height) && $element) {\r\n                        (0, _style.setHeight)($element, _height)\r\n                    }\r\n                },\r\n                setLoading: function(isLoading, messageText) {\r\n                    var that = this;\r\n                    var loadPanel = that._loadPanel;\r\n                    var dataController = that._dataController;\r\n                    var loadPanelOptions = that.option(\"loadPanel\") || {};\r\n                    var animation = dataController.isLoaded() ? loadPanelOptions.animation : null;\r\n                    var $element = that.element();\r\n                    if (!(0, _window.hasWindow)()) {\r\n                        return\r\n                    }\r\n                    if (!loadPanel && void 0 !== messageText && dataController.isLocalStore() && \"auto\" === loadPanelOptions.enabled && $element) {\r\n                        that._renderLoadPanel($element, $element.parent());\r\n                        loadPanel = that._loadPanel\r\n                    }\r\n                    if (loadPanel) {\r\n                        var visibilityOptions = {\r\n                            message: messageText || loadPanelOptions.text,\r\n                            animation: animation,\r\n                            visible: isLoading\r\n                        };\r\n                        clearTimeout(that._hideLoadingTimeoutID);\r\n                        if (loadPanel.option(\"visible\") && !isLoading) {\r\n                            that._hideLoadingTimeoutID = setTimeout(function() {\r\n                                loadPanel.option(visibilityOptions)\r\n                            }, LOADPANEL_HIDE_TIMEOUT)\r\n                        } else {\r\n                            loadPanel.option(visibilityOptions)\r\n                        }\r\n                    }\r\n                },\r\n                setRowsOpacity: function(columnIndex, value) {\r\n                    var $rows = this._getRowElements().not(\".\" + GROUP_ROW_CLASS) || [];\r\n                    this._setRowsOpacityCore($rows, this.getColumns(), columnIndex, value)\r\n                },\r\n                _getCellElementsCore: function(rowIndex) {\r\n                    var $cells = this.callBase.apply(this, arguments);\r\n                    if ($cells) {\r\n                        var groupCellIndex = $cells.filter(\".\" + GROUP_CELL_CLASS).index();\r\n                        if (groupCellIndex >= 0 && $cells.length > groupCellIndex + 1) {\r\n                            return $cells.slice(0, groupCellIndex + 1)\r\n                        }\r\n                    }\r\n                    return $cells\r\n                },\r\n                getTopVisibleItemIndex: function(isFloor) {\r\n                    var that = this;\r\n                    var itemIndex = 0;\r\n                    var prevOffsetTop = 0;\r\n                    var offsetTop = 0;\r\n                    var scrollPosition = that._scrollTop;\r\n                    var $contentElement = that._findContentElement();\r\n                    var contentElementOffsetTop = $contentElement && $contentElement.offset().top;\r\n                    var items = that._dataController.items();\r\n                    var tableElement = that.getTableElement();\r\n                    if (items.length && tableElement) {\r\n                        var rowElements = that._getRowElements(tableElement).filter(\":visible\");\r\n                        for (itemIndex = 0; itemIndex < items.length; itemIndex++) {\r\n                            prevOffsetTop = offsetTop;\r\n                            var rowElement = rowElements.eq(itemIndex);\r\n                            if (rowElement.length) {\r\n                                offsetTop = rowElement.offset().top - contentElementOffsetTop;\r\n                                if (offsetTop > scrollPosition) {\r\n                                    if (itemIndex) {\r\n                                        if (isFloor || 2 * scrollPosition < Math.round(offsetTop + prevOffsetTop)) {\r\n                                            itemIndex--\r\n                                        }\r\n                                    }\r\n                                    break\r\n                                }\r\n                            }\r\n                        }\r\n                        if (itemIndex && itemIndex === items.length) {\r\n                            itemIndex--\r\n                        }\r\n                    }\r\n                    return itemIndex\r\n                },\r\n                getTopVisibleRowData: function() {\r\n                    var itemIndex = this.getTopVisibleItemIndex();\r\n                    var items = this._dataController.items();\r\n                    if (items[itemIndex]) {\r\n                        return items[itemIndex].data\r\n                    }\r\n                },\r\n                _scrollToElement: function($element, offset) {\r\n                    var scrollable = this.getScrollable();\r\n                    scrollable && scrollable.scrollToElement($element, offset)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    that.callBase(args);\r\n                    switch (args.name) {\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                        case \"showRowLines\":\r\n                        case \"rowAlternationEnabled\":\r\n                        case \"rowTemplate\":\r\n                        case \"twoWayBindingEnabled\":\r\n                            that._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"scrolling\":\r\n                            that._rowHeight = null;\r\n                            that._tableElement = null;\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that._rowHeight = null;\r\n                            that._tableElement = null;\r\n                            break;\r\n                        case \"loadPanel\":\r\n                            that._tableElement = null;\r\n                            that._invalidate(true, \"loadPanel.enabled\" !== args.fullName);\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"noDataText\":\r\n                            that.renderNoDataText();\r\n                            args.handled = true\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    clearTimeout(this._hideLoadingTimeoutID);\r\n                    this._scrollable && this._scrollable.dispose()\r\n                },\r\n                setScrollerSpacing: function() {}\r\n            }\r\n        }())\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}