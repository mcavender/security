{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.FooterView = exports.renderSummaryCell = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\n\nvar _uiData_grid = _interopRequireDefault(require(\"./ui.data_grid.core\"));\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _uiData_grid2 = _interopRequireDefault(require(\"./ui.data_grid.data_source_adapter\"));\n\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.columns_view\");\n\nvar _aggregate_calculator = _interopRequireDefault(require(\"./aggregate_calculator\"));\n\nvar _query = _interopRequireDefault(require(\"../../data/query\"));\n\nvar _store_helper = _interopRequireDefault(require(\"../../data/store_helper\"));\n\nvar _utils = _interopRequireDefault(require(\"../../data/utils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\n\nvar renderSummaryCell = function (cell, options) {\n  var $cell = (0, _renderer.default)(cell);\n  var column = options.column;\n  var summaryItems = options.summaryItems;\n  var $summaryItems = [];\n\n  if (!column.command && summaryItems) {\n    for (var i = 0; i < summaryItems.length; i++) {\n      var summaryItem = summaryItems[i];\n      $summaryItems.push((0, _renderer.default)(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(_uiData_grid.default.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n\n    $cell.append($summaryItems);\n  }\n};\n\nexports.renderSummaryCell = renderSummaryCell;\n\nvar getSummaryCellOptions = function (that, options) {\n  var summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\n\nvar getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\n\nvar recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\n\nvar FooterView = _uiGrid_core.ColumnsView.inherit(function () {\n  return {\n    _getRows: function () {\n      return this._dataController.footerItems();\n    },\n    _getCellOptions: function (options) {\n      return (0, _extend.extend)(this.callBase(options), getSummaryCellOptions(this, options));\n    },\n    _renderCellContent: function ($cell, options) {\n      renderSummaryCell($cell, options);\n      this.callBase($cell, options);\n    },\n    _renderCore: function (change) {\n      var totalItem = this._dataController.footerItems()[0];\n\n      if (!change || !change.columnIndices) {\n        this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      }\n\n      if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n        this._updateContent(this._renderTable({\n          change: change\n        }), change);\n      }\n    },\n    _updateContent: function ($newTable, change) {\n      if (change && \"update\" === change.changeType && change.columnIndices) {\n        var $row = this.getTableElement().find(\".dx-row\");\n        var $newRow = $newTable.find(\".dx-row\");\n\n        this._updateCells($row, $newRow, change.columnIndices[0]);\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    _rowClick: function (e) {\n      var item = this._dataController.footerItems()[e.rowIndex] || {};\n      this.executeAction(\"onRowClick\", (0, _extend.extend)({}, e, item));\n    },\n    _columnOptionChanged: function (e) {\n      var optionNames = e.optionNames;\n\n      if (e.changeTypes.grouping) {\n        return;\n      }\n\n      if (optionNames.width || optionNames.visibleWidth) {\n        this.callBase(e);\n      }\n    },\n    _handleDataChanged: function (e) {\n      var changeType = e.changeType;\n\n      if (\"update\" === e.changeType && e.repaintChangesOnly) {\n        if (!e.totalColumnIndices) {\n          this.render();\n        } else {\n          if (e.totalColumnIndices.length) {\n            this.render(null, {\n              changeType: \"update\",\n              columnIndices: [e.totalColumnIndices]\n            });\n          }\n        }\n      } else {\n        if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n          this.render();\n        }\n      }\n    },\n    getHeight: function () {\n      return this.getElementHeight();\n    },\n    isVisible: function () {\n      return !!this._dataController.footerItems().length;\n    }\n  };\n}());\n\nexports.FooterView = FooterView;\n\nvar SummaryDataSourceAdapterExtender = function () {\n  function forEachGroup(groups, groupCount, callback, path) {\n    path = path || [];\n\n    for (var i = 0; i < groups.length; i++) {\n      path.push(groups[i].key);\n\n      if (1 === groupCount) {\n        callback(path, groups[i].items);\n      } else {\n        forEachGroup(groups[i].items, groupCount - 1, callback, path);\n      }\n\n      path.pop();\n    }\n  }\n\n  return {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._totalAggregates = [];\n      this._summaryGetter = _common.noop;\n    },\n    summaryGetter: function (_summaryGetter) {\n      if (!arguments.length) {\n        return this._summaryGetter;\n      }\n\n      if ((0, _type.isFunction)(_summaryGetter)) {\n        this._summaryGetter = _summaryGetter;\n      }\n    },\n    summary: function (_summary) {\n      if (!arguments.length) {\n        return this._summaryGetter();\n      }\n\n      this._summaryGetter = function () {\n        return _summary;\n      };\n    },\n    totalAggregates: function () {\n      return this._totalAggregates;\n    },\n    isLastLevelGroupItemsPagingLocal: function () {\n      var summary = this.summary();\n      var sortByGroupsInfo = summary && summary.sortByGroups();\n      return sortByGroupsInfo && sortByGroupsInfo.length;\n    },\n    sortLastLevelGroupItems: function (items, groups, paths) {\n      var groupedItems = _store_helper.default.multiLevelGroup((0, _query.default)(items), groups).toArray();\n\n      var result = [];\n      paths.forEach(function (path) {\n        forEachGroup(groupedItems, groups.length, function (itemsPath, items) {\n          if (path.toString() === itemsPath.toString()) {\n            result = result.concat(items);\n          }\n        });\n      });\n      return result;\n    }\n  };\n}();\n\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var applyAddedData = function applyAddedData(data, insertedData, groupLevel) {\n    if (groupLevel) {\n      return applyAddedData(data, insertedData.map(function (item) {\n        return {\n          items: [item]\n        };\n      }, groupLevel - 1));\n    }\n\n    return data.concat(insertedData);\n  };\n\n  var applyRemovedData = function applyRemovedData(data, removedData, groupLevel) {\n    if (groupLevel) {\n      return data.map(function (data) {\n        var updatedData = {};\n        var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n        Object.defineProperty(updatedData, \"aggregates\", {\n          get: function () {\n            return data.aggregates;\n          },\n          set: function (value) {\n            data.aggregates = value;\n          }\n        });\n        return (0, _extend.extend)(updatedData, data, {\n          items: updatedItems\n        });\n      });\n    }\n\n    return data.filter(function (data) {\n      return removedData.indexOf(data) < 0;\n    });\n  };\n\n  var calculateAggregates = function (that, summary, data, groupLevel) {\n    var calculator;\n\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n\n        if (insertedData.length) {\n          data = applyAddedData(data, insertedData, groupLevel);\n        }\n\n        var removedData = editingController.getRemovedData();\n\n        if (removedData.length) {\n          data = applyRemovedData(data, removedData, groupLevel);\n        }\n      }\n    }\n\n    if (summary) {\n      calculator = new _aggregate_calculator.default({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n\n    return calculator ? calculator.totalAggregates() : [];\n  };\n\n  var sortGroupsBySummaryCore = function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n    if (!items || !groups.length) {\n      return items;\n    }\n\n    var group = groups[0];\n    var sorts = sortByGroups[0];\n    var query;\n\n    if (group && sorts && sorts.length) {\n      query = (0, _query.default)(items);\n      (0, _iterator.each)(sorts, function (index) {\n        if (0 === index) {\n          query = query.sortBy(this.selector, this.desc);\n        } else {\n          query = query.thenBy(this.selector, this.desc);\n        }\n      });\n      query.enumerate().done(function (sortedItems) {\n        items = sortedItems;\n      });\n    }\n\n    groups = groups.slice(1);\n    sortByGroups = sortByGroups.slice(1);\n\n    if (groups.length && sortByGroups.length) {\n      (0, _iterator.each)(items, function () {\n        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n      });\n    }\n\n    return items;\n  };\n\n  var sortGroupsBySummary = function (data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n\n    if (sortByGroups && sortByGroups.length) {\n      return sortGroupsBySummaryCore(data, group, sortByGroups);\n    }\n\n    return data;\n  };\n\n  return {\n    _customizeRemoteOperations: function (options) {\n      var summary = this.summary();\n\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else {\n                if (summary.groupAggregates.length) {\n                  options.remoteOperations.paging = false;\n                }\n              }\n            }\n\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else {\n          if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n            options.remoteOperations.paging = false;\n          }\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedPagesData.extra;\n\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function (options) {\n      var that = this;\n\n      var groups = _utils.default.normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n\n      var remoteOperations = options.remoteOperations || {};\n      var summary = that.summaryGetter()(remoteOperations);\n      var totalAggregates;\n\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(that, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else {\n          if (!remoteOperations.paging) {\n            totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n            options.extra = (0, _type.isPlainObject)(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n          }\n        }\n      }\n\n      if (!options.isCustomLoading) {\n        that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates;\n      }\n\n      that.callBase(options);\n    }\n  };\n}();\n\n_uiData_grid2.default.extend(SummaryDataSourceAdapterExtender);\n\n_uiData_grid2.default.extend(SummaryDataSourceAdapterClientExtender);\n\n_uiData_grid.default.registerModule(\"summary\", {\n  defaultOptions: function () {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: _message.default.getFormatter(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: _message.default.getFormatter(\"dxDataGrid-summarySumOtherColumn\"),\n          min: _message.default.getFormatter(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: _message.default.getFormatter(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: _message.default.getFormatter(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: _message.default.getFormatter(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: function () {\n        return {\n          _isDataColumn: function (column) {\n            return column && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped);\n          },\n          _isGroupFooterVisible: function () {\n            var groupItems = this.option(\"summary.groupItems\") || [];\n\n            for (var i = 0; i < groupItems.length; i++) {\n              var groupItem = groupItems[i];\n\n              var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n\n              if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          _processGroupItems: function (items, groupCount, options) {\n            var data = options && options.data;\n            var result = this.callBase.apply(this, arguments);\n\n            if (options) {\n              if (void 0 === options.isGroupFooterVisible) {\n                options.isGroupFooterVisible = this._isGroupFooterVisible();\n              }\n\n              if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n                result.push({\n                  rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                  key: options.path.slice(),\n                  data: data,\n                  groupIndex: options.path.length - 1,\n                  values: []\n                });\n              }\n            }\n\n            return result;\n          },\n          _processGroupItem: function (groupItem, options) {\n            var that = this;\n\n            if (!options.summaryGroupItems) {\n              options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n            }\n\n            if (\"group\" === groupItem.rowType) {\n              var groupColumnIndex = -1;\n              var afterGroupColumnIndex = -1;\n              (0, _iterator.each)(options.visibleColumns, function (visibleIndex) {\n                var prevColumn = options.visibleColumns[visibleIndex - 1];\n\n                if (groupItem.groupIndex === this.groupIndex) {\n                  groupColumnIndex = this.index;\n                }\n\n                if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                  afterGroupColumnIndex = this.index;\n                }\n              });\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                if (summaryItem.showInGroupFooter) {\n                  return -1;\n                }\n\n                if (summaryItem.alignByColumn && column && !(0, _type.isDefined)(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                  return column.index;\n                } else {\n                  return groupColumnIndex;\n                }\n              });\n            }\n\n            if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n              groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n                return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n              });\n            }\n\n            return groupItem;\n          },\n          _calculateSummaryCells: function (summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex) {\n            var that = this;\n            var summaryCells = [];\n            var summaryCellsByColumns = {};\n            (0, _iterator.each)(summaryItems, function (summaryIndex, summaryItem) {\n              var column = that._columnsController.columnOption(summaryItem.column);\n\n              var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n              var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n\n              if (columnIndex >= 0) {\n                if (!summaryCellsByColumns[columnIndex]) {\n                  summaryCellsByColumns[columnIndex] = [];\n                }\n\n                var aggregate = aggregates[summaryIndex];\n\n                if (aggregate === aggregate) {\n                  var valueFormat;\n\n                  if ((0, _type.isDefined)(summaryItem.valueFormat)) {\n                    valueFormat = summaryItem.valueFormat;\n                  } else {\n                    if (\"count\" !== summaryItem.summaryType) {\n                      valueFormat = _uiData_grid.default.getFormatByDataType(column && column.dataType);\n                    }\n                  }\n\n                  summaryCellsByColumns[columnIndex].push((0, _extend.extend)({}, summaryItem, {\n                    value: (0, _type.isString)(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                    valueFormat: valueFormat,\n                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                  }));\n                }\n              }\n            });\n\n            if (!(0, _type.isEmptyObject)(summaryCellsByColumns)) {\n              (0, _iterator.each)(visibleColumns, function () {\n                summaryCells.push(summaryCellsByColumns[this.index] || []);\n              });\n            }\n\n            return summaryCells;\n          },\n          _getSummaryCells: function (summaryTotalItems, totalAggregates) {\n            var that = this;\n            var columnsController = that._columnsController;\n            return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n              return that._isDataColumn(column) ? column.index : -1;\n            });\n          },\n          _updateItemsCore: function (change) {\n            var that = this;\n            var summaryCells;\n            var dataSource = that._dataSource;\n            var footerItems = that._footerItems;\n            var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n            var summaryTotalItems = that.option(\"summary.totalItems\");\n            that._footerItems = [];\n\n            if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n              var totalAggregates = dataSource.totalAggregates();\n              summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n\n              if (change && change.repaintChangesOnly && oldSummaryCells) {\n                change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                  if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                    return index;\n                  }\n\n                  return -1;\n                }).filter(function (index) {\n                  return index >= 0;\n                });\n              }\n\n              if (summaryCells.length) {\n                that._footerItems.push({\n                  rowType: \"totalFooter\",\n                  summaryCells: summaryCells\n                });\n              }\n            }\n\n            that.callBase(change);\n          },\n          _prepareUnsavedDataSelector: function (selector) {\n            var that = this;\n\n            if (recalculateWhileEditing(that)) {\n              var editingController = that.getController(\"editing\");\n\n              if (editingController) {\n                return function (data) {\n                  data = editingController.getUpdatedData(data);\n                  return selector(data);\n                };\n              }\n            }\n\n            return selector;\n          },\n          _prepareAggregateSelector: function (selector, aggregator) {\n            selector = this._prepareUnsavedDataSelector(selector);\n\n            if (\"avg\" === aggregator || \"sum\" === aggregator) {\n              return function (data) {\n                var value = selector(data);\n                return (0, _type.isDefined)(value) ? Number(value) : value;\n              };\n            }\n\n            return selector;\n          },\n          _getAggregates: function (summaryItems, remoteOperations) {\n            var that = this;\n            var columnsController = that.getController(\"columns\");\n            var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n            var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n            return (0, _iterator.map)(summaryItems || [], function (summaryItem) {\n              var column = columnsController.columnOption(summaryItem.column);\n              var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : (0, _data.compileGetter)(column ? column.dataField : summaryItem.column);\n              var aggregator = summaryItem.summaryType || \"count\";\n              var selector = summaryItem.column;\n              var skipEmptyValues = (0, _type.isDefined)(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n\n              if (remoteOperations) {\n                return {\n                  selector: summaryItem.column,\n                  summaryType: aggregator\n                };\n              } else {\n                selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n\n                if (\"custom\" === aggregator) {\n                  if (!calculateCustomSummary) {\n                    _ui.default.log(\"E1026\");\n\n                    calculateCustomSummary = function () {};\n                  }\n\n                  var options = {\n                    component: that.component,\n                    name: summaryItem.name\n                  };\n                  calculateCustomSummary(options);\n                  options.summaryProcess = \"calculate\";\n                  aggregator = {\n                    seed: function (groupIndex) {\n                      options.summaryProcess = \"start\";\n                      options.totalValue = void 0;\n                      options.groupIndex = groupIndex;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    step: function (totalValue, value) {\n                      options.summaryProcess = \"calculate\";\n                      options.totalValue = totalValue;\n                      options.value = value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    },\n                    finalize: function (totalValue) {\n                      options.summaryProcess = \"finalize\";\n                      options.totalValue = totalValue;\n                      delete options.value;\n                      calculateCustomSummary(options);\n                      return options.totalValue;\n                    }\n                  };\n                }\n\n                return {\n                  selector: selector,\n                  aggregator: aggregator,\n                  skipEmptyValues: skipEmptyValues\n                };\n              }\n            });\n          },\n          _addSortInfo: function (sortByGroups, groupColumn, selector, sortOrder) {\n            if (groupColumn) {\n              var groupIndex = groupColumn.groupIndex;\n              sortOrder = sortOrder || groupColumn.sortOrder;\n\n              if ((0, _type.isDefined)(groupIndex)) {\n                sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n                sortByGroups[groupIndex].push({\n                  selector: selector,\n                  desc: \"desc\" === sortOrder\n                });\n              }\n            }\n          },\n          _findSummaryItem: function (summaryItems, name) {\n            var summaryItemIndex = -1;\n\n            var getFullName = function (summaryItem) {\n              var summaryType = summaryItem.summaryType;\n              var column = summaryItem.column;\n              return summaryType && column && summaryType + \"_\" + column;\n            };\n\n            if ((0, _type.isDefined)(name)) {\n              (0, _iterator.each)(summaryItems || [], function (index) {\n                if (this.name === name || index === name || this.summaryType === name || this.column === name || getFullName(this) === name) {\n                  summaryItemIndex = index;\n                  return false;\n                }\n              });\n            }\n\n            return summaryItemIndex;\n          },\n          _getSummarySortByGroups: function (sortByGroupSummaryInfo, groupSummaryItems) {\n            var that = this;\n            var columnsController = that._columnsController;\n            var groupColumns = columnsController.getGroupColumns();\n            var sortByGroups = [];\n\n            if (!groupSummaryItems || !groupSummaryItems.length) {\n              return;\n            }\n\n            (0, _iterator.each)(sortByGroupSummaryInfo || [], function () {\n              var sortOrder = this.sortOrder;\n              var groupColumn = this.groupColumn;\n\n              var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n\n              if (summaryItemIndex < 0) {\n                return;\n              }\n\n              var selector = function (data) {\n                return getGroupAggregates(data)[summaryItemIndex];\n              };\n\n              if ((0, _type.isDefined)(groupColumn)) {\n                groupColumn = columnsController.columnOption(groupColumn);\n\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              } else {\n                (0, _iterator.each)(groupColumns, function (groupIndex, groupColumn) {\n                  that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n                });\n              }\n            });\n            return sortByGroups;\n          },\n          _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n            var that = this;\n            var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n            dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n              return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n            });\n            return dataSourceAdapter;\n          },\n          _getSummaryOptions: function (remoteOperations) {\n            var that = this;\n            var groupSummaryItems = that.option(\"summary.groupItems\");\n            var totalSummaryItems = that.option(\"summary.totalItems\");\n            var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n\n            var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n\n            var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n\n            var sortByGroups = function () {\n              return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n            };\n\n            if (groupAggregates.length || totalAggregates.length) {\n              return {\n                groupAggregates: groupAggregates,\n                totalAggregates: totalAggregates,\n                sortByGroups: sortByGroups\n              };\n            }\n          },\n          publicMethods: function () {\n            var methods = this.callBase();\n            methods.push(\"getTotalSummaryValue\");\n            return methods;\n          },\n          getTotalSummaryValue: function (summaryItemName) {\n            var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n\n            var aggregates = this._dataSource.totalAggregates();\n\n            if (aggregates.length && summaryItemIndex > -1) {\n              return aggregates[summaryItemIndex];\n            }\n          },\n          optionChanged: function (args) {\n            if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n              args.name = \"dataSource\";\n            }\n\n            this.callBase(args);\n          },\n          init: function () {\n            this._footerItems = [];\n            this.callBase();\n          },\n          footerItems: function () {\n            return this._footerItems;\n          }\n        };\n      }(),\n      editing: function () {\n        return {\n          _refreshSummary: function () {\n            if (recalculateWhileEditing(this) && !this.isSaving()) {\n              this._dataController.refresh({\n                load: true,\n                changesOnly: true\n              });\n            }\n          },\n          _addChange: function (params) {\n            var result = this.callBase.apply(this, arguments);\n\n            if (params.type) {\n              this._refreshSummary();\n            }\n\n            return result;\n          },\n          _removeChange: function () {\n            var result = this.callBase.apply(this, arguments);\n\n            this._refreshSummary();\n\n            return result;\n          },\n          cancelEditData: function () {\n            var result = this.callBase.apply(this, arguments);\n\n            this._refreshSummary();\n\n            return result;\n          }\n        };\n      }()\n    },\n    views: {\n      rowsView: function () {\n        return {\n          _createRow: function (row) {\n            var $row = this.callBase(row);\n            row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n            return $row;\n          },\n          _renderCells: function ($row, options) {\n            this.callBase.apply(this, arguments);\n\n            if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n              this._renderGroupSummaryCells($row, options);\n            }\n          },\n          _hasAlignByColumnSummaryItems: function (columnIndex, options) {\n            return !(0, _type.isDefined)(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n          },\n          _getAlignByColumnCellCount: function (groupCellColSpan, options) {\n            var alignByColumnCellCount = 0;\n\n            for (var i = 1; i < groupCellColSpan; i++) {\n              var columnIndex = options.row.summaryCells.length - i;\n              alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n            }\n\n            return alignByColumnCellCount;\n          },\n          _renderGroupSummaryCells: function ($row, options) {\n            var $groupCell = $row.children().last();\n            var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n\n            var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n\n            this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n          },\n          _renderGroupSummaryCellsCore: function ($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n            if (alignByColumnCellCount > 0) {\n              $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n\n              for (var i = 0; i < alignByColumnCellCount; i++) {\n                var columnIndex = options.columns.length - alignByColumnCellCount + i;\n\n                this._renderCell($groupCell.parent(), (0, _extend.extend)({\n                  column: options.columns[columnIndex],\n                  columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n                }, options));\n              }\n            }\n          },\n          _getSummaryCellIndex: function (columnIndex) {\n            return columnIndex;\n          },\n          _getCellTemplate: function (options) {\n            if (!options.column.command && !(0, _type.isDefined)(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n              return renderSummaryCell;\n            } else {\n              return this.callBase(options);\n            }\n          },\n          _getCellOptions: function (options) {\n            var that = this;\n            var parameters = that.callBase(options);\n\n            if (options.row.summaryCells) {\n              return (0, _extend.extend)(parameters, getSummaryCellOptions(that, options));\n            } else {\n              return parameters;\n            }\n          }\n        };\n      }()\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/data_grid/ui.data_grid.summary.js"],"names":["exports","FooterView","renderSummaryCell","_renderer","_interopRequireDefault","require","_common","_type","_iterator","_extend","_data","_ui","_uiData_grid","_message","_uiData_grid2","_uiGrid_core","_aggregate_calculator","_query","_store_helper","_utils","obj","__esModule","DATAGRID_TOTAL_FOOTER_CLASS","DATAGRID_SUMMARY_ITEM_CLASS","DATAGRID_TEXT_CONTENT_CLASS","DATAGRID_GROUP_FOOTER_CLASS","DATAGRID_GROUP_TEXT_CONTENT_CLASS","DATAGRID_NOWRAP_CLASS","DATAGRID_GROUP_FOOTER_ROW_TYPE","cell","options","$cell","default","column","summaryItems","$summaryItems","command","i","length","summaryItem","push","css","alignment","addClass","cssClass","toggleClass","rowType","text","getSummaryText","summaryTexts","append","getSummaryCellOptions","that","option","totalItem","row","summaryCells","columnIndex","getGroupAggregates","data","summary","aggregates","recalculateWhileEditing","ColumnsView","inherit","_getRows","_dataController","footerItems","_getCellOptions","extend","callBase","_renderCellContent","_renderCore","change","columnIndices","element","empty","_updateContent","_renderTable","$newTable","changeType","$row","getTableElement","find","$newRow","_updateCells","apply","arguments","_rowClick","e","item","rowIndex","executeAction","_columnOptionChanged","optionNames","changeTypes","grouping","width","visibleWidth","_handleDataChanged","repaintChangesOnly","totalColumnIndices","render","getHeight","getElementHeight","isVisible","SummaryDataSourceAdapterExtender","forEachGroup","groups","groupCount","callback","path","key","items","pop","init","_totalAggregates","_summaryGetter","noop","summaryGetter","isFunction","_summary","totalAggregates","isLastLevelGroupItemsPagingLocal","sortByGroupsInfo","sortByGroups","sortLastLevelGroupItems","paths","groupedItems","multiLevelGroup","toArray","result","forEach","itemsPath","toString","concat","SummaryDataSourceAdapterClientExtender","applyAddedData","insertedData","groupLevel","map","applyRemovedData","removedData","updatedData","updatedItems","Object","defineProperty","get","set","value","filter","indexOf","calculateAggregates","calculator","editingController","getController","getInsertedData","getRemovedData","groupAggregates","calculate","sortGroupsBySummaryCore","group","sorts","query","each","index","sortBy","selector","desc","thenBy","enumerate","done","sortedItems","slice","sortGroupsBySummary","_customizeRemoteOperations","remoteOperations","isCustomLoading","storeLoadOptions","isLoadingAll","groupSummary","paging","totalSummary","cachedExtra","cachedPagesData","extra","_handleDataLoadedCore","normalizeSortingInfo","loadOptions","isPlainObject","registerModule","defaultOptions","groupItems","totalItems","calculateCustomSummary","skipEmptyValues","texts","sum","getFormatter","sumOtherColumn","min","minOtherColumn","max","maxOtherColumn","avg","avgOtherColumn","count","sortByGroupSummaryInfo","views","footerView","extenders","controllers","_isDataColumn","isDefined","groupIndex","showWhenGrouped","_isGroupFooterVisible","groupItem","_columnsController","columnOption","showInColumn","showInGroupFooter","_processGroupItems","isGroupFooterVisible","collectContinuationItems","isContinuationOnNextPage","values","_processGroupItem","summaryGroupItems","groupColumnIndex","afterGroupColumnIndex","visibleColumns","visibleIndex","prevColumn","_calculateSummaryCells","alignByColumn","calculateTargetColumnIndex","summaryCellsByColumns","summaryIndex","aggregate","valueFormat","summaryType","getFormatByDataType","dataType","isString","deserializeValue","columnCaption","caption","isEmptyObject","_getSummaryCells","summaryTotalItems","columnsController","getVisibleColumns","_updateItemsCore","dataSource","_dataSource","_footerItems","oldSummaryCells","summaryCell","JSON","stringify","_prepareUnsavedDataSelector","getUpdatedData","_prepareAggregateSelector","aggregator","Number","_getAggregates","commonSkipEmptyValues","calculateCellValue","bind","compileGetter","dataField","log","component","name","summaryProcess","seed","totalValue","step","finalize","_addSortInfo","groupColumn","sortOrder","_findSummaryItem","summaryItemIndex","getFullName","_getSummarySortByGroups","groupSummaryItems","groupColumns","getGroupColumns","_createDataSourceAdapterCore","dataSourceAdapter","currentRemoteOperations","_getSummaryOptions","totalSummaryItems","publicMethods","methods","getTotalSummaryValue","summaryItemName","optionChanged","args","editing","_refreshSummary","isSaving","refresh","load","changesOnly","_addChange","params","type","_removeChange","cancelEditData","rowsView","_createRow","_renderCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","columns","_getAlignByColumnCellCount","groupCellColSpan","alignByColumnCellCount","$groupCell","children","last","attr","_renderGroupSummaryCellsCore","_renderCell","parent","_getSummaryCellIndex","_getCellTemplate","parameters"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.FooterView = exports.renderSummaryCell = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\r\nvar _uiData_grid = _interopRequireDefault(require(\"./ui.data_grid.core\"));\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _uiData_grid2 = _interopRequireDefault(require(\"./ui.data_grid.data_source_adapter\"));\r\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.columns_view\");\r\nvar _aggregate_calculator = _interopRequireDefault(require(\"./aggregate_calculator\"));\r\nvar _query = _interopRequireDefault(require(\"../../data/query\"));\r\nvar _store_helper = _interopRequireDefault(require(\"../../data/store_helper\"));\r\nvar _utils = _interopRequireDefault(require(\"../../data/utils\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\r\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\r\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\r\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\r\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\r\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\r\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\r\nvar renderSummaryCell = function(cell, options) {\r\n    var $cell = (0, _renderer.default)(cell);\r\n    var column = options.column;\r\n    var summaryItems = options.summaryItems;\r\n    var $summaryItems = [];\r\n    if (!column.command && summaryItems) {\r\n        for (var i = 0; i < summaryItems.length; i++) {\r\n            var summaryItem = summaryItems[i];\r\n            $summaryItems.push((0, _renderer.default)(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(_uiData_grid.default.getSummaryText(summaryItem, options.summaryTexts)))\r\n        }\r\n        $cell.append($summaryItems)\r\n    }\r\n};\r\nexports.renderSummaryCell = renderSummaryCell;\r\nvar getSummaryCellOptions = function(that, options) {\r\n    var summaryTexts = that.option(\"summary.texts\") || {};\r\n    return {\r\n        totalItem: options.row,\r\n        summaryItems: options.row.summaryCells[options.columnIndex],\r\n        summaryTexts: summaryTexts\r\n    }\r\n};\r\nvar getGroupAggregates = function(data) {\r\n    return data.summary || data.aggregates || []\r\n};\r\nvar recalculateWhileEditing = function(that) {\r\n    return that.option(\"summary.recalculateWhileEditing\")\r\n};\r\nvar FooterView = _uiGrid_core.ColumnsView.inherit(function() {\r\n    return {\r\n        _getRows: function() {\r\n            return this._dataController.footerItems()\r\n        },\r\n        _getCellOptions: function(options) {\r\n            return (0, _extend.extend)(this.callBase(options), getSummaryCellOptions(this, options))\r\n        },\r\n        _renderCellContent: function($cell, options) {\r\n            renderSummaryCell($cell, options);\r\n            this.callBase($cell, options)\r\n        },\r\n        _renderCore: function(change) {\r\n            var totalItem = this._dataController.footerItems()[0];\r\n            if (!change || !change.columnIndices) {\r\n                this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"))\r\n            }\r\n            if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\r\n                this._updateContent(this._renderTable({\r\n                    change: change\r\n                }), change)\r\n            }\r\n        },\r\n        _updateContent: function($newTable, change) {\r\n            if (change && \"update\" === change.changeType && change.columnIndices) {\r\n                var $row = this.getTableElement().find(\".dx-row\");\r\n                var $newRow = $newTable.find(\".dx-row\");\r\n                this._updateCells($row, $newRow, change.columnIndices[0])\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        _rowClick: function(e) {\r\n            var item = this._dataController.footerItems()[e.rowIndex] || {};\r\n            this.executeAction(\"onRowClick\", (0, _extend.extend)({}, e, item))\r\n        },\r\n        _columnOptionChanged: function(e) {\r\n            var optionNames = e.optionNames;\r\n            if (e.changeTypes.grouping) {\r\n                return\r\n            }\r\n            if (optionNames.width || optionNames.visibleWidth) {\r\n                this.callBase(e)\r\n            }\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            var changeType = e.changeType;\r\n            if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n                if (!e.totalColumnIndices) {\r\n                    this.render()\r\n                } else {\r\n                    if (e.totalColumnIndices.length) {\r\n                        this.render(null, {\r\n                            changeType: \"update\",\r\n                            columnIndices: [e.totalColumnIndices]\r\n                        })\r\n                    }\r\n                }\r\n            } else {\r\n                if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\r\n                    this.render()\r\n                }\r\n            }\r\n        },\r\n        getHeight: function() {\r\n            return this.getElementHeight()\r\n        },\r\n        isVisible: function() {\r\n            return !!this._dataController.footerItems().length\r\n        }\r\n    }\r\n}());\r\nexports.FooterView = FooterView;\r\nvar SummaryDataSourceAdapterExtender = function() {\r\n    function forEachGroup(groups, groupCount, callback, path) {\r\n        path = path || [];\r\n        for (var i = 0; i < groups.length; i++) {\r\n            path.push(groups[i].key);\r\n            if (1 === groupCount) {\r\n                callback(path, groups[i].items)\r\n            } else {\r\n                forEachGroup(groups[i].items, groupCount - 1, callback, path)\r\n            }\r\n            path.pop()\r\n        }\r\n    }\r\n    return {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._totalAggregates = [];\r\n            this._summaryGetter = _common.noop\r\n        },\r\n        summaryGetter: function(_summaryGetter) {\r\n            if (!arguments.length) {\r\n                return this._summaryGetter\r\n            }\r\n            if ((0, _type.isFunction)(_summaryGetter)) {\r\n                this._summaryGetter = _summaryGetter\r\n            }\r\n        },\r\n        summary: function(_summary) {\r\n            if (!arguments.length) {\r\n                return this._summaryGetter()\r\n            }\r\n            this._summaryGetter = function() {\r\n                return _summary\r\n            }\r\n        },\r\n        totalAggregates: function() {\r\n            return this._totalAggregates\r\n        },\r\n        isLastLevelGroupItemsPagingLocal: function() {\r\n            var summary = this.summary();\r\n            var sortByGroupsInfo = summary && summary.sortByGroups();\r\n            return sortByGroupsInfo && sortByGroupsInfo.length\r\n        },\r\n        sortLastLevelGroupItems: function(items, groups, paths) {\r\n            var groupedItems = _store_helper.default.multiLevelGroup((0, _query.default)(items), groups).toArray();\r\n            var result = [];\r\n            paths.forEach(function(path) {\r\n                forEachGroup(groupedItems, groups.length, function(itemsPath, items) {\r\n                    if (path.toString() === itemsPath.toString()) {\r\n                        result = result.concat(items)\r\n                    }\r\n                })\r\n            });\r\n            return result\r\n        }\r\n    }\r\n}();\r\nvar SummaryDataSourceAdapterClientExtender = function() {\r\n    var applyAddedData = function applyAddedData(data, insertedData, groupLevel) {\r\n        if (groupLevel) {\r\n            return applyAddedData(data, insertedData.map(function(item) {\r\n                return {\r\n                    items: [item]\r\n                }\r\n            }, groupLevel - 1))\r\n        }\r\n        return data.concat(insertedData)\r\n    };\r\n    var applyRemovedData = function applyRemovedData(data, removedData, groupLevel) {\r\n        if (groupLevel) {\r\n            return data.map(function(data) {\r\n                var updatedData = {};\r\n                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\r\n                Object.defineProperty(updatedData, \"aggregates\", {\r\n                    get: function() {\r\n                        return data.aggregates\r\n                    },\r\n                    set: function(value) {\r\n                        data.aggregates = value\r\n                    }\r\n                });\r\n                return (0, _extend.extend)(updatedData, data, {\r\n                    items: updatedItems\r\n                })\r\n            })\r\n        }\r\n        return data.filter(function(data) {\r\n            return removedData.indexOf(data) < 0\r\n        })\r\n    };\r\n    var calculateAggregates = function(that, summary, data, groupLevel) {\r\n        var calculator;\r\n        if (recalculateWhileEditing(that)) {\r\n            var editingController = that.getController(\"editing\");\r\n            if (editingController) {\r\n                var insertedData = editingController.getInsertedData();\r\n                if (insertedData.length) {\r\n                    data = applyAddedData(data, insertedData, groupLevel)\r\n                }\r\n                var removedData = editingController.getRemovedData();\r\n                if (removedData.length) {\r\n                    data = applyRemovedData(data, removedData, groupLevel)\r\n                }\r\n            }\r\n        }\r\n        if (summary) {\r\n            calculator = new _aggregate_calculator.default({\r\n                totalAggregates: summary.totalAggregates,\r\n                groupAggregates: summary.groupAggregates,\r\n                data: data,\r\n                groupLevel: groupLevel\r\n            });\r\n            calculator.calculate()\r\n        }\r\n        return calculator ? calculator.totalAggregates() : []\r\n    };\r\n    var sortGroupsBySummaryCore = function sortGroupsBySummaryCore(items, groups, sortByGroups) {\r\n        if (!items || !groups.length) {\r\n            return items\r\n        }\r\n        var group = groups[0];\r\n        var sorts = sortByGroups[0];\r\n        var query;\r\n        if (group && sorts && sorts.length) {\r\n            query = (0, _query.default)(items);\r\n            (0, _iterator.each)(sorts, function(index) {\r\n                if (0 === index) {\r\n                    query = query.sortBy(this.selector, this.desc)\r\n                } else {\r\n                    query = query.thenBy(this.selector, this.desc)\r\n                }\r\n            });\r\n            query.enumerate().done(function(sortedItems) {\r\n                items = sortedItems\r\n            })\r\n        }\r\n        groups = groups.slice(1);\r\n        sortByGroups = sortByGroups.slice(1);\r\n        if (groups.length && sortByGroups.length) {\r\n            (0, _iterator.each)(items, function() {\r\n                this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)\r\n            })\r\n        }\r\n        return items\r\n    };\r\n    var sortGroupsBySummary = function(data, group, summary) {\r\n        var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\r\n        if (sortByGroups && sortByGroups.length) {\r\n            return sortGroupsBySummaryCore(data, group, sortByGroups)\r\n        }\r\n        return data\r\n    };\r\n    return {\r\n        _customizeRemoteOperations: function(options) {\r\n            var summary = this.summary();\r\n            if (summary) {\r\n                if (options.remoteOperations.summary) {\r\n                    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                        if (options.storeLoadOptions.group) {\r\n                            if (options.remoteOperations.grouping) {\r\n                                options.storeLoadOptions.groupSummary = summary.groupAggregates\r\n                            } else {\r\n                                if (summary.groupAggregates.length) {\r\n                                    options.remoteOperations.paging = false\r\n                                }\r\n                            }\r\n                        }\r\n                        options.storeLoadOptions.totalSummary = summary.totalAggregates\r\n                    }\r\n                } else {\r\n                    if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\r\n                        options.remoteOperations.paging = false\r\n                    }\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments);\r\n            var cachedExtra = options.cachedPagesData.extra;\r\n            if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\r\n                options.storeLoadOptions.totalSummary = void 0\r\n            }\r\n        },\r\n        _handleDataLoadedCore: function(options) {\r\n            var that = this;\r\n            var groups = _utils.default.normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\r\n            var remoteOperations = options.remoteOperations || {};\r\n            var summary = that.summaryGetter()(remoteOperations);\r\n            var totalAggregates;\r\n            if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                if (remoteOperations.summary) {\r\n                    if (!remoteOperations.paging && groups.length && summary) {\r\n                        if (!remoteOperations.grouping) {\r\n                            calculateAggregates(that, {\r\n                                groupAggregates: summary.groupAggregates\r\n                            }, options.data, groups.length)\r\n                        }\r\n                        options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                    }\r\n                } else {\r\n                    if (!remoteOperations.paging) {\r\n                        totalAggregates = calculateAggregates(that, summary, options.data, groups.length);\r\n                        options.data = sortGroupsBySummary(options.data, groups, summary);\r\n                        options.extra = (0, _type.isPlainObject)(options.extra) ? options.extra : {};\r\n                        options.extra.summary = totalAggregates\r\n                    }\r\n                }\r\n            }\r\n            if (!options.isCustomLoading) {\r\n                that._totalAggregates = options.extra && options.extra.summary || that._totalAggregates\r\n            }\r\n            that.callBase(options)\r\n        }\r\n    }\r\n}();\r\n_uiData_grid2.default.extend(SummaryDataSourceAdapterExtender);\r\n_uiData_grid2.default.extend(SummaryDataSourceAdapterClientExtender);\r\n_uiData_grid.default.registerModule(\"summary\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            summary: {\r\n                groupItems: void 0,\r\n                totalItems: void 0,\r\n                calculateCustomSummary: void 0,\r\n                skipEmptyValues: true,\r\n                recalculateWhileEditing: false,\r\n                texts: {\r\n                    sum: _message.default.getFormatter(\"dxDataGrid-summarySum\"),\r\n                    sumOtherColumn: _message.default.getFormatter(\"dxDataGrid-summarySumOtherColumn\"),\r\n                    min: _message.default.getFormatter(\"dxDataGrid-summaryMin\"),\r\n                    minOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryMinOtherColumn\"),\r\n                    max: _message.default.getFormatter(\"dxDataGrid-summaryMax\"),\r\n                    maxOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryMaxOtherColumn\"),\r\n                    avg: _message.default.getFormatter(\"dxDataGrid-summaryAvg\"),\r\n                    avgOtherColumn: _message.default.getFormatter(\"dxDataGrid-summaryAvgOtherColumn\"),\r\n                    count: _message.default.getFormatter(\"dxDataGrid-summaryCount\")\r\n                }\r\n            },\r\n            sortByGroupSummaryInfo: void 0\r\n        }\r\n    },\r\n    views: {\r\n        footerView: FooterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: function() {\r\n                return {\r\n                    _isDataColumn: function(column) {\r\n                        return column && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)\r\n                    },\r\n                    _isGroupFooterVisible: function() {\r\n                        var groupItems = this.option(\"summary.groupItems\") || [];\r\n                        for (var i = 0; i < groupItems.length; i++) {\r\n                            var groupItem = groupItems[i];\r\n                            var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\r\n                            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\r\n                                return true\r\n                            }\r\n                        }\r\n                        return false\r\n                    },\r\n                    _processGroupItems: function(items, groupCount, options) {\r\n                        var data = options && options.data;\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        if (options) {\r\n                            if (void 0 === options.isGroupFooterVisible) {\r\n                                options.isGroupFooterVisible = this._isGroupFooterVisible()\r\n                            }\r\n                            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\r\n                                result.push({\r\n                                    rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\r\n                                    key: options.path.slice(),\r\n                                    data: data,\r\n                                    groupIndex: options.path.length - 1,\r\n                                    values: []\r\n                                })\r\n                            }\r\n                        }\r\n                        return result\r\n                    },\r\n                    _processGroupItem: function(groupItem, options) {\r\n                        var that = this;\r\n                        if (!options.summaryGroupItems) {\r\n                            options.summaryGroupItems = that.option(\"summary.groupItems\") || []\r\n                        }\r\n                        if (\"group\" === groupItem.rowType) {\r\n                            var groupColumnIndex = -1;\r\n                            var afterGroupColumnIndex = -1;\r\n                            (0, _iterator.each)(options.visibleColumns, function(visibleIndex) {\r\n                                var prevColumn = options.visibleColumns[visibleIndex - 1];\r\n                                if (groupItem.groupIndex === this.groupIndex) {\r\n                                    groupColumnIndex = this.index\r\n                                }\r\n                                if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\r\n                                    afterGroupColumnIndex = this.index\r\n                                }\r\n                            });\r\n                            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function(summaryItem, column) {\r\n                                if (summaryItem.showInGroupFooter) {\r\n                                    return -1\r\n                                }\r\n                                if (summaryItem.alignByColumn && column && !(0, _type.isDefined)(column.groupIndex) && column.index !== afterGroupColumnIndex) {\r\n                                    return column.index\r\n                                } else {\r\n                                    return groupColumnIndex\r\n                                }\r\n                            })\r\n                        }\r\n                        if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\r\n                            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function(summaryItem, column) {\r\n                                return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1\r\n                            })\r\n                        }\r\n                        return groupItem\r\n                    },\r\n                    _calculateSummaryCells: function(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex) {\r\n                        var that = this;\r\n                        var summaryCells = [];\r\n                        var summaryCellsByColumns = {};\r\n                        (0, _iterator.each)(summaryItems, function(summaryIndex, summaryItem) {\r\n                            var column = that._columnsController.columnOption(summaryItem.column);\r\n                            var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\r\n                            var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\r\n                            if (columnIndex >= 0) {\r\n                                if (!summaryCellsByColumns[columnIndex]) {\r\n                                    summaryCellsByColumns[columnIndex] = []\r\n                                }\r\n                                var aggregate = aggregates[summaryIndex];\r\n                                if (aggregate === aggregate) {\r\n                                    var valueFormat;\r\n                                    if ((0, _type.isDefined)(summaryItem.valueFormat)) {\r\n                                        valueFormat = summaryItem.valueFormat\r\n                                    } else {\r\n                                        if (\"count\" !== summaryItem.summaryType) {\r\n                                            valueFormat = _uiData_grid.default.getFormatByDataType(column && column.dataType)\r\n                                        }\r\n                                    }\r\n                                    summaryCellsByColumns[columnIndex].push((0, _extend.extend)({}, summaryItem, {\r\n                                        value: (0, _type.isString)(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\r\n                                        valueFormat: valueFormat,\r\n                                        columnCaption: column && column.index !== columnIndex ? column.caption : void 0\r\n                                    }))\r\n                                }\r\n                            }\r\n                        });\r\n                        if (!(0, _type.isEmptyObject)(summaryCellsByColumns)) {\r\n                            (0, _iterator.each)(visibleColumns, function() {\r\n                                summaryCells.push(summaryCellsByColumns[this.index] || [])\r\n                            })\r\n                        }\r\n                        return summaryCells\r\n                    },\r\n                    _getSummaryCells: function(summaryTotalItems, totalAggregates) {\r\n                        var that = this;\r\n                        var columnsController = that._columnsController;\r\n                        return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function(summaryItem, column) {\r\n                            return that._isDataColumn(column) ? column.index : -1\r\n                        })\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var that = this;\r\n                        var summaryCells;\r\n                        var dataSource = that._dataSource;\r\n                        var footerItems = that._footerItems;\r\n                        var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\r\n                        var summaryTotalItems = that.option(\"summary.totalItems\");\r\n                        that._footerItems = [];\r\n                        if (dataSource && summaryTotalItems && summaryTotalItems.length) {\r\n                            var totalAggregates = dataSource.totalAggregates();\r\n                            summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\r\n                            if (change && change.repaintChangesOnly && oldSummaryCells) {\r\n                                change.totalColumnIndices = summaryCells.map(function(summaryCell, index) {\r\n                                    if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\r\n                                        return index\r\n                                    }\r\n                                    return -1\r\n                                }).filter(function(index) {\r\n                                    return index >= 0\r\n                                })\r\n                            }\r\n                            if (summaryCells.length) {\r\n                                that._footerItems.push({\r\n                                    rowType: \"totalFooter\",\r\n                                    summaryCells: summaryCells\r\n                                })\r\n                            }\r\n                        }\r\n                        that.callBase(change)\r\n                    },\r\n                    _prepareUnsavedDataSelector: function(selector) {\r\n                        var that = this;\r\n                        if (recalculateWhileEditing(that)) {\r\n                            var editingController = that.getController(\"editing\");\r\n                            if (editingController) {\r\n                                return function(data) {\r\n                                    data = editingController.getUpdatedData(data);\r\n                                    return selector(data)\r\n                                }\r\n                            }\r\n                        }\r\n                        return selector\r\n                    },\r\n                    _prepareAggregateSelector: function(selector, aggregator) {\r\n                        selector = this._prepareUnsavedDataSelector(selector);\r\n                        if (\"avg\" === aggregator || \"sum\" === aggregator) {\r\n                            return function(data) {\r\n                                var value = selector(data);\r\n                                return (0, _type.isDefined)(value) ? Number(value) : value\r\n                            }\r\n                        }\r\n                        return selector\r\n                    },\r\n                    _getAggregates: function(summaryItems, remoteOperations) {\r\n                        var that = this;\r\n                        var columnsController = that.getController(\"columns\");\r\n                        var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\r\n                        var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\r\n                        return (0, _iterator.map)(summaryItems || [], function(summaryItem) {\r\n                            var column = columnsController.columnOption(summaryItem.column);\r\n                            var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : (0, _data.compileGetter)(column ? column.dataField : summaryItem.column);\r\n                            var aggregator = summaryItem.summaryType || \"count\";\r\n                            var selector = summaryItem.column;\r\n                            var skipEmptyValues = (0, _type.isDefined)(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\r\n                            if (remoteOperations) {\r\n                                return {\r\n                                    selector: summaryItem.column,\r\n                                    summaryType: aggregator\r\n                                }\r\n                            } else {\r\n                                selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\r\n                                if (\"custom\" === aggregator) {\r\n                                    if (!calculateCustomSummary) {\r\n                                        _ui.default.log(\"E1026\");\r\n                                        calculateCustomSummary = function() {}\r\n                                    }\r\n                                    var options = {\r\n                                        component: that.component,\r\n                                        name: summaryItem.name\r\n                                    };\r\n                                    calculateCustomSummary(options);\r\n                                    options.summaryProcess = \"calculate\";\r\n                                    aggregator = {\r\n                                        seed: function(groupIndex) {\r\n                                            options.summaryProcess = \"start\";\r\n                                            options.totalValue = void 0;\r\n                                            options.groupIndex = groupIndex;\r\n                                            delete options.value;\r\n                                            calculateCustomSummary(options);\r\n                                            return options.totalValue\r\n                                        },\r\n                                        step: function(totalValue, value) {\r\n                                            options.summaryProcess = \"calculate\";\r\n                                            options.totalValue = totalValue;\r\n                                            options.value = value;\r\n                                            calculateCustomSummary(options);\r\n                                            return options.totalValue\r\n                                        },\r\n                                        finalize: function(totalValue) {\r\n                                            options.summaryProcess = \"finalize\";\r\n                                            options.totalValue = totalValue;\r\n                                            delete options.value;\r\n                                            calculateCustomSummary(options);\r\n                                            return options.totalValue\r\n                                        }\r\n                                    }\r\n                                }\r\n                                return {\r\n                                    selector: selector,\r\n                                    aggregator: aggregator,\r\n                                    skipEmptyValues: skipEmptyValues\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    _addSortInfo: function(sortByGroups, groupColumn, selector, sortOrder) {\r\n                        if (groupColumn) {\r\n                            var groupIndex = groupColumn.groupIndex;\r\n                            sortOrder = sortOrder || groupColumn.sortOrder;\r\n                            if ((0, _type.isDefined)(groupIndex)) {\r\n                                sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\r\n                                sortByGroups[groupIndex].push({\r\n                                    selector: selector,\r\n                                    desc: \"desc\" === sortOrder\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    _findSummaryItem: function(summaryItems, name) {\r\n                        var summaryItemIndex = -1;\r\n                        var getFullName = function(summaryItem) {\r\n                            var summaryType = summaryItem.summaryType;\r\n                            var column = summaryItem.column;\r\n                            return summaryType && column && summaryType + \"_\" + column\r\n                        };\r\n                        if ((0, _type.isDefined)(name)) {\r\n                            (0, _iterator.each)(summaryItems || [], function(index) {\r\n                                if (this.name === name || index === name || this.summaryType === name || this.column === name || getFullName(this) === name) {\r\n                                    summaryItemIndex = index;\r\n                                    return false\r\n                                }\r\n                            })\r\n                        }\r\n                        return summaryItemIndex\r\n                    },\r\n                    _getSummarySortByGroups: function(sortByGroupSummaryInfo, groupSummaryItems) {\r\n                        var that = this;\r\n                        var columnsController = that._columnsController;\r\n                        var groupColumns = columnsController.getGroupColumns();\r\n                        var sortByGroups = [];\r\n                        if (!groupSummaryItems || !groupSummaryItems.length) {\r\n                            return\r\n                        }(0, _iterator.each)(sortByGroupSummaryInfo || [], function() {\r\n                            var sortOrder = this.sortOrder;\r\n                            var groupColumn = this.groupColumn;\r\n                            var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\r\n                            if (summaryItemIndex < 0) {\r\n                                return\r\n                            }\r\n                            var selector = function(data) {\r\n                                return getGroupAggregates(data)[summaryItemIndex]\r\n                            };\r\n                            if ((0, _type.isDefined)(groupColumn)) {\r\n                                groupColumn = columnsController.columnOption(groupColumn);\r\n                                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                            } else {\r\n                                (0, _iterator.each)(groupColumns, function(groupIndex, groupColumn) {\r\n                                    that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                                })\r\n                            }\r\n                        });\r\n                        return sortByGroups\r\n                    },\r\n                    _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                        var that = this;\r\n                        var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\r\n                        dataSourceAdapter.summaryGetter(function(currentRemoteOperations) {\r\n                            return that._getSummaryOptions(currentRemoteOperations || remoteOperations)\r\n                        });\r\n                        return dataSourceAdapter\r\n                    },\r\n                    _getSummaryOptions: function(remoteOperations) {\r\n                        var that = this;\r\n                        var groupSummaryItems = that.option(\"summary.groupItems\");\r\n                        var totalSummaryItems = that.option(\"summary.totalItems\");\r\n                        var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\r\n                        var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\r\n                        var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\r\n                        var sortByGroups = function() {\r\n                            return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)\r\n                        };\r\n                        if (groupAggregates.length || totalAggregates.length) {\r\n                            return {\r\n                                groupAggregates: groupAggregates,\r\n                                totalAggregates: totalAggregates,\r\n                                sortByGroups: sortByGroups\r\n                            }\r\n                        }\r\n                    },\r\n                    publicMethods: function() {\r\n                        var methods = this.callBase();\r\n                        methods.push(\"getTotalSummaryValue\");\r\n                        return methods\r\n                    },\r\n                    getTotalSummaryValue: function(summaryItemName) {\r\n                        var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\r\n                        var aggregates = this._dataSource.totalAggregates();\r\n                        if (aggregates.length && summaryItemIndex > -1) {\r\n                            return aggregates[summaryItemIndex]\r\n                        }\r\n                    },\r\n                    optionChanged: function(args) {\r\n                        if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\r\n                            args.name = \"dataSource\"\r\n                        }\r\n                        this.callBase(args)\r\n                    },\r\n                    init: function() {\r\n                        this._footerItems = [];\r\n                        this.callBase()\r\n                    },\r\n                    footerItems: function() {\r\n                        return this._footerItems\r\n                    }\r\n                }\r\n            }(),\r\n            editing: function() {\r\n                return {\r\n                    _refreshSummary: function() {\r\n                        if (recalculateWhileEditing(this) && !this.isSaving()) {\r\n                            this._dataController.refresh({\r\n                                load: true,\r\n                                changesOnly: true\r\n                            })\r\n                        }\r\n                    },\r\n                    _addChange: function(params) {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        if (params.type) {\r\n                            this._refreshSummary()\r\n                        }\r\n                        return result\r\n                    },\r\n                    _removeChange: function() {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        this._refreshSummary();\r\n                        return result\r\n                    },\r\n                    cancelEditData: function() {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        this._refreshSummary();\r\n                        return result\r\n                    }\r\n                }\r\n            }()\r\n        },\r\n        views: {\r\n            rowsView: function() {\r\n                return {\r\n                    _createRow: function(row) {\r\n                        var $row = this.callBase(row);\r\n                        row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\r\n                        return $row\r\n                    },\r\n                    _renderCells: function($row, options) {\r\n                        this.callBase.apply(this, arguments);\r\n                        if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\r\n                            this._renderGroupSummaryCells($row, options)\r\n                        }\r\n                    },\r\n                    _hasAlignByColumnSummaryItems: function(columnIndex, options) {\r\n                        return !(0, _type.isDefined)(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length\r\n                    },\r\n                    _getAlignByColumnCellCount: function(groupCellColSpan, options) {\r\n                        var alignByColumnCellCount = 0;\r\n                        for (var i = 1; i < groupCellColSpan; i++) {\r\n                            var columnIndex = options.row.summaryCells.length - i;\r\n                            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount\r\n                        }\r\n                        return alignByColumnCellCount\r\n                    },\r\n                    _renderGroupSummaryCells: function($row, options) {\r\n                        var $groupCell = $row.children().last();\r\n                        var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\r\n                        var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n                        this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n                    },\r\n                    _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n                        if (alignByColumnCellCount > 0) {\r\n                            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\r\n                            for (var i = 0; i < alignByColumnCellCount; i++) {\r\n                                var columnIndex = options.columns.length - alignByColumnCellCount + i;\r\n                                this._renderCell($groupCell.parent(), (0, _extend.extend)({\r\n                                    column: options.columns[columnIndex],\r\n                                    columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\r\n                                }, options))\r\n                            }\r\n                        }\r\n                    },\r\n                    _getSummaryCellIndex: function(columnIndex) {\r\n                        return columnIndex\r\n                    },\r\n                    _getCellTemplate: function(options) {\r\n                        if (!options.column.command && !(0, _type.isDefined)(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\r\n                            return renderSummaryCell\r\n                        } else {\r\n                            return this.callBase(options)\r\n                        }\r\n                    },\r\n                    _getCellOptions: function(options) {\r\n                        var that = this;\r\n                        var parameters = that.callBase(options);\r\n                        if (options.row.summaryCells) {\r\n                            return (0, _extend.extend)(parameters, getSummaryCellOptions(that, options))\r\n                        } else {\r\n                            return parameters\r\n                        }\r\n                    }\r\n                }\r\n            }()\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}