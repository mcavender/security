{"ast":null,"code":"import toInteger from '../_lib/toInteger/index.js';\nimport assign from '../_lib/assign/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport toDate from '../toDate/index.js';\nimport subMilliseconds from '../subMilliseconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport parsers from './_lib/parsers/index.js';\nimport { isProtectedToken, throwProtectedError } from '../_lib/protectedTokens/index.js';\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'(.*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\n/**\r\n * @name parse\r\n * @category Common Helpers\r\n * @summary Parse the date.\r\n *\r\n * @description\r\n * Return the date parsed from string using the given format string.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://git.io/fxCyr\r\n *\r\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n *\r\n * Format of the format string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 5 below the table).\r\n *\r\n * Accepted format string patterns:\r\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\r\n * |---------------------------------|-----|---------|-----------------------------------|-------|\r\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\r\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 |     | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\r\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\r\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\r\n * |                                 |     | yyyyy   | ...                               | 2,4   |\r\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\r\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\r\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\r\n * |                                 |     | YYYYY   | ...                               | 2,4   |\r\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\r\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\r\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\r\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\r\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\r\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\r\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\r\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\r\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\r\n * |                                 |     | uuuuu   | ...                               | 2,4   |\r\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\r\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\r\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\r\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\r\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\r\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\r\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 6     |\r\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\r\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 6     |\r\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 |     | DDDD    | ...                               | 2     |\r\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\r\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\r\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\r\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\r\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\r\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\r\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\r\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\r\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 |     | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\r\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\r\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\r\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\r\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\r\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\r\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\r\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\r\n * |                                 |     | tt      | ...                               | 2     |\r\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\r\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\r\n * |                                 |     | SSSS    | ...                               | 2     |\r\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\r\n * |                                 |     | TT      | ...                               | 2     |\r\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\r\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\r\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\r\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\r\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\r\n *    In `format` function, they will produce different result:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n *    `parse` will try to match both formatting and stand-alone units interchangably.\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table:\r\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\r\n *      as wide as the sequence\r\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\r\n *      These variations are marked with \"2\" in the last column of the table.\r\n *\r\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 4. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` will try to guess the century of two digit year by proximity with `baseDate`:\r\n *\r\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\r\n *\r\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\r\n *\r\n *    while `uu` will just assign the year as is:\r\n *\r\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\r\n *\r\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\r\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\r\n *\r\n * 5. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `o`: ordinal number modifier\r\n *\r\n * 6. These tokens are often confused with others. See: https://git.io/fxCyr\r\n *\r\n * Values will be assigned to the date in the descending order of its unit's priority.\r\n * Units of an equal priority overwrite each other in the order of appearance.\r\n *\r\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\r\n * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.\r\n *\r\n * `baseDate` must be passed for correct work of the function.\r\n * If you're not sure which `baseDate` to supply, create a new instance of Date:\r\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\r\n * In this case parsing will be done in the context of the current date.\r\n * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,\r\n * then `Invalid Date` will be returned.\r\n *\r\n * The result may vary by locale.\r\n *\r\n * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.\r\n *\r\n * If parsing failed, `Invalid Date` will be returned.\r\n * Invalid Date is a Date, whose time value is NaN.\r\n * Time value of Date: http://es5.github.io/#x15.9.1.1\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Old `parse` was renamed to `toDate`.\r\n *   Now `parse` is a new function which parses a string using a provided format.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   parse('2016-01-01')\r\n *\r\n *   // v2.0.0 onward\r\n *   toDate('2016-01-01')\r\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\r\n *   ```\r\n *\r\n * @param {String} dateString - the string to parse\r\n * @param {String} formatString - the string of tokens\r\n * @param {Date|Number} baseDate - defines values missing from the parsed dateString\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\r\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\r\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).\r\n *   See: https://git.io/fxCyr\r\n * @returns {Date} the parsed date\r\n * @throws {TypeError} 3 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n * @throws {RangeError} `options.locale` must contain `match` property\r\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr\r\n *\r\n * @example\r\n * // Parse 11 February 2014 from middle-endian format:\r\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\r\n * //=> Tue Feb 11 2014 00:00:00\r\n *\r\n * @example\r\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\r\n * import eo from 'date-fns/locale/eo'\r\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\r\n *   locale: eo\r\n * })\r\n * //=> Sun Feb 28 2010 00:00:00\r\n */\n\nexport default function parse(dirtyDateString, dirtyFormatString, dirtyBaseDate, dirtyOptions) {\n  if (arguments.length < 3) {\n    throw new TypeError('3 arguments required, but only ' + arguments.length + ' present');\n  }\n\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return toDate(dirtyBaseDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale\n  }; // If timezone isn't specified, it will be set to the system timezone\n\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(formattingTokensRegExp);\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.awareOfUnicodeTokens && isProtectedToken(token)) {\n      throwProtectedError(token);\n    }\n\n    var firstCharacter = token[0];\n    var parser = parsers[firstCharacter];\n\n    if (parser) {\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      // Replace two single quote characters with one single quote character\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).reverse();\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = toDate(dirtyBaseDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      assign(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/AdminApp/node_modules/date-fns/esm/parse/index.js"],"names":["toInteger","assign","getTimezoneOffsetInMilliseconds","toDate","subMilliseconds","defaultLocale","parsers","isProtectedToken","throwProtectedError","TIMEZONE_UNIT_PRIORITY","formattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","notWhitespaceRegExp","parse","dirtyDateString","dirtyFormatString","dirtyBaseDate","dirtyOptions","arguments","length","TypeError","dateString","String","formatString","options","locale","match","RangeError","localeFirstWeekContainsDate","firstWeekContainsDate","defaultFirstWeekContainsDate","localeWeekStartsOn","weekStartsOn","defaultWeekStartsOn","Date","NaN","subFnOptions","setters","priority","set","dateToSystemTimezone","index","i","tokens","token","awareOfUnicodeTokens","firstCharacter","parser","parseResult","push","validate","value","rest","cleanEscapedString","indexOf","slice","test","uniquePrioritySetters","map","setter","sort","a","b","filter","array","reverse","setterArray","date","isNaN","utcDate","flags","result","timestampIsSet","convertedDate","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","input","replace"],"mappings":"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","sourcesContent":["import toInteger from '../_lib/toInteger/index.js'\r\nimport assign from '../_lib/assign/index.js'\r\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js'\r\nimport toDate from '../toDate/index.js'\r\nimport subMilliseconds from '../subMilliseconds/index.js'\r\nimport defaultLocale from '../locale/en-US/index.js'\r\nimport parsers from './_lib/parsers/index.js'\r\nimport {\r\n  isProtectedToken,\r\n  throwProtectedError\r\n} from '../_lib/protectedTokens/index.js'\r\n\r\nvar TIMEZONE_UNIT_PRIORITY = 10\r\n\r\n// This RegExp consists of three parts separated by `|`:\r\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\r\n//   (one of the certain letters followed by `o`)\r\n// - (\\w)\\1* matches any sequences of the same letter\r\n// - '' matches two quote characters in a row\r\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\r\n//   except a single quote symbol, which ends the sequence.\r\n//   Two quote characters do not end the sequence.\r\n//   If there is no matching single quote\r\n//   then the sequence will continue until the end of the string.\r\n// - . matches any single character unmatched by previous parts of the RegExps\r\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g\r\n\r\nvar escapedStringRegExp = /^'(.*?)'?$/\r\nvar doubleQuoteRegExp = /''/g\r\n\r\nvar notWhitespaceRegExp = /\\S/\r\n\r\n/**\r\n * @name parse\r\n * @category Common Helpers\r\n * @summary Parse the date.\r\n *\r\n * @description\r\n * Return the date parsed from string using the given format string.\r\n *\r\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\r\n * > See: https://git.io/fxCyr\r\n *\r\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\r\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\r\n *\r\n * Format of the format string is based on Unicode Technical Standard #35:\r\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\r\n * with a few additions (see note 5 below the table).\r\n *\r\n * Accepted format string patterns:\r\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\r\n * |---------------------------------|-----|---------|-----------------------------------|-------|\r\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\r\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\r\n * |                                 |     | GGGGG   | A, B                              |       |\r\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\r\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\r\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\r\n * |                                 |     | yyyyy   | ...                               | 2,4   |\r\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\r\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\r\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\r\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\r\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\r\n * |                                 |     | YYYYY   | ...                               | 2,4   |\r\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\r\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\r\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\r\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\r\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\r\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\r\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\r\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\r\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\r\n * |                                 |     | uuuuu   | ...                               | 2,4   |\r\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\r\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\r\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\r\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\r\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\r\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\r\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\r\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\r\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\r\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\r\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\r\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\r\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\r\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\r\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\r\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\r\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\r\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\r\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\r\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\r\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\r\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\r\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\r\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 6     |\r\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\r\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 6     |\r\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\r\n * |                                 |     | DDDD    | ...                               | 2     |\r\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\r\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\r\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\r\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |\r\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\r\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\r\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\r\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\r\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\r\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\r\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |\r\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\r\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\r\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\r\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\r\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\r\n * |                                 |     | aaaaa   | a, p                              |       |\r\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\r\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\r\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\r\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\r\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\r\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\r\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\r\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\r\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\r\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\r\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\r\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\r\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\r\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\r\n * |                                 |     | KK      | 1, 2, ..., 11, 0                  |       |\r\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\r\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\r\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\r\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\r\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\r\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\r\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\r\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\r\n * |                                 |     | tt      | ...                               | 2     |\r\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\r\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\r\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\r\n * |                                 |     | SSSS    | ...                               | 2     |\r\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\r\n * |                                 |     | TT      | ...                               | 2     |\r\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\r\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\r\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\r\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\r\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\r\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\r\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\r\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\r\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\r\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\r\n * Notes:\r\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\r\n *    are the same as \"stand-alone\" units, but are different in some languages.\r\n *    \"Formatting\" units are declined according to the rules of the language\r\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\r\n *    In `format` function, they will produce different result:\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\r\n *\r\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\r\n *\r\n *    `parse` will try to match both formatting and stand-alone units interchangably.\r\n *\r\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\r\n *    the single quote characters (see below).\r\n *    If the sequence is longer than listed in table:\r\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\r\n *      as wide as the sequence\r\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\r\n *      These variations are marked with \"2\" in the last column of the table.\r\n *\r\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\r\n *    These tokens represent the shortest form of the quarter.\r\n *\r\n * 4. The main difference between `y` and `u` patterns are B.C. years:\r\n *\r\n *    | Year | `y` | `u` |\r\n *    |------|-----|-----|\r\n *    | AC 1 |   1 |   1 |\r\n *    | BC 1 |   1 |   0 |\r\n *    | BC 2 |   2 |  -1 |\r\n *\r\n *    Also `yy` will try to guess the century of two digit year by proximity with `baseDate`:\r\n *\r\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\r\n *\r\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\r\n *\r\n *    while `uu` will just assign the year as is:\r\n *\r\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\r\n *\r\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\r\n *\r\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\r\n *    except local week-numbering years are dependent on `options.weekStartsOn`\r\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\r\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\r\n *\r\n * 5. These patterns are not in the Unicode Technical Standard #35:\r\n *    - `i`: ISO day of week\r\n *    - `I`: ISO week of year\r\n *    - `R`: ISO week-numbering year\r\n *    - `o`: ordinal number modifier\r\n *\r\n * 6. These tokens are often confused with others. See: https://git.io/fxCyr\r\n *\r\n * Values will be assigned to the date in the descending order of its unit's priority.\r\n * Units of an equal priority overwrite each other in the order of appearance.\r\n *\r\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\r\n * the values will be taken from 3rd argument `baseDate` which works as a context of parsing.\r\n *\r\n * `baseDate` must be passed for correct work of the function.\r\n * If you're not sure which `baseDate` to supply, create a new instance of Date:\r\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\r\n * In this case parsing will be done in the context of the current date.\r\n * If `baseDate` is `Invalid Date` or a value not convertible to valid `Date`,\r\n * then `Invalid Date` will be returned.\r\n *\r\n * The result may vary by locale.\r\n *\r\n * If `formatString` matches with `dateString` but does not provides tokens, `baseDate` will be returned.\r\n *\r\n * If parsing failed, `Invalid Date` will be returned.\r\n * Invalid Date is a Date, whose time value is NaN.\r\n * Time value of Date: http://es5.github.io/#x15.9.1.1\r\n *\r\n * ### v2.0.0 breaking changes:\r\n *\r\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\r\n *\r\n * - Old `parse` was renamed to `toDate`.\r\n *   Now `parse` is a new function which parses a string using a provided format.\r\n *\r\n *   ```javascript\r\n *   // Before v2.0.0\r\n *   parse('2016-01-01')\r\n *\r\n *   // v2.0.0 onward\r\n *   toDate('2016-01-01')\r\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\r\n *   ```\r\n *\r\n * @param {String} dateString - the string to parse\r\n * @param {String} formatString - the string of tokens\r\n * @param {Date|Number} baseDate - defines values missing from the parsed dateString\r\n * @param {Object} [options] - an object with options.\r\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\r\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\r\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\r\n * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:\r\n *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).\r\n *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens (`yy`, `yyyy`).\r\n *   See: https://git.io/fxCyr\r\n * @returns {Date} the parsed date\r\n * @throws {TypeError} 3 arguments required\r\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\r\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\r\n * @throws {RangeError} `options.locale` must contain `match` property\r\n * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see: https://git.io/fxCyr\r\n *\r\n * @example\r\n * // Parse 11 February 2014 from middle-endian format:\r\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\r\n * //=> Tue Feb 11 2014 00:00:00\r\n *\r\n * @example\r\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\r\n * import eo from 'date-fns/locale/eo'\r\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\r\n *   locale: eo\r\n * })\r\n * //=> Sun Feb 28 2010 00:00:00\r\n */\r\nexport default function parse(\r\n  dirtyDateString,\r\n  dirtyFormatString,\r\n  dirtyBaseDate,\r\n  dirtyOptions\r\n) {\r\n  if (arguments.length < 3) {\r\n    throw new TypeError(\r\n      '3 arguments required, but only ' + arguments.length + ' present'\r\n    )\r\n  }\r\n\r\n  var dateString = String(dirtyDateString)\r\n  var formatString = String(dirtyFormatString)\r\n  var options = dirtyOptions || {}\r\n\r\n  var locale = options.locale || defaultLocale\r\n\r\n  if (!locale.match) {\r\n    throw new RangeError('locale must contain match property')\r\n  }\r\n\r\n  var localeFirstWeekContainsDate =\r\n    locale.options && locale.options.firstWeekContainsDate\r\n  var defaultFirstWeekContainsDate =\r\n    localeFirstWeekContainsDate == null\r\n      ? 1\r\n      : toInteger(localeFirstWeekContainsDate)\r\n  var firstWeekContainsDate =\r\n    options.firstWeekContainsDate == null\r\n      ? defaultFirstWeekContainsDate\r\n      : toInteger(options.firstWeekContainsDate)\r\n\r\n  // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\r\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\r\n    throw new RangeError(\r\n      'firstWeekContainsDate must be between 1 and 7 inclusively'\r\n    )\r\n  }\r\n\r\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn\r\n  var defaultWeekStartsOn =\r\n    localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn)\r\n  var weekStartsOn =\r\n    options.weekStartsOn == null\r\n      ? defaultWeekStartsOn\r\n      : toInteger(options.weekStartsOn)\r\n\r\n  // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\r\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\r\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively')\r\n  }\r\n\r\n  if (formatString === '') {\r\n    if (dateString === '') {\r\n      return toDate(dirtyBaseDate)\r\n    } else {\r\n      return new Date(NaN)\r\n    }\r\n  }\r\n\r\n  var subFnOptions = {\r\n    firstWeekContainsDate: firstWeekContainsDate,\r\n    weekStartsOn: weekStartsOn,\r\n    locale: locale\r\n  }\r\n\r\n  // If timezone isn't specified, it will be set to the system timezone\r\n  var setters = [\r\n    {\r\n      priority: TIMEZONE_UNIT_PRIORITY,\r\n      set: dateToSystemTimezone,\r\n      index: 0\r\n    }\r\n  ]\r\n\r\n  var i\r\n\r\n  var tokens = formatString.match(formattingTokensRegExp)\r\n\r\n  for (i = 0; i < tokens.length; i++) {\r\n    var token = tokens[i]\r\n\r\n    if (!options.awareOfUnicodeTokens && isProtectedToken(token)) {\r\n      throwProtectedError(token)\r\n    }\r\n\r\n    var firstCharacter = token[0]\r\n    var parser = parsers[firstCharacter]\r\n    if (parser) {\r\n      var parseResult = parser.parse(\r\n        dateString,\r\n        token,\r\n        locale.match,\r\n        subFnOptions\r\n      )\r\n\r\n      if (!parseResult) {\r\n        return new Date(NaN)\r\n      }\r\n\r\n      setters.push({\r\n        priority: parser.priority,\r\n        set: parser.set,\r\n        validate: parser.validate,\r\n        value: parseResult.value,\r\n        index: setters.length\r\n      })\r\n\r\n      dateString = parseResult.rest\r\n    } else {\r\n      // Replace two single quote characters with one single quote character\r\n      if (token === \"''\") {\r\n        token = \"'\"\r\n      } else if (firstCharacter === \"'\") {\r\n        token = cleanEscapedString(token)\r\n      }\r\n\r\n      // Cut token from string, or, if string doesn't match the token, return Invalid Date\r\n      if (dateString.indexOf(token) === 0) {\r\n        dateString = dateString.slice(token.length)\r\n      } else {\r\n        return new Date(NaN)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check if the remaining input contains something other than whitespace\r\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\r\n    return new Date(NaN)\r\n  }\r\n\r\n  var uniquePrioritySetters = setters\r\n    .map(function(setter) {\r\n      return setter.priority\r\n    })\r\n    .sort(function(a, b) {\r\n      return b - a\r\n    })\r\n    .filter(function(priority, index, array) {\r\n      return array.indexOf(priority) === index\r\n    })\r\n    .map(function(priority) {\r\n      return setters\r\n        .filter(function(setter) {\r\n          return setter.priority === priority\r\n        })\r\n        .reverse()\r\n    })\r\n    .map(function(setterArray) {\r\n      return setterArray[0]\r\n    })\r\n\r\n  var date = toDate(dirtyBaseDate)\r\n\r\n  if (isNaN(date)) {\r\n    return new Date(NaN)\r\n  }\r\n\r\n  // Convert the date in system timezone to the same date in UTC+00:00 timezone.\r\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\r\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\r\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date))\r\n\r\n  var flags = {}\r\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\r\n    var setter = uniquePrioritySetters[i]\r\n\r\n    if (\r\n      setter.validate &&\r\n      !setter.validate(utcDate, setter.value, subFnOptions)\r\n    ) {\r\n      return new Date(NaN)\r\n    }\r\n\r\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions)\r\n    // Result is tuple (date, flags)\r\n    if (result[0]) {\r\n      utcDate = result[0]\r\n      assign(flags, result[1])\r\n      // Result is date\r\n    } else {\r\n      utcDate = result\r\n    }\r\n  }\r\n\r\n  return utcDate\r\n}\r\n\r\nfunction dateToSystemTimezone(date, flags) {\r\n  if (flags.timestampIsSet) {\r\n    return date\r\n  }\r\n\r\n  var convertedDate = new Date(0)\r\n  convertedDate.setFullYear(\r\n    date.getUTCFullYear(),\r\n    date.getUTCMonth(),\r\n    date.getUTCDate()\r\n  )\r\n  convertedDate.setHours(\r\n    date.getUTCHours(),\r\n    date.getUTCMinutes(),\r\n    date.getUTCSeconds(),\r\n    date.getUTCMilliseconds()\r\n  )\r\n  return convertedDate\r\n}\r\n\r\nfunction cleanEscapedString(input) {\r\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\")\r\n}\r\n"]},"metadata":{},"sourceType":"module"}