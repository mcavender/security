{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CapiniaC\\\\Desktop\\\\Collection\\\\Work\\\\project\\\\security\\\\AdminApp\\\\src\\\\components\\\\CustomTable.js\";\n\n/*\r\nThis is the main module that builds the table.  It uses\r\na table called MaterialTable that performs sorting and\r\nsearching on the data that we provide it.  We pass in \r\nthe columns and data that we want the table to manage.\r\n\r\nOf particular interest, notice how I instantiate the\r\napi and call api.createEntity.  This uses a React\r\nHook to asynchronously fetch the user data from the\r\nserver.\r\n\r\nThe material-table also exposes the editable property\r\nwhich allows you to perform operations on the data \r\nwhen it is created, edited, or deleted.  Notice how \r\nI use React Hooks to control the updating to the \r\nserver.\r\n*/\nimport React, { useState, useEffect, Fragment } from 'react';\nimport MaterialTable from 'material-table';\nimport { API } from '../services/API';\nexport default function CustomTable({\n  dataUrl\n}) {\n  const [data, setData] = React.useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const api = new API(dataUrl);\n  api.createEntity({\n    name: 'user'\n  });\n  useEffect(() => {\n    new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n        api.endpoints.user.getAll().then(response => {\n          setData(response.data);\n          setIsLoading(false);\n        }).catch(e => {\n          console.log(e);\n        });\n      }, 600);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, \" Loading ...\") : /*#__PURE__*/React.createElement(MaterialTable, {\n    title: \"Administer Accounts\",\n    columns: [{\n      title: 'Username',\n      field: 'username'\n    }, {\n      title: 'Full Name',\n      field: 'fullname'\n    }, {\n      title: 'Role',\n      field: 'role'\n    }, {\n      title: 'Phone',\n      field: 'phonenumber'\n    }, {\n      title: 'Email',\n      field: 'email'\n    }, {\n      title: 'Password',\n      field: 'password'\n    }],\n    options: {\n      headerStyle: {\n        backgroundColor: '#01579b',\n        color: '#FFF'\n      }\n    },\n    data: data,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          console.log(\"newRow=\" + newData);\n          api.endpoints.user.create(newData).then(response => {\n            setData(prevData => [...prevData, newData]);\n            console.log(\"Response=\" + response.data);\n          }).catch(e => {\n            console.log(e);\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            api.endpoints.user.update(newData).then(response => {\n              console.log(\"Response=\" + response.data);\n              let newArray = [...data];\n              newArray[data.indexOf(oldData)] = newData;\n              setData(newArray);\n            }).catch(e => {\n              console.log(e);\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          api.endpoints.user.delete(oldData.id).then(response => {\n            console.log(\"Response=\" + response.data);\n            let newArray = [...data];\n            newArray.splice(data.indexOf(oldData), 1);\n            setData(newArray);\n          }).catch(e => {\n            console.log(e);\n          });\n        }, 600);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/AdminApp/src/components/CustomTable.js"],"names":["React","useState","useEffect","Fragment","MaterialTable","API","CustomTable","dataUrl","data","setData","isLoading","setIsLoading","api","createEntity","name","Promise","resolve","setTimeout","endpoints","user","getAll","then","response","catch","e","console","log","title","field","headerStyle","backgroundColor","color","onRowAdd","newData","create","prevData","onRowUpdate","oldData","update","newArray","indexOf","onRowDelete","delete","id","splice"],"mappings":"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","sourcesContent":["/*\r\nThis is the main module that builds the table.  It uses\r\na table called MaterialTable that performs sorting and\r\nsearching on the data that we provide it.  We pass in \r\nthe columns and data that we want the table to manage.\r\n\r\nOf particular interest, notice how I instantiate the\r\napi and call api.createEntity.  This uses a React\r\nHook to asynchronously fetch the user data from the\r\nserver.\r\n\r\nThe material-table also exposes the editable property\r\nwhich allows you to perform operations on the data \r\nwhen it is created, edited, or deleted.  Notice how \r\nI use React Hooks to control the updating to the \r\nserver.\r\n*/\r\n\r\nimport React, { useState, useEffect, Fragment } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport {API} from '../services/API';\r\n\r\nexport default function CustomTable({ dataUrl }) {\r\n\r\n  const [data, setData] = React.useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const api = new API(dataUrl);\r\n  \r\n  api.createEntity({ name: 'user'});\r\n  useEffect(() => {\r\n    new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve();\r\n        api.endpoints.user.getAll()\r\n          .then(response => {\r\n            setData(response.data);\r\n            setIsLoading(false);\r\n          })\r\n          .catch(e => {\r\n            console.log(e);\r\n          });\r\n      }, 600);\r\n    })\r\n  },[]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {isLoading ? (\r\n        <div> Loading ...</div >) :\r\n        (\r\n\r\n          <MaterialTable\r\n            title='Administer Accounts'\r\n            columns={[\r\n              { title: 'Username', field: 'username' },\r\n              { title: 'Full Name', field: 'fullname' },\r\n              { title: 'Role', field: 'role' },\r\n              { title: 'Phone', field: 'phonenumber' },\r\n              { title: 'Email', field: 'email' },\r\n              { title: 'Password', field: 'password'}, \r\n            ]}\r\n            options={{\r\n              headerStyle: {\r\n                backgroundColor: '#01579b',\r\n                color: '#FFF'\r\n              }\r\n            }}\r\n            data={data}\r\n            editable={{\r\n              onRowAdd: (newData) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve();\r\n                    console.log(\"newRow=\" + newData);\r\n                    api.endpoints.user.create(newData)\r\n                      .then(response => {\r\n                        setData((prevData) =>\r\n                          [...prevData, newData]\r\n                        );\r\n                        console.log(\"Response=\" + response.data);\r\n                      })\r\n                      .catch(e => {\r\n                        console.log(e);\r\n                      });\r\n                  }, 600);\r\n                }),\r\n              onRowUpdate: (newData, oldData) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve();\r\n                    if (oldData) {\r\n                      api.endpoints.user.update(newData)\r\n                        .then(response => {\r\n                          console.log(\"Response=\" + response.data);\r\n                          let newArray = [...data];\r\n                          newArray[data.indexOf(oldData)] = newData;\r\n                          setData(newArray);\r\n                          \r\n                        })\r\n                        .catch(e => {\r\n                          console.log(e);\r\n                        });\r\n\r\n                    }\r\n                  }, 600);\r\n                }),\r\n              onRowDelete: (oldData) =>\r\n                new Promise((resolve) => {\r\n                  setTimeout(() => {\r\n                    resolve();\r\n                    api.endpoints.user.delete(oldData.id)\r\n                    .then(response => {\r\n                      console.log(\"Response=\" + response.data);\r\n                      let newArray = [...data];\r\n                      newArray.splice(data.indexOf(oldData), 1);\r\n                      setData(newArray);\r\n                    })\r\n                    .catch(e => {\r\n                      console.log(e);\r\n                    });\r\n                  }, 600);\r\n                }),\r\n            }}\r\n          />\r\n        )\r\n      }\r\n    </Fragment>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}