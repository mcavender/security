{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.header_panel.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _toolbar = _interopRequireDefault(require(\"../toolbar\"));\n\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _visibility_change = require(\"../../events/visibility_change\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nrequire(\"../drop_down_menu\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar HEADER_PANEL_CLASS = \"header-panel\";\nvar TOOLBAR_BUTTON_CLASS = \"toolbar-button\";\nvar TOOLBAR_ARIA_LABEL = \"-ariaToolbar\";\n\nvar HeaderPanel = _uiGrid_core.ColumnsView.inherit({\n  _getToolbarItems: function () {\n    return [];\n  },\n  _getButtonContainer: function () {\n    return (0, _renderer.default)(\"<div>\").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS));\n  },\n  _getToolbarButtonClass: function (specificClass) {\n    var secondClass = specificClass ? \" \" + specificClass : \"\";\n    return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS) + secondClass;\n  },\n  _getToolbarOptions: function () {\n    var options = {\n      toolbarOptions: {\n        items: this._getToolbarItems(),\n        onItemRendered: function (e) {\n          var itemRenderedCallback = e.itemData.onItemRendered;\n\n          if (itemRenderedCallback) {\n            itemRenderedCallback(e);\n          }\n        }\n      }\n    };\n    this.executeAction(\"onToolbarPreparing\", options);\n\n    if (options.toolbarOptions && !(0, _type.isDefined)(options.toolbarOptions.visible)) {\n      var toolbarItems = options.toolbarOptions.items;\n      options.toolbarOptions.visible = !!(toolbarItems && toolbarItems.length);\n    }\n\n    return options.toolbarOptions;\n  },\n  _renderCore: function () {\n    if (!this._toolbar) {\n      var $headerPanel = this.element();\n      $headerPanel.addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));\n\n      var label = _message.default.format(this.component.NAME + TOOLBAR_ARIA_LABEL);\n\n      var $toolbar = (0, _renderer.default)(\"<div>\").attr(\"aria-label\", label).appendTo($headerPanel);\n      this._toolbar = this._createComponent($toolbar, _toolbar.default, this._toolbarOptions);\n    } else {\n      this._toolbar.option(this._toolbarOptions);\n    }\n  },\n  _columnOptionChanged: _common.noop,\n  _handleDataChanged: function () {\n    if (this._requireReady) {\n      this.render();\n    }\n  },\n  init: function () {\n    this.callBase();\n    this.createAction(\"onToolbarPreparing\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  render: function () {\n    this._toolbarOptions = this._getToolbarOptions();\n    this.callBase.apply(this, arguments);\n  },\n  setToolbarItemDisabled: function (name, optionValue) {\n    var toolbarInstance = this._toolbar;\n\n    if (toolbarInstance) {\n      var items = toolbarInstance.option(\"items\") || [];\n      var itemIndex = items.indexOf(items.filter(function (item) {\n        return item.name === name;\n      })[0]);\n\n      if (itemIndex >= 0) {\n        var itemOptionPrefix = \"items[\" + itemIndex + \"]\";\n\n        if (toolbarInstance.option(itemOptionPrefix + \".options\")) {\n          toolbarInstance.option(itemOptionPrefix + \".options.disabled\", optionValue);\n        } else {\n          toolbarInstance.option(itemOptionPrefix + \".disabled\", optionValue);\n        }\n      }\n    }\n  },\n  updateToolbarDimensions: function () {\n    if (this._toolbar) {\n      (0, _visibility_change.triggerResizeEvent)(this.getHeaderPanel());\n    }\n  },\n  getHeaderPanel: function () {\n    return this.element();\n  },\n  getHeight: function () {\n    return this.getElementHeight();\n  },\n  optionChanged: function (args) {\n    if (\"onToolbarPreparing\" === args.name) {\n      this._invalidate();\n\n      args.handled = true;\n    }\n\n    this.callBase(args);\n  },\n  isVisible: function () {\n    return this._toolbarOptions && this._toolbarOptions.visible;\n  },\n  allowDragging: _common.noop\n});\n\nvar _default = {\n  defaultOptions: function () {\n    return {};\n  },\n  views: {\n    headerPanel: HeaderPanel\n  },\n  extenders: {\n    controllers: {\n      resizing: {\n        _updateDimensionsCore: function () {\n          this.callBase.apply(this, arguments);\n          this.getView(\"headerPanel\").updateToolbarDimensions();\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.header_panel.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_toolbar","_uiGrid_core","_common","_type","_visibility_change","_message","obj","__esModule","HEADER_PANEL_CLASS","TOOLBAR_BUTTON_CLASS","TOOLBAR_ARIA_LABEL","HeaderPanel","ColumnsView","inherit","_getToolbarItems","_getButtonContainer","addClass","addWidgetPrefix","_getToolbarButtonClass","specificClass","secondClass","_getToolbarOptions","options","toolbarOptions","items","onItemRendered","e","itemRenderedCallback","itemData","executeAction","isDefined","visible","toolbarItems","length","_renderCore","$headerPanel","element","label","format","component","NAME","$toolbar","attr","appendTo","_createComponent","_toolbarOptions","option","_columnOptionChanged","noop","_handleDataChanged","_requireReady","render","init","callBase","createAction","excludeValidators","apply","arguments","setToolbarItemDisabled","name","optionValue","toolbarInstance","itemIndex","indexOf","filter","item","itemOptionPrefix","updateToolbarDimensions","triggerResizeEvent","getHeaderPanel","getHeight","getElementHeight","optionChanged","args","_invalidate","handled","isVisible","allowDragging","_default","defaultOptions","views","headerPanel","extenders","controllers","resizing","_updateDimensionsCore","getView","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.header_panel.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _toolbar = _interopRequireDefault(require(\"../toolbar\"));\r\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _visibility_change = require(\"../../events/visibility_change\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nrequire(\"../drop_down_menu\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar HEADER_PANEL_CLASS = \"header-panel\";\r\nvar TOOLBAR_BUTTON_CLASS = \"toolbar-button\";\r\nvar TOOLBAR_ARIA_LABEL = \"-ariaToolbar\";\r\nvar HeaderPanel = _uiGrid_core.ColumnsView.inherit({\r\n    _getToolbarItems: function() {\r\n        return []\r\n    },\r\n    _getButtonContainer: function() {\r\n        return (0, _renderer.default)(\"<div>\").addClass(this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS))\r\n    },\r\n    _getToolbarButtonClass: function(specificClass) {\r\n        var secondClass = specificClass ? \" \" + specificClass : \"\";\r\n        return this.addWidgetPrefix(TOOLBAR_BUTTON_CLASS) + secondClass\r\n    },\r\n    _getToolbarOptions: function() {\r\n        var options = {\r\n            toolbarOptions: {\r\n                items: this._getToolbarItems(),\r\n                onItemRendered: function(e) {\r\n                    var itemRenderedCallback = e.itemData.onItemRendered;\r\n                    if (itemRenderedCallback) {\r\n                        itemRenderedCallback(e)\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.executeAction(\"onToolbarPreparing\", options);\r\n        if (options.toolbarOptions && !(0, _type.isDefined)(options.toolbarOptions.visible)) {\r\n            var toolbarItems = options.toolbarOptions.items;\r\n            options.toolbarOptions.visible = !!(toolbarItems && toolbarItems.length)\r\n        }\r\n        return options.toolbarOptions\r\n    },\r\n    _renderCore: function() {\r\n        if (!this._toolbar) {\r\n            var $headerPanel = this.element();\r\n            $headerPanel.addClass(this.addWidgetPrefix(HEADER_PANEL_CLASS));\r\n            var label = _message.default.format(this.component.NAME + TOOLBAR_ARIA_LABEL);\r\n            var $toolbar = (0, _renderer.default)(\"<div>\").attr(\"aria-label\", label).appendTo($headerPanel);\r\n            this._toolbar = this._createComponent($toolbar, _toolbar.default, this._toolbarOptions)\r\n        } else {\r\n            this._toolbar.option(this._toolbarOptions)\r\n        }\r\n    },\r\n    _columnOptionChanged: _common.noop,\r\n    _handleDataChanged: function() {\r\n        if (this._requireReady) {\r\n            this.render()\r\n        }\r\n    },\r\n    init: function() {\r\n        this.callBase();\r\n        this.createAction(\"onToolbarPreparing\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    },\r\n    render: function() {\r\n        this._toolbarOptions = this._getToolbarOptions();\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    setToolbarItemDisabled: function(name, optionValue) {\r\n        var toolbarInstance = this._toolbar;\r\n        if (toolbarInstance) {\r\n            var items = toolbarInstance.option(\"items\") || [];\r\n            var itemIndex = items.indexOf(items.filter(function(item) {\r\n                return item.name === name\r\n            })[0]);\r\n            if (itemIndex >= 0) {\r\n                var itemOptionPrefix = \"items[\" + itemIndex + \"]\";\r\n                if (toolbarInstance.option(itemOptionPrefix + \".options\")) {\r\n                    toolbarInstance.option(itemOptionPrefix + \".options.disabled\", optionValue)\r\n                } else {\r\n                    toolbarInstance.option(itemOptionPrefix + \".disabled\", optionValue)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateToolbarDimensions: function() {\r\n        if (this._toolbar) {\r\n            (0, _visibility_change.triggerResizeEvent)(this.getHeaderPanel())\r\n        }\r\n    },\r\n    getHeaderPanel: function() {\r\n        return this.element()\r\n    },\r\n    getHeight: function() {\r\n        return this.getElementHeight()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"onToolbarPreparing\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    isVisible: function() {\r\n        return this._toolbarOptions && this._toolbarOptions.visible\r\n    },\r\n    allowDragging: _common.noop\r\n});\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {}\r\n    },\r\n    views: {\r\n        headerPanel: HeaderPanel\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            resizing: {\r\n                _updateDimensionsCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this.getView(\"headerPanel\").updateToolbarDimensions()\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}