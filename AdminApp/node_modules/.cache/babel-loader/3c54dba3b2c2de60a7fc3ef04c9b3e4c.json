{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _uiGrid_core2 = require(\"./ui.grid_core.columns_view\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _themes = require(\"../themes\");\n\nvar _button = _interopRequireDefault(require(\"../button\"));\n\nvar _tree_view = _interopRequireDefault(require(\"../tree_view\"));\n\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\n\nvar _popup = _interopRequireDefault(require(\"../popup\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\nvar CLICK_TIMEOUT = 300;\n\nvar processItems = function (that, chooserColumns) {\n  var items = [];\n  var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\n\n  if (chooserColumns.length) {\n    (0, _iterator.each)(chooserColumns, function (index, column) {\n      var item = {\n        text: column.caption,\n        cssClass: column.cssClass,\n        allowHiding: column.allowHiding,\n        expanded: true,\n        id: column.index,\n        disabled: false,\n        disableCheckBox: false === column.allowHiding,\n        parentId: (0, _type.isDefined)(column.ownerBand) ? column.ownerBand : null\n      };\n\n      if (isSelectMode) {\n        item.selected = column.visible;\n      }\n\n      items.push(item);\n    });\n  }\n\n  return items;\n};\n\nvar ColumnChooserController = _uiGrid_core.default.ViewController.inherit({\n  renderShowColumnChooserButton: function ($element) {\n    var that = this;\n    var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\n    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n    var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\n    var $columnChooserButton;\n\n    if (columnChooserEnabled) {\n      if (!$showColumnChooserButton.length) {\n        $columnChooserButton = (0, _renderer.default)(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\n\n        that._createComponent($columnChooserButton, _button.default, {\n          icon: COLUMN_CHOOSER_ICON_NAME,\n          onClick: function () {\n            that.getView(\"columnChooserView\").showColumnChooser();\n          },\n          hint: that.option(\"columnChooser.title\"),\n          integrationOptions: {}\n        });\n      } else {\n        $showColumnChooserButton.show();\n      }\n    } else {\n      $showColumnChooserButton.hide();\n    }\n  },\n  getPosition: function () {\n    var rowsView = this.getView(\"rowsView\");\n    return {\n      my: \"right bottom\",\n      at: \"right bottom\",\n      of: rowsView && rowsView.element(),\n      collision: \"fit\",\n      offset: \"-2 -2\",\n      boundaryOffset: \"2 2\"\n    };\n  }\n});\n\nvar ColumnChooserView = _uiGrid_core2.ColumnsView.inherit({\n  _resizeCore: _common.noop,\n  _isWinDevice: function () {\n    return !!_devices.default.real().win;\n  },\n  _updateList: function (change) {\n    var items;\n\n    var $popupContent = this._popupContainer.$content();\n\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    var columnChooserList = this._columnChooserList;\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\n      items = processItems(this, chooserColumns);\n\n      for (var i = 0; i < items.length; i++) {\n        var selected = items[i].selected;\n        var id = items[i].id;\n\n        if (id === change.columnIndex) {\n          if (selected) {\n            columnChooserList.selectItem(id, selected);\n          } else {\n            columnChooserList.unselectItem(id, selected);\n          }\n        }\n      }\n    } else {\n      if (!isSelectMode || !columnChooserList || \"full\" === change) {\n        this._popupContainer._wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\n\n        items = processItems(this, chooserColumns);\n\n        this._renderTreeView($popupContent, items);\n      }\n    }\n  },\n  _initializePopupContainer: function () {\n    var that = this;\n    var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));\n    var columnChooserOptions = that.option(\"columnChooser\");\n    var themeName = (0, _themes.current)();\n    var isGenericTheme = (0, _themes.isGeneric)(themeName);\n    var isMaterial = (0, _themes.isMaterial)(themeName);\n    var dxPopupOptions = {\n      visible: false,\n      shading: false,\n      showCloseButton: false,\n      dragEnabled: true,\n      resizeEnabled: true,\n      toolbarItems: [{\n        text: columnChooserOptions.title,\n        toolbar: \"top\",\n        location: isGenericTheme || isMaterial ? \"before\" : \"center\"\n      }],\n      position: that.getController(\"columnChooser\").getPosition(),\n      width: columnChooserOptions.width,\n      height: columnChooserOptions.height,\n      rtlEnabled: that.option(\"rtlEnabled\"),\n      onHidden: function () {\n        if (that._isWinDevice()) {\n          (0, _renderer.default)(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n        }\n      },\n      container: columnChooserOptions.container\n    };\n\n    if (isGenericTheme || isMaterial) {\n      (0, _extend.extend)(dxPopupOptions, {\n        showCloseButton: true\n      });\n    } else {\n      dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\n        shortcut: \"cancel\"\n      };\n    }\n\n    if (!(0, _type.isDefined)(this._popupContainer)) {\n      that._popupContainer = that._createComponent($element, _popup.default, dxPopupOptions);\n\n      that._popupContainer.on(\"optionChanged\", function (args) {\n        if (\"visible\" === args.name) {\n          that.renderCompleted.fire();\n        }\n      });\n    } else {\n      this._popupContainer.option(dxPopupOptions);\n    }\n  },\n  _renderCore: function (change) {\n    if (this._popupContainer) {\n      this._updateList(change);\n    }\n  },\n  _renderTreeView: function ($container, items) {\n    var that = this;\n    var columnChooser = this.option(\"columnChooser\");\n    var isSelectMode = \"select\" === columnChooser.mode;\n    var treeViewConfig = {\n      items: items,\n      dataStructure: \"plain\",\n      activeStateEnabled: true,\n      focusStateEnabled: true,\n      hoverStateEnabled: true,\n      itemTemplate: \"item\",\n      showCheckBoxesMode: \"none\",\n      rootValue: null,\n      searchEnabled: columnChooser.allowSearch,\n      searchTimeout: columnChooser.searchTimeout,\n      onItemRendered: function (e) {\n        if (e.itemData.disableCheckBox) {\n          var $treeViewNode = (0, _renderer.default)(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\n          var $checkBox;\n\n          if ($treeViewNode.length) {\n            $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\n\n            if ($checkBox.length) {\n              var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\n              checkBoxInstance && checkBoxInstance.option(\"disabled\", true);\n            }\n          }\n        }\n      }\n    };\n    var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\n    var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\n\n    if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS));\n    }\n\n    treeViewConfig.onContentReady = function (e) {\n      (0, _common.deferUpdate)(function () {\n        if (scrollTop) {\n          var scrollable = (0, _renderer.default)(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\n          scrollable && scrollable.scrollTo({\n            y: scrollTop\n          });\n        }\n\n        that.renderCompleted.fire();\n      });\n    };\n\n    if (this._isWinDevice()) {\n      treeViewConfig.useNativeScrolling = false;\n    }\n\n    (0, _extend.extend)(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\n\n    if (this._columnChooserList) {\n      if (!treeViewConfig.searchEnabled) {\n        treeViewConfig.searchValue = \"\";\n      }\n\n      this._columnChooserList.option(treeViewConfig);\n    } else {\n      this._columnChooserList = this._createComponent($container, _tree_view.default, treeViewConfig);\n      $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS));\n    }\n  },\n  _prepareDragModeConfig: function () {\n    var columnChooserOptions = this.option(\"columnChooser\");\n    return {\n      noDataText: columnChooserOptions.emptyPanelText,\n      activeStateEnabled: false,\n      focusStateEnabled: false,\n      hoverStateEnabled: false,\n      itemTemplate: function (data, index, item) {\n        (0, _renderer.default)(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS);\n      }\n    };\n  },\n  _prepareSelectModeConfig: function () {\n    var that = this;\n\n    var selectionChangedHandler = function (e) {\n      var visibleColumns = that._columnsController.getVisibleColumns().filter(function (item) {\n        return !item.command;\n      });\n\n      var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\n\n      if (isLastColumnUnselected) {\n        e.component.selectItem(e.itemElement);\n      } else {\n        setTimeout(function () {\n          that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected);\n        }, CLICK_TIMEOUT);\n      }\n    };\n\n    return {\n      selectNodesRecursive: false,\n      showCheckBoxesMode: \"normal\",\n      onItemSelectionChanged: selectionChangedHandler\n    };\n  },\n  _columnOptionChanged: function (e) {\n    var changeTypes = e.changeTypes;\n    var optionNames = e.optionNames;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n    this.callBase(e);\n\n    if (isSelectMode) {\n      var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\n      var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\n\n      if (needPartialRender) {\n        this.render(null, {\n          changeType: \"selection\",\n          columnIndex: e.columnIndex\n        });\n      } else {\n        if (needFullRender) {\n          this.render(null, \"full\");\n        }\n      }\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"columnChooser\":\n        this._initializePopupContainer();\n\n        this.render(null, \"full\");\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  getColumnElements: function () {\n    var result = [];\n    var $node;\n    var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\n\n    var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\n\n    var $content = this._popupContainer && this._popupContainer.$content();\n\n    var $nodes = $content && $content.find(\".dx-treeview-node\");\n\n    if ($nodes) {\n      chooserColumns.forEach(function (column) {\n        $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\n        var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\n        result.push(item);\n      });\n    }\n\n    return (0, _renderer.default)(result);\n  },\n  getName: function () {\n    return \"columnChooser\";\n  },\n  getColumns: function () {\n    return this._columnsController.getChooserColumns();\n  },\n  allowDragging: function (column, sourceLocation) {\n    var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\n\n    return this.isColumnChooserVisible() && columnVisible;\n  },\n  getBoundingRect: function () {\n    var that = this;\n\n    var container = that._popupContainer && that._popupContainer._container();\n\n    if (container && container.is(\":visible\")) {\n      var offset = container.offset();\n      return {\n        left: offset.left,\n        top: offset.top,\n        right: offset.left + container.outerWidth(),\n        bottom: offset.top + container.outerHeight()\n      };\n    }\n\n    return null;\n  },\n  showColumnChooser: function () {\n    if (!this._popupContainer) {\n      this._initializePopupContainer();\n\n      this.render();\n    }\n\n    this._popupContainer.show();\n\n    if (this._isWinDevice()) {\n      (0, _renderer.default)(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS));\n    }\n  },\n  hideColumnChooser: function () {\n    if (this._popupContainer) {\n      this._popupContainer.hide();\n    }\n  },\n  isColumnChooserVisible: function () {\n    var popupContainer = this._popupContainer;\n    return popupContainer && popupContainer.option(\"visible\");\n  },\n  publicMethods: function () {\n    return [\"showColumnChooser\", \"hideColumnChooser\"];\n  }\n});\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      columnChooser: {\n        enabled: false,\n        allowSearch: false,\n        searchTimeout: 500,\n        mode: \"dragAndDrop\",\n        width: 250,\n        height: 260,\n        title: _message.default.format(\"dxDataGrid-columnChooserTitle\"),\n        emptyPanelText: _message.default.format(\"dxDataGrid-columnChooserEmptyText\"),\n        container: void 0\n      }\n    };\n  },\n  controllers: {\n    columnChooser: ColumnChooserController\n  },\n  views: {\n    columnChooserView: ColumnChooserView\n  },\n  extenders: {\n    views: {\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          return this._appendColumnChooserItem(items);\n        },\n        _appendColumnChooserItem: function (items) {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n\n          if (columnChooserEnabled) {\n            var onClickHandler = function () {\n              that.component.getView(\"columnChooserView\").showColumnChooser();\n            };\n\n            var onInitialized = function (e) {\n              (0, _renderer.default)(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)));\n            };\n\n            var hintText = that.option(\"columnChooser.title\");\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: COLUMN_CHOOSER_ICON_NAME,\n                onClick: onClickHandler,\n                hint: hintText,\n                text: hintText,\n                onInitialized: onInitialized\n              },\n              showText: \"inMenu\",\n              location: \"after\",\n              name: \"columnChooserButton\",\n              locateInMenu: \"auto\",\n              sortIndex: 40\n            };\n            items.push(toolbarItem);\n          }\n\n          return items;\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"columnChooser\":\n              this._invalidate();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var that = this;\n          var columnChooserEnabled = that.option(\"columnChooser.enabled\");\n          return that.callBase() || columnChooserEnabled;\n        }\n      }\n    },\n    controllers: {\n      columns: {\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var columnChooserMode = this.option(\"columnChooser.mode\");\n          var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\n          return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation);\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.column_chooser.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_common","_uiGrid_core","_uiGrid_core2","_message","_themes","_button","_tree_view","_devices","_popup","_type","_extend","_iterator","obj","__esModule","COLUMN_CHOOSER_CLASS","COLUMN_CHOOSER_BUTTON_CLASS","NOTOUCH_ACTION_CLASS","COLUMN_CHOOSER_LIST_CLASS","COLUMN_CHOOSER_PLAIN_CLASS","COLUMN_CHOOSER_DRAG_CLASS","COLUMN_CHOOSER_SELECT_CLASS","COLUMN_CHOOSER_ICON_NAME","COLUMN_CHOOSER_ITEM_CLASS","TREEVIEW_NODE_SELECTOR","CHECKBOX_SELECTOR","CLICK_TIMEOUT","processItems","that","chooserColumns","items","isSelectMode","option","length","each","index","column","item","text","caption","cssClass","allowHiding","expanded","id","disabled","disableCheckBox","parentId","isDefined","ownerBand","selected","visible","push","ColumnChooserController","ViewController","inherit","renderShowColumnChooserButton","$element","columnChooserButtonClass","addWidgetPrefix","columnChooserEnabled","$showColumnChooserButton","find","$columnChooserButton","addClass","appendTo","_createComponent","icon","onClick","getView","showColumnChooser","hint","integrationOptions","show","hide","getPosition","rowsView","my","at","of","element","collision","offset","boundaryOffset","ColumnChooserView","ColumnsView","_resizeCore","noop","_isWinDevice","real","win","_updateList","change","$popupContent","_popupContainer","$content","columnChooserList","_columnChooserList","_columnsController","getChooserColumns","changeType","i","columnIndex","selectItem","unselectItem","_wrapper","toggleClass","_renderTreeView","_initializePopupContainer","columnChooserOptions","themeName","current","isGenericTheme","isGeneric","isMaterial","dxPopupOptions","shading","showCloseButton","dragEnabled","resizeEnabled","toolbarItems","title","toolbar","location","position","getController","width","height","rtlEnabled","onHidden","removeClass","container","extend","shortcut","on","args","name","renderCompleted","fire","_renderCore","$container","columnChooser","mode","treeViewConfig","dataStructure","activeStateEnabled","focusStateEnabled","hoverStateEnabled","itemTemplate","showCheckBoxesMode","rootValue","searchEnabled","allowSearch","searchTimeout","onItemRendered","e","itemData","$treeViewNode","itemElement","closest","$checkBox","checkBoxInstance","data","scrollableInstance","scrollTop","isBandColumnsUsed","onContentReady","deferUpdate","scrollable","scrollTo","y","useNativeScrolling","_prepareSelectModeConfig","_prepareDragModeConfig","searchValue","noDataText","emptyPanelText","parent","selectionChangedHandler","visibleColumns","getVisibleColumns","filter","command","isLastColumnUnselected","component","setTimeout","columnOption","selectNodesRecursive","onItemSelectionChanged","_columnOptionChanged","changeTypes","optionNames","callBase","needPartialRender","needFullRender","showInColumnChooser","columns","all","render","optionChanged","getColumnElements","result","$node","$nodes","forEach","children","get","getName","getColumns","allowDragging","sourceLocation","columnVisible","isParentColumnVisible","isColumnChooserVisible","getBoundingRect","_container","is","left","top","right","outerWidth","bottom","outerHeight","hideColumnChooser","popupContainer","publicMethods","_default","defaultOptions","enabled","format","controllers","views","columnChooserView","extenders","headerPanel","_getToolbarItems","_appendColumnChooserItem","onClickHandler","onInitialized","_getToolbarButtonClass","hintText","toolbarItem","widget","options","showText","locateInMenu","sortIndex","_invalidate","handled","isVisible","allowMoveColumn","fromVisibleIndex","toVisibleIndex","targetLocation","columnChooserMode","isMoveColumnDisallowed","module"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,OAAO,CAACC,OAAR,GAAkB,KAAK,CAAvB;;AACA,IAAIC,SAAS,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAAtC;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIE,YAAY,GAAGH,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAAzC;;AACA,IAAIG,aAAa,GAAGH,OAAO,CAAC,6BAAD,CAA3B;;AACA,IAAII,QAAQ,GAAGL,sBAAsB,CAACC,OAAO,CAAC,4BAAD,CAAR,CAArC;;AACA,IAAIK,OAAO,GAAGL,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIM,OAAO,GAAGP,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAApC;;AACA,IAAIO,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAvC;;AACA,IAAIQ,QAAQ,GAAGT,sBAAsB,CAACC,OAAO,CAAC,oBAAD,CAAR,CAArC;;AACA,IAAIS,MAAM,GAAGV,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAAnC;;AACA,IAAIU,KAAK,GAAGV,OAAO,CAAC,uBAAD,CAAnB;;AACA,IAAIW,OAAO,GAAGX,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIY,SAAS,GAAGZ,OAAO,CAAC,2BAAD,CAAvB;;AAEA,SAASD,sBAAT,CAAgCc,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,oBAAoB,GAAG,gBAA3B;AACA,IAAIC,2BAA2B,GAAG,uBAAlC;AACA,IAAIC,oBAAoB,GAAG,gBAA3B;AACA,IAAIC,yBAAyB,GAAG,qBAAhC;AACA,IAAIC,0BAA0B,GAAG,sBAAjC;AACA,IAAIC,yBAAyB,GAAG,0BAAhC;AACA,IAAIC,2BAA2B,GAAG,4BAAlC;AACA,IAAIC,wBAAwB,GAAG,gBAA/B;AACA,IAAIC,yBAAyB,GAAG,wBAAhC;AACA,IAAIC,sBAAsB,GAAG,mBAA7B;AACA,IAAIC,iBAAiB,GAAG,cAAxB;AACA,IAAIC,aAAa,GAAG,GAApB;;AACA,IAAIC,YAAY,GAAG,UAASC,IAAT,EAAeC,cAAf,EAA+B;AAC9C,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,YAAY,GAAG,aAAaH,IAAI,CAACI,MAAL,CAAY,oBAAZ,CAAhC;;AACA,MAAIH,cAAc,CAACI,MAAnB,EAA2B;AACvB,KAAC,GAAGrB,SAAS,CAACsB,IAAd,EAAoBL,cAApB,EAAoC,UAASM,KAAT,EAAgBC,MAAhB,EAAwB;AACxD,UAAIC,IAAI,GAAG;AACPC,QAAAA,IAAI,EAAEF,MAAM,CAACG,OADN;AAEPC,QAAAA,QAAQ,EAAEJ,MAAM,CAACI,QAFV;AAGPC,QAAAA,WAAW,EAAEL,MAAM,CAACK,WAHb;AAIPC,QAAAA,QAAQ,EAAE,IAJH;AAKPC,QAAAA,EAAE,EAAEP,MAAM,CAACD,KALJ;AAMPS,QAAAA,QAAQ,EAAE,KANH;AAOPC,QAAAA,eAAe,EAAE,UAAUT,MAAM,CAACK,WAP3B;AAQPK,QAAAA,QAAQ,EAAE,CAAC,GAAGpC,KAAK,CAACqC,SAAV,EAAqBX,MAAM,CAACY,SAA5B,IAAyCZ,MAAM,CAACY,SAAhD,GAA4D;AAR/D,OAAX;;AAUA,UAAIjB,YAAJ,EAAkB;AACdM,QAAAA,IAAI,CAACY,QAAL,GAAgBb,MAAM,CAACc,OAAvB;AACH;;AACDpB,MAAAA,KAAK,CAACqB,IAAN,CAAWd,IAAX;AACH,KAfD;AAgBH;;AACD,SAAOP,KAAP;AACH,CAtBD;;AAuBA,IAAIsB,uBAAuB,GAAGlD,YAAY,CAACL,OAAb,CAAqBwD,cAArB,CAAoCC,OAApC,CAA4C;AACtEC,EAAAA,6BAA6B,EAAE,UAASC,QAAT,EAAmB;AAC9C,QAAI5B,IAAI,GAAG,IAAX;AACA,QAAI6B,wBAAwB,GAAG7B,IAAI,CAAC8B,eAAL,CAAqB1C,2BAArB,CAA/B;AACA,QAAI2C,oBAAoB,GAAG/B,IAAI,CAACI,MAAL,CAAY,uBAAZ,CAA3B;AACA,QAAI4B,wBAAwB,GAAGJ,QAAQ,CAACK,IAAT,CAAc,MAAMJ,wBAApB,CAA/B;AACA,QAAIK,oBAAJ;;AACA,QAAIH,oBAAJ,EAA0B;AACtB,UAAI,CAACC,wBAAwB,CAAC3B,MAA9B,EAAsC;AAClC6B,QAAAA,oBAAoB,GAAG,CAAC,GAAGhE,SAAS,CAACD,OAAd,EAAuB,OAAvB,EAAgCkE,QAAhC,CAAyCN,wBAAzC,EAAmEO,QAAnE,CAA4ER,QAA5E,CAAvB;;AACA5B,QAAAA,IAAI,CAACqC,gBAAL,CAAsBH,oBAAtB,EAA4CxD,OAAO,CAACT,OAApD,EAA6D;AACzDqE,UAAAA,IAAI,EAAE5C,wBADmD;AAEzD6C,UAAAA,OAAO,EAAE,YAAW;AAChBvC,YAAAA,IAAI,CAACwC,OAAL,CAAa,mBAAb,EAAkCC,iBAAlC;AACH,WAJwD;AAKzDC,UAAAA,IAAI,EAAE1C,IAAI,CAACI,MAAL,CAAY,qBAAZ,CALmD;AAMzDuC,UAAAA,kBAAkB,EAAE;AANqC,SAA7D;AAQH,OAVD,MAUO;AACHX,QAAAA,wBAAwB,CAACY,IAAzB;AACH;AACJ,KAdD,MAcO;AACHZ,MAAAA,wBAAwB,CAACa,IAAzB;AACH;AACJ,GAxBqE;AAyBtEC,EAAAA,WAAW,EAAE,YAAW;AACpB,QAAIC,QAAQ,GAAG,KAAKP,OAAL,CAAa,UAAb,CAAf;AACA,WAAO;AACHQ,MAAAA,EAAE,EAAE,cADD;AAEHC,MAAAA,EAAE,EAAE,cAFD;AAGHC,MAAAA,EAAE,EAAEH,QAAQ,IAAIA,QAAQ,CAACI,OAAT,EAHb;AAIHC,MAAAA,SAAS,EAAE,KAJR;AAKHC,MAAAA,MAAM,EAAE,OALL;AAMHC,MAAAA,cAAc,EAAE;AANb,KAAP;AAQH;AAnCqE,CAA5C,CAA9B;;AAqCA,IAAIC,iBAAiB,GAAGhF,aAAa,CAACiF,WAAd,CAA0B9B,OAA1B,CAAkC;AACtD+B,EAAAA,WAAW,EAAEpF,OAAO,CAACqF,IADiC;AAEtDC,EAAAA,YAAY,EAAE,YAAW;AACrB,WAAO,CAAC,CAAC/E,QAAQ,CAACX,OAAT,CAAiB2F,IAAjB,GAAwBC,GAAjC;AACH,GAJqD;AAKtDC,EAAAA,WAAW,EAAE,UAASC,MAAT,EAAiB;AAC1B,QAAI7D,KAAJ;;AACA,QAAI8D,aAAa,GAAG,KAAKC,eAAL,CAAqBC,QAArB,EAApB;;AACA,QAAI/D,YAAY,GAAG,aAAa,KAAKC,MAAL,CAAY,oBAAZ,CAAhC;AACA,QAAI+D,iBAAiB,GAAG,KAAKC,kBAA7B;;AACA,QAAInE,cAAc,GAAG,KAAKoE,kBAAL,CAAwBC,iBAAxB,CAA0CnE,YAA1C,CAArB;;AACA,QAAIA,YAAY,IAAIgE,iBAAhB,IAAqCJ,MAArC,IAA+C,gBAAgBA,MAAM,CAACQ,UAA1E,EAAsF;AAClFrE,MAAAA,KAAK,GAAGH,YAAY,CAAC,IAAD,EAAOE,cAAP,CAApB;;AACA,WAAK,IAAIuE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtE,KAAK,CAACG,MAA1B,EAAkCmE,CAAC,EAAnC,EAAuC;AACnC,YAAInD,QAAQ,GAAGnB,KAAK,CAACsE,CAAD,CAAL,CAASnD,QAAxB;AACA,YAAIN,EAAE,GAAGb,KAAK,CAACsE,CAAD,CAAL,CAASzD,EAAlB;;AACA,YAAIA,EAAE,KAAKgD,MAAM,CAACU,WAAlB,EAA+B;AAC3B,cAAIpD,QAAJ,EAAc;AACV8C,YAAAA,iBAAiB,CAACO,UAAlB,CAA6B3D,EAA7B,EAAiCM,QAAjC;AACH,WAFD,MAEO;AACH8C,YAAAA,iBAAiB,CAACQ,YAAlB,CAA+B5D,EAA/B,EAAmCM,QAAnC;AACH;AACJ;AACJ;AACJ,KAbD,MAaO;AACH,UAAI,CAAClB,YAAD,IAAiB,CAACgE,iBAAlB,IAAuC,WAAWJ,MAAtD,EAA8D;AAC1D,aAAKE,eAAL,CAAqBW,QAArB,GAAgCC,WAAhC,CAA4C,KAAK/C,eAAL,CAAqBtC,yBAArB,CAA5C,EAA6F,CAACW,YAA9F,EAA4G0E,WAA5G,CAAwH,KAAK/C,eAAL,CAAqBrC,2BAArB,CAAxH,EAA2KU,YAA3K;;AACAD,QAAAA,KAAK,GAAGH,YAAY,CAAC,IAAD,EAAOE,cAAP,CAApB;;AACA,aAAK6E,eAAL,CAAqBd,aAArB,EAAoC9D,KAApC;AACH;AACJ;AACJ,GA/BqD;AAgCtD6E,EAAAA,yBAAyB,EAAE,YAAW;AAClC,QAAI/E,IAAI,GAAG,IAAX;AACA,QAAI4B,QAAQ,GAAG5B,IAAI,CAACmD,OAAL,GAAehB,QAAf,CAAwBnC,IAAI,CAAC8B,eAAL,CAAqB3C,oBAArB,CAAxB,CAAf;AACA,QAAI6F,oBAAoB,GAAGhF,IAAI,CAACI,MAAL,CAAY,eAAZ,CAA3B;AACA,QAAI6E,SAAS,GAAG,CAAC,GAAGxG,OAAO,CAACyG,OAAZ,GAAhB;AACA,QAAIC,cAAc,GAAG,CAAC,GAAG1G,OAAO,CAAC2G,SAAZ,EAAuBH,SAAvB,CAArB;AACA,QAAII,UAAU,GAAG,CAAC,GAAG5G,OAAO,CAAC4G,UAAZ,EAAwBJ,SAAxB,CAAjB;AACA,QAAIK,cAAc,GAAG;AACjBhE,MAAAA,OAAO,EAAE,KADQ;AAEjBiE,MAAAA,OAAO,EAAE,KAFQ;AAGjBC,MAAAA,eAAe,EAAE,KAHA;AAIjBC,MAAAA,WAAW,EAAE,IAJI;AAKjBC,MAAAA,aAAa,EAAE,IALE;AAMjBC,MAAAA,YAAY,EAAE,CAAC;AACXjF,QAAAA,IAAI,EAAEsE,oBAAoB,CAACY,KADhB;AAEXC,QAAAA,OAAO,EAAE,KAFE;AAGXC,QAAAA,QAAQ,EAAEX,cAAc,IAAIE,UAAlB,GAA+B,QAA/B,GAA0C;AAHzC,OAAD,CANG;AAWjBU,MAAAA,QAAQ,EAAE/F,IAAI,CAACgG,aAAL,CAAmB,eAAnB,EAAoClD,WAApC,EAXO;AAYjBmD,MAAAA,KAAK,EAAEjB,oBAAoB,CAACiB,KAZX;AAajBC,MAAAA,MAAM,EAAElB,oBAAoB,CAACkB,MAbZ;AAcjBC,MAAAA,UAAU,EAAEnG,IAAI,CAACI,MAAL,CAAY,YAAZ,CAdK;AAejBgG,MAAAA,QAAQ,EAAE,YAAW;AACjB,YAAIpG,IAAI,CAAC2D,YAAL,EAAJ,EAAyB;AACrB,WAAC,GAAGzF,SAAS,CAACD,OAAd,EAAuB,MAAvB,EAA+BoI,WAA/B,CAA2CrG,IAAI,CAAC8B,eAAL,CAAqBzC,oBAArB,CAA3C;AACH;AACJ,OAnBgB;AAoBjBiH,MAAAA,SAAS,EAAEtB,oBAAoB,CAACsB;AApBf,KAArB;;AAsBA,QAAInB,cAAc,IAAIE,UAAtB,EAAkC;AAC9B,OAAC,GAAGtG,OAAO,CAACwH,MAAZ,EAAoBjB,cAApB,EAAoC;AAChCE,QAAAA,eAAe,EAAE;AADe,OAApC;AAGH,KAJD,MAIO;AACHF,MAAAA,cAAc,CAACK,YAAf,CAA4BL,cAAc,CAACK,YAAf,CAA4BtF,MAAxD,IAAkE;AAC9DmG,QAAAA,QAAQ,EAAE;AADoD,OAAlE;AAGH;;AACD,QAAI,CAAC,CAAC,GAAG1H,KAAK,CAACqC,SAAV,EAAqB,KAAK8C,eAA1B,CAAL,EAAiD;AAC7CjE,MAAAA,IAAI,CAACiE,eAAL,GAAuBjE,IAAI,CAACqC,gBAAL,CAAsBT,QAAtB,EAAgC/C,MAAM,CAACZ,OAAvC,EAAgDqH,cAAhD,CAAvB;;AACAtF,MAAAA,IAAI,CAACiE,eAAL,CAAqBwC,EAArB,CAAwB,eAAxB,EAAyC,UAASC,IAAT,EAAe;AACpD,YAAI,cAAcA,IAAI,CAACC,IAAvB,EAA6B;AACzB3G,UAAAA,IAAI,CAAC4G,eAAL,CAAqBC,IAArB;AACH;AACJ,OAJD;AAKH,KAPD,MAOO;AACH,WAAK5C,eAAL,CAAqB7D,MAArB,CAA4BkF,cAA5B;AACH;AACJ,GAhFqD;AAiFtDwB,EAAAA,WAAW,EAAE,UAAS/C,MAAT,EAAiB;AAC1B,QAAI,KAAKE,eAAT,EAA0B;AACtB,WAAKH,WAAL,CAAiBC,MAAjB;AACH;AACJ,GArFqD;AAsFtDe,EAAAA,eAAe,EAAE,UAASiC,UAAT,EAAqB7G,KAArB,EAA4B;AACzC,QAAIF,IAAI,GAAG,IAAX;AACA,QAAIgH,aAAa,GAAG,KAAK5G,MAAL,CAAY,eAAZ,CAApB;AACA,QAAID,YAAY,GAAG,aAAa6G,aAAa,CAACC,IAA9C;AACA,QAAIC,cAAc,GAAG;AACjBhH,MAAAA,KAAK,EAAEA,KADU;AAEjBiH,MAAAA,aAAa,EAAE,OAFE;AAGjBC,MAAAA,kBAAkB,EAAE,IAHH;AAIjBC,MAAAA,iBAAiB,EAAE,IAJF;AAKjBC,MAAAA,iBAAiB,EAAE,IALF;AAMjBC,MAAAA,YAAY,EAAE,MANG;AAOjBC,MAAAA,kBAAkB,EAAE,MAPH;AAQjBC,MAAAA,SAAS,EAAE,IARM;AASjBC,MAAAA,aAAa,EAAEV,aAAa,CAACW,WATZ;AAUjBC,MAAAA,aAAa,EAAEZ,aAAa,CAACY,aAVZ;AAWjBC,MAAAA,cAAc,EAAE,UAASC,CAAT,EAAY;AACxB,YAAIA,CAAC,CAACC,QAAF,CAAW9G,eAAf,EAAgC;AAC5B,cAAI+G,aAAa,GAAG,CAAC,GAAG9J,SAAS,CAACD,OAAd,EAAuB6J,CAAC,CAACG,WAAzB,EAAsCC,OAAtC,CAA8CtI,sBAA9C,CAApB;AACA,cAAIuI,SAAJ;;AACA,cAAIH,aAAa,CAAC3H,MAAlB,EAA0B;AACtB8H,YAAAA,SAAS,GAAGH,aAAa,CAAC/F,IAAd,CAAmBpC,iBAAnB,CAAZ;;AACA,gBAAIsI,SAAS,CAAC9H,MAAd,EAAsB;AAClB,kBAAI+H,gBAAgB,GAAGD,SAAS,CAACE,IAAV,CAAe,YAAf,CAAvB;AACAD,cAAAA,gBAAgB,IAAIA,gBAAgB,CAAChI,MAAjB,CAAwB,UAAxB,EAAoC,IAApC,CAApB;AACH;AACJ;AACJ;AACJ;AAvBgB,KAArB;AAyBA,QAAIkI,kBAAkB,GAAGvB,UAAU,CAAC9E,IAAX,CAAgB,gBAAhB,EAAkCoG,IAAlC,CAAuC,cAAvC,CAAzB;AACA,QAAIE,SAAS,GAAGD,kBAAkB,IAAIA,kBAAkB,CAACC,SAAnB,EAAtC;;AACA,QAAIpI,YAAY,IAAI,CAAC,KAAKkE,kBAAL,CAAwBmE,iBAAxB,EAArB,EAAkE;AAC9DzB,MAAAA,UAAU,CAAC5E,QAAX,CAAoB,KAAKL,eAAL,CAAqBvC,0BAArB,CAApB;AACH;;AACD2H,IAAAA,cAAc,CAACuB,cAAf,GAAgC,UAASX,CAAT,EAAY;AACxC,OAAC,GAAGzJ,OAAO,CAACqK,WAAZ,EAAyB,YAAW;AAChC,YAAIH,SAAJ,EAAe;AACX,cAAII,UAAU,GAAG,CAAC,GAAGzK,SAAS,CAACD,OAAd,EAAuB6J,CAAC,CAAC3E,OAAzB,EAAkClB,IAAlC,CAAuC,gBAAvC,EAAyDoG,IAAzD,CAA8D,cAA9D,CAAjB;AACAM,UAAAA,UAAU,IAAIA,UAAU,CAACC,QAAX,CAAoB;AAC9BC,YAAAA,CAAC,EAAEN;AAD2B,WAApB,CAAd;AAGH;;AACDvI,QAAAA,IAAI,CAAC4G,eAAL,CAAqBC,IAArB;AACH,OARD;AASH,KAVD;;AAWA,QAAI,KAAKlD,YAAL,EAAJ,EAAyB;AACrBuD,MAAAA,cAAc,CAAC4B,kBAAf,GAAoC,KAApC;AACH;;AAAA,KAAC,GAAG/J,OAAO,CAACwH,MAAZ,EAAoBW,cAApB,EAAoC/G,YAAY,GAAG,KAAK4I,wBAAL,EAAH,GAAqC,KAAKC,sBAAL,EAArF;;AACD,QAAI,KAAK5E,kBAAT,EAA6B;AACzB,UAAI,CAAC8C,cAAc,CAACQ,aAApB,EAAmC;AAC/BR,QAAAA,cAAc,CAAC+B,WAAf,GAA6B,EAA7B;AACH;;AACD,WAAK7E,kBAAL,CAAwBhE,MAAxB,CAA+B8G,cAA/B;AACH,KALD,MAKO;AACH,WAAK9C,kBAAL,GAA0B,KAAK/B,gBAAL,CAAsB0E,UAAtB,EAAkCpI,UAAU,CAACV,OAA7C,EAAsDiJ,cAAtD,CAA1B;AACAH,MAAAA,UAAU,CAAC5E,QAAX,CAAoB,KAAKL,eAAL,CAAqBxC,yBAArB,CAApB;AACH;AACJ,GA/IqD;AAgJtD0J,EAAAA,sBAAsB,EAAE,YAAW;AAC/B,QAAIhE,oBAAoB,GAAG,KAAK5E,MAAL,CAAY,eAAZ,CAA3B;AACA,WAAO;AACH8I,MAAAA,UAAU,EAAElE,oBAAoB,CAACmE,cAD9B;AAEH/B,MAAAA,kBAAkB,EAAE,KAFjB;AAGHC,MAAAA,iBAAiB,EAAE,KAHhB;AAIHC,MAAAA,iBAAiB,EAAE,KAJhB;AAKHC,MAAAA,YAAY,EAAE,UAASc,IAAT,EAAe9H,KAAf,EAAsBE,IAAtB,EAA4B;AACtC,SAAC,GAAGvC,SAAS,CAACD,OAAd,EAAuBwC,IAAvB,EAA6BC,IAA7B,CAAkC2H,IAAI,CAAC3H,IAAvC,EAA6C0I,MAA7C,GAAsDjH,QAAtD,CAA+DkG,IAAI,CAACzH,QAApE,EAA8EuB,QAA9E,CAAuFxC,yBAAvF;AACH;AAPE,KAAP;AASH,GA3JqD;AA4JtDoJ,EAAAA,wBAAwB,EAAE,YAAW;AACjC,QAAI/I,IAAI,GAAG,IAAX;;AACA,QAAIqJ,uBAAuB,GAAG,UAASvB,CAAT,EAAY;AACtC,UAAIwB,cAAc,GAAGtJ,IAAI,CAACqE,kBAAL,CAAwBkF,iBAAxB,GAA4CC,MAA5C,CAAmD,UAAS/I,IAAT,EAAe;AACnF,eAAO,CAACA,IAAI,CAACgJ,OAAb;AACH,OAFoB,CAArB;;AAGA,UAAIC,sBAAsB,GAAG,MAAMJ,cAAc,CAACjJ,MAArB,IAA+B,CAACyH,CAAC,CAACC,QAAF,CAAW1G,QAAxE;;AACA,UAAIqI,sBAAJ,EAA4B;AACxB5B,QAAAA,CAAC,CAAC6B,SAAF,CAAYjF,UAAZ,CAAuBoD,CAAC,CAACG,WAAzB;AACH,OAFD,MAEO;AACH2B,QAAAA,UAAU,CAAC,YAAW;AAClB5J,UAAAA,IAAI,CAACqE,kBAAL,CAAwBwF,YAAxB,CAAqC/B,CAAC,CAACC,QAAF,CAAWhH,EAAhD,EAAoD,SAApD,EAA+D+G,CAAC,CAACC,QAAF,CAAW1G,QAA1E;AACH,SAFS,EAEPvB,aAFO,CAAV;AAGH;AACJ,KAZD;;AAaA,WAAO;AACHgK,MAAAA,oBAAoB,EAAE,KADnB;AAEHtC,MAAAA,kBAAkB,EAAE,QAFjB;AAGHuC,MAAAA,sBAAsB,EAAEV;AAHrB,KAAP;AAKH,GAhLqD;AAiLtDW,EAAAA,oBAAoB,EAAE,UAASlC,CAAT,EAAY;AAC9B,QAAImC,WAAW,GAAGnC,CAAC,CAACmC,WAApB;AACA,QAAIC,WAAW,GAAGpC,CAAC,CAACoC,WAApB;AACA,QAAI/J,YAAY,GAAG,aAAa,KAAKC,MAAL,CAAY,oBAAZ,CAAhC;AACA,SAAK+J,QAAL,CAAcrC,CAAd;;AACA,QAAI3H,YAAJ,EAAkB;AACd,UAAIiK,iBAAiB,GAAGF,WAAW,CAAC5I,OAAZ,IAAuB,MAAM4I,WAAW,CAAC7J,MAAzC,IAAmD,KAAK,CAAL,KAAWyH,CAAC,CAACrD,WAAxF;AACA,UAAI4F,cAAc,GAAGH,WAAW,CAACI,mBAAZ,IAAmCJ,WAAW,CAACvJ,OAA/C,IAA0DuJ,WAAW,CAAC5I,OAAtE,IAAiF2I,WAAW,CAACM,OAAZ,IAAuBL,WAAW,CAACM,GAAzI;;AACA,UAAIJ,iBAAJ,EAAuB;AACnB,aAAKK,MAAL,CAAY,IAAZ,EAAkB;AACdlG,UAAAA,UAAU,EAAE,WADE;AAEdE,UAAAA,WAAW,EAAEqD,CAAC,CAACrD;AAFD,SAAlB;AAIH,OALD,MAKO;AACH,YAAI4F,cAAJ,EAAoB;AAChB,eAAKI,MAAL,CAAY,IAAZ,EAAkB,MAAlB;AACH;AACJ;AACJ;AACJ,GApMqD;AAqMtDC,EAAAA,aAAa,EAAE,UAAShE,IAAT,EAAe;AAC1B,YAAQA,IAAI,CAACC,IAAb;AACI,WAAK,eAAL;AACI,aAAK5B,yBAAL;;AACA,aAAK0F,MAAL,CAAY,IAAZ,EAAkB,MAAlB;AACA;;AACJ;AACI,aAAKN,QAAL,CAAczD,IAAd;AANR;AAQH,GA9MqD;AA+MtDiE,EAAAA,iBAAiB,EAAE,YAAW;AAC1B,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,KAAJ;AACA,QAAI1K,YAAY,GAAG,aAAa,KAAKC,MAAL,CAAY,oBAAZ,CAAhC;;AACA,QAAIH,cAAc,GAAG,KAAKoE,kBAAL,CAAwBC,iBAAxB,CAA0CnE,YAA1C,CAArB;;AACA,QAAI+D,QAAQ,GAAG,KAAKD,eAAL,IAAwB,KAAKA,eAAL,CAAqBC,QAArB,EAAvC;;AACA,QAAI4G,MAAM,GAAG5G,QAAQ,IAAIA,QAAQ,CAACjC,IAAT,CAAc,mBAAd,CAAzB;;AACA,QAAI6I,MAAJ,EAAY;AACR7K,MAAAA,cAAc,CAAC8K,OAAf,CAAuB,UAASvK,MAAT,EAAiB;AACpCqK,QAAAA,KAAK,GAAGC,MAAM,CAACtB,MAAP,CAAc,sBAAsBhJ,MAAM,CAACD,KAA7B,GAAqC,IAAnD,CAAR;AACA,YAAIE,IAAI,GAAGoK,KAAK,CAACxK,MAAN,GAAewK,KAAK,CAACG,QAAN,CAAe,MAAMrL,yBAArB,EAAgDsL,GAAhD,CAAoD,CAApD,CAAf,GAAwE,IAAnF;AACAL,QAAAA,MAAM,CAACrJ,IAAP,CAAYd,IAAZ;AACH,OAJD;AAKH;;AACD,WAAO,CAAC,GAAGvC,SAAS,CAACD,OAAd,EAAuB2M,MAAvB,CAAP;AACH,GA9NqD;AA+NtDM,EAAAA,OAAO,EAAE,YAAW;AAChB,WAAO,eAAP;AACH,GAjOqD;AAkOtDC,EAAAA,UAAU,EAAE,YAAW;AACnB,WAAO,KAAK9G,kBAAL,CAAwBC,iBAAxB,EAAP;AACH,GApOqD;AAqOtD8G,EAAAA,aAAa,EAAE,UAAS5K,MAAT,EAAiB6K,cAAjB,EAAiC;AAC5C,QAAIC,aAAa,GAAG9K,MAAM,IAAIA,MAAM,CAACK,WAAjB,KAAiC,oBAAoBwK,cAApB,IAAsC,CAAC7K,MAAM,CAACc,OAAR,IAAmB,KAAK+C,kBAAL,CAAwBkH,qBAAxB,CAA8C/K,MAAM,CAACD,KAArD,CAA1F,CAApB;;AACA,WAAO,KAAKiL,sBAAL,MAAiCF,aAAxC;AACH,GAxOqD;AAyOtDG,EAAAA,eAAe,EAAE,YAAW;AACxB,QAAIzL,IAAI,GAAG,IAAX;;AACA,QAAIsG,SAAS,GAAGtG,IAAI,CAACiE,eAAL,IAAwBjE,IAAI,CAACiE,eAAL,CAAqByH,UAArB,EAAxC;;AACA,QAAIpF,SAAS,IAAIA,SAAS,CAACqF,EAAV,CAAa,UAAb,CAAjB,EAA2C;AACvC,UAAItI,MAAM,GAAGiD,SAAS,CAACjD,MAAV,EAAb;AACA,aAAO;AACHuI,QAAAA,IAAI,EAAEvI,MAAM,CAACuI,IADV;AAEHC,QAAAA,GAAG,EAAExI,MAAM,CAACwI,GAFT;AAGHC,QAAAA,KAAK,EAAEzI,MAAM,CAACuI,IAAP,GAActF,SAAS,CAACyF,UAAV,EAHlB;AAIHC,QAAAA,MAAM,EAAE3I,MAAM,CAACwI,GAAP,GAAavF,SAAS,CAAC2F,WAAV;AAJlB,OAAP;AAMH;;AACD,WAAO,IAAP;AACH,GAtPqD;AAuPtDxJ,EAAAA,iBAAiB,EAAE,YAAW;AAC1B,QAAI,CAAC,KAAKwB,eAAV,EAA2B;AACvB,WAAKc,yBAAL;;AACA,WAAK0F,MAAL;AACH;;AACD,SAAKxG,eAAL,CAAqBrB,IAArB;;AACA,QAAI,KAAKe,YAAL,EAAJ,EAAyB;AACrB,OAAC,GAAGzF,SAAS,CAACD,OAAd,EAAuB,MAAvB,EAA+BkE,QAA/B,CAAwC,KAAKL,eAAL,CAAqBzC,oBAArB,CAAxC;AACH;AACJ,GAhQqD;AAiQtD6M,EAAAA,iBAAiB,EAAE,YAAW;AAC1B,QAAI,KAAKjI,eAAT,EAA0B;AACtB,WAAKA,eAAL,CAAqBpB,IAArB;AACH;AACJ,GArQqD;AAsQtD2I,EAAAA,sBAAsB,EAAE,YAAW;AAC/B,QAAIW,cAAc,GAAG,KAAKlI,eAA1B;AACA,WAAOkI,cAAc,IAAIA,cAAc,CAAC/L,MAAf,CAAsB,SAAtB,CAAzB;AACH,GAzQqD;AA0QtDgM,EAAAA,aAAa,EAAE,YAAW;AACtB,WAAO,CAAC,mBAAD,EAAsB,mBAAtB,CAAP;AACH;AA5QqD,CAAlC,CAAxB;;AA8QA,IAAIC,QAAQ,GAAG;AACXC,EAAAA,cAAc,EAAE,YAAW;AACvB,WAAO;AACHtF,MAAAA,aAAa,EAAE;AACXuF,QAAAA,OAAO,EAAE,KADE;AAEX5E,QAAAA,WAAW,EAAE,KAFF;AAGXC,QAAAA,aAAa,EAAE,GAHJ;AAIXX,QAAAA,IAAI,EAAE,aAJK;AAKXhB,QAAAA,KAAK,EAAE,GALI;AAMXC,QAAAA,MAAM,EAAE,GANG;AAOXN,QAAAA,KAAK,EAAEpH,QAAQ,CAACP,OAAT,CAAiBuO,MAAjB,CAAwB,+BAAxB,CAPI;AAQXrD,QAAAA,cAAc,EAAE3K,QAAQ,CAACP,OAAT,CAAiBuO,MAAjB,CAAwB,mCAAxB,CARL;AASXlG,QAAAA,SAAS,EAAE,KAAK;AATL;AADZ,KAAP;AAaH,GAfU;AAgBXmG,EAAAA,WAAW,EAAE;AACTzF,IAAAA,aAAa,EAAExF;AADN,GAhBF;AAmBXkL,EAAAA,KAAK,EAAE;AACHC,IAAAA,iBAAiB,EAAEpJ;AADhB,GAnBI;AAsBXqJ,EAAAA,SAAS,EAAE;AACPF,IAAAA,KAAK,EAAE;AACHG,MAAAA,WAAW,EAAE;AACTC,QAAAA,gBAAgB,EAAE,YAAW;AACzB,cAAI5M,KAAK,GAAG,KAAKiK,QAAL,EAAZ;AACA,iBAAO,KAAK4C,wBAAL,CAA8B7M,KAA9B,CAAP;AACH,SAJQ;AAKT6M,QAAAA,wBAAwB,EAAE,UAAS7M,KAAT,EAAgB;AACtC,cAAIF,IAAI,GAAG,IAAX;AACA,cAAI+B,oBAAoB,GAAG/B,IAAI,CAACI,MAAL,CAAY,uBAAZ,CAA3B;;AACA,cAAI2B,oBAAJ,EAA0B;AACtB,gBAAIiL,cAAc,GAAG,YAAW;AAC5BhN,cAAAA,IAAI,CAAC2J,SAAL,CAAenH,OAAf,CAAuB,mBAAvB,EAA4CC,iBAA5C;AACH,aAFD;;AAGA,gBAAIwK,aAAa,GAAG,UAASnF,CAAT,EAAY;AAC5B,eAAC,GAAG5J,SAAS,CAACD,OAAd,EAAuB6J,CAAC,CAAC3E,OAAzB,EAAkChB,QAAlC,CAA2CnC,IAAI,CAACkN,sBAAL,CAA4BlN,IAAI,CAAC8B,eAAL,CAAqB1C,2BAArB,CAA5B,CAA3C;AACH,aAFD;;AAGA,gBAAI+N,QAAQ,GAAGnN,IAAI,CAACI,MAAL,CAAY,qBAAZ,CAAf;AACA,gBAAIgN,WAAW,GAAG;AACdC,cAAAA,MAAM,EAAE,UADM;AAEdC,cAAAA,OAAO,EAAE;AACLhL,gBAAAA,IAAI,EAAE5C,wBADD;AAEL6C,gBAAAA,OAAO,EAAEyK,cAFJ;AAGLtK,gBAAAA,IAAI,EAAEyK,QAHD;AAILzM,gBAAAA,IAAI,EAAEyM,QAJD;AAKLF,gBAAAA,aAAa,EAAEA;AALV,eAFK;AASdM,cAAAA,QAAQ,EAAE,QATI;AAUdzH,cAAAA,QAAQ,EAAE,OAVI;AAWda,cAAAA,IAAI,EAAE,qBAXQ;AAYd6G,cAAAA,YAAY,EAAE,MAZA;AAadC,cAAAA,SAAS,EAAE;AAbG,aAAlB;AAeAvN,YAAAA,KAAK,CAACqB,IAAN,CAAW6L,WAAX;AACH;;AACD,iBAAOlN,KAAP;AACH,SAlCQ;AAmCTwK,QAAAA,aAAa,EAAE,UAAShE,IAAT,EAAe;AAC1B,kBAAQA,IAAI,CAACC,IAAb;AACI,iBAAK,eAAL;AACI,mBAAK+G,WAAL;;AACAhH,cAAAA,IAAI,CAACiH,OAAL,GAAe,IAAf;AACA;;AACJ;AACI,mBAAKxD,QAAL,CAAczD,IAAd;AANR;AAQH,SA5CQ;AA6CTkH,QAAAA,SAAS,EAAE,YAAW;AAClB,cAAI5N,IAAI,GAAG,IAAX;AACA,cAAI+B,oBAAoB,GAAG/B,IAAI,CAACI,MAAL,CAAY,uBAAZ,CAA3B;AACA,iBAAOJ,IAAI,CAACmK,QAAL,MAAmBpI,oBAA1B;AACH;AAjDQ;AADV,KADA;AAsDP0K,IAAAA,WAAW,EAAE;AACTlC,MAAAA,OAAO,EAAE;AACLsD,QAAAA,eAAe,EAAE,UAASC,gBAAT,EAA2BC,cAA3B,EAA2C1C,cAA3C,EAA2D2C,cAA3D,EAA2E;AACxF,cAAIC,iBAAiB,GAAG,KAAK7N,MAAL,CAAY,oBAAZ,CAAxB;AACA,cAAI8N,sBAAsB,GAAG,aAAaD,iBAAb,IAAkC,oBAAoBD,cAAnF;AACA,iBAAOE,sBAAsB,GAAG,KAAH,GAAW,KAAK/D,QAAL,CAAc2D,gBAAd,EAAgCC,cAAhC,EAAgD1C,cAAhD,EAAgE2C,cAAhE,CAAxC;AACH;AALI;AADA;AAtDN;AAtBA,CAAf;AAuFAhQ,OAAO,CAACC,OAAR,GAAkBoO,QAAlB;AACA8B,MAAM,CAACnQ,OAAP,GAAiBA,OAAO,CAACC,OAAzB","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_chooser.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _uiGrid_core2 = require(\"./ui.grid_core.columns_view\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _themes = require(\"../themes\");\r\nvar _button = _interopRequireDefault(require(\"../button\"));\r\nvar _tree_view = _interopRequireDefault(require(\"../tree_view\"));\r\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\r\nvar _popup = _interopRequireDefault(require(\"../popup\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar COLUMN_CHOOSER_CLASS = \"column-chooser\";\r\nvar COLUMN_CHOOSER_BUTTON_CLASS = \"column-chooser-button\";\r\nvar NOTOUCH_ACTION_CLASS = \"notouch-action\";\r\nvar COLUMN_CHOOSER_LIST_CLASS = \"column-chooser-list\";\r\nvar COLUMN_CHOOSER_PLAIN_CLASS = \"column-chooser-plain\";\r\nvar COLUMN_CHOOSER_DRAG_CLASS = \"column-chooser-mode-drag\";\r\nvar COLUMN_CHOOSER_SELECT_CLASS = \"column-chooser-mode-select\";\r\nvar COLUMN_CHOOSER_ICON_NAME = \"column-chooser\";\r\nvar COLUMN_CHOOSER_ITEM_CLASS = \"dx-column-chooser-item\";\r\nvar TREEVIEW_NODE_SELECTOR = \".dx-treeview-node\";\r\nvar CHECKBOX_SELECTOR = \".dx-checkbox\";\r\nvar CLICK_TIMEOUT = 300;\r\nvar processItems = function(that, chooserColumns) {\r\n    var items = [];\r\n    var isSelectMode = \"select\" === that.option(\"columnChooser.mode\");\r\n    if (chooserColumns.length) {\r\n        (0, _iterator.each)(chooserColumns, function(index, column) {\r\n            var item = {\r\n                text: column.caption,\r\n                cssClass: column.cssClass,\r\n                allowHiding: column.allowHiding,\r\n                expanded: true,\r\n                id: column.index,\r\n                disabled: false,\r\n                disableCheckBox: false === column.allowHiding,\r\n                parentId: (0, _type.isDefined)(column.ownerBand) ? column.ownerBand : null\r\n            };\r\n            if (isSelectMode) {\r\n                item.selected = column.visible\r\n            }\r\n            items.push(item)\r\n        })\r\n    }\r\n    return items\r\n};\r\nvar ColumnChooserController = _uiGrid_core.default.ViewController.inherit({\r\n    renderShowColumnChooserButton: function($element) {\r\n        var that = this;\r\n        var columnChooserButtonClass = that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS);\r\n        var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n        var $showColumnChooserButton = $element.find(\".\" + columnChooserButtonClass);\r\n        var $columnChooserButton;\r\n        if (columnChooserEnabled) {\r\n            if (!$showColumnChooserButton.length) {\r\n                $columnChooserButton = (0, _renderer.default)(\"<div>\").addClass(columnChooserButtonClass).appendTo($element);\r\n                that._createComponent($columnChooserButton, _button.default, {\r\n                    icon: COLUMN_CHOOSER_ICON_NAME,\r\n                    onClick: function() {\r\n                        that.getView(\"columnChooserView\").showColumnChooser()\r\n                    },\r\n                    hint: that.option(\"columnChooser.title\"),\r\n                    integrationOptions: {}\r\n                })\r\n            } else {\r\n                $showColumnChooserButton.show()\r\n            }\r\n        } else {\r\n            $showColumnChooserButton.hide()\r\n        }\r\n    },\r\n    getPosition: function() {\r\n        var rowsView = this.getView(\"rowsView\");\r\n        return {\r\n            my: \"right bottom\",\r\n            at: \"right bottom\",\r\n            of: rowsView && rowsView.element(),\r\n            collision: \"fit\",\r\n            offset: \"-2 -2\",\r\n            boundaryOffset: \"2 2\"\r\n        }\r\n    }\r\n});\r\nvar ColumnChooserView = _uiGrid_core2.ColumnsView.inherit({\r\n    _resizeCore: _common.noop,\r\n    _isWinDevice: function() {\r\n        return !!_devices.default.real().win\r\n    },\r\n    _updateList: function(change) {\r\n        var items;\r\n        var $popupContent = this._popupContainer.$content();\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var columnChooserList = this._columnChooserList;\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        if (isSelectMode && columnChooserList && change && \"selection\" === change.changeType) {\r\n            items = processItems(this, chooserColumns);\r\n            for (var i = 0; i < items.length; i++) {\r\n                var selected = items[i].selected;\r\n                var id = items[i].id;\r\n                if (id === change.columnIndex) {\r\n                    if (selected) {\r\n                        columnChooserList.selectItem(id, selected)\r\n                    } else {\r\n                        columnChooserList.unselectItem(id, selected)\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (!isSelectMode || !columnChooserList || \"full\" === change) {\r\n                this._popupContainer._wrapper().toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_DRAG_CLASS), !isSelectMode).toggleClass(this.addWidgetPrefix(COLUMN_CHOOSER_SELECT_CLASS), isSelectMode);\r\n                items = processItems(this, chooserColumns);\r\n                this._renderTreeView($popupContent, items)\r\n            }\r\n        }\r\n    },\r\n    _initializePopupContainer: function() {\r\n        var that = this;\r\n        var $element = that.element().addClass(that.addWidgetPrefix(COLUMN_CHOOSER_CLASS));\r\n        var columnChooserOptions = that.option(\"columnChooser\");\r\n        var themeName = (0, _themes.current)();\r\n        var isGenericTheme = (0, _themes.isGeneric)(themeName);\r\n        var isMaterial = (0, _themes.isMaterial)(themeName);\r\n        var dxPopupOptions = {\r\n            visible: false,\r\n            shading: false,\r\n            showCloseButton: false,\r\n            dragEnabled: true,\r\n            resizeEnabled: true,\r\n            toolbarItems: [{\r\n                text: columnChooserOptions.title,\r\n                toolbar: \"top\",\r\n                location: isGenericTheme || isMaterial ? \"before\" : \"center\"\r\n            }],\r\n            position: that.getController(\"columnChooser\").getPosition(),\r\n            width: columnChooserOptions.width,\r\n            height: columnChooserOptions.height,\r\n            rtlEnabled: that.option(\"rtlEnabled\"),\r\n            onHidden: function() {\r\n                if (that._isWinDevice()) {\r\n                    (0, _renderer.default)(\"body\").removeClass(that.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n                }\r\n            },\r\n            container: columnChooserOptions.container\r\n        };\r\n        if (isGenericTheme || isMaterial) {\r\n            (0, _extend.extend)(dxPopupOptions, {\r\n                showCloseButton: true\r\n            })\r\n        } else {\r\n            dxPopupOptions.toolbarItems[dxPopupOptions.toolbarItems.length] = {\r\n                shortcut: \"cancel\"\r\n            }\r\n        }\r\n        if (!(0, _type.isDefined)(this._popupContainer)) {\r\n            that._popupContainer = that._createComponent($element, _popup.default, dxPopupOptions);\r\n            that._popupContainer.on(\"optionChanged\", function(args) {\r\n                if (\"visible\" === args.name) {\r\n                    that.renderCompleted.fire()\r\n                }\r\n            })\r\n        } else {\r\n            this._popupContainer.option(dxPopupOptions)\r\n        }\r\n    },\r\n    _renderCore: function(change) {\r\n        if (this._popupContainer) {\r\n            this._updateList(change)\r\n        }\r\n    },\r\n    _renderTreeView: function($container, items) {\r\n        var that = this;\r\n        var columnChooser = this.option(\"columnChooser\");\r\n        var isSelectMode = \"select\" === columnChooser.mode;\r\n        var treeViewConfig = {\r\n            items: items,\r\n            dataStructure: \"plain\",\r\n            activeStateEnabled: true,\r\n            focusStateEnabled: true,\r\n            hoverStateEnabled: true,\r\n            itemTemplate: \"item\",\r\n            showCheckBoxesMode: \"none\",\r\n            rootValue: null,\r\n            searchEnabled: columnChooser.allowSearch,\r\n            searchTimeout: columnChooser.searchTimeout,\r\n            onItemRendered: function(e) {\r\n                if (e.itemData.disableCheckBox) {\r\n                    var $treeViewNode = (0, _renderer.default)(e.itemElement).closest(TREEVIEW_NODE_SELECTOR);\r\n                    var $checkBox;\r\n                    if ($treeViewNode.length) {\r\n                        $checkBox = $treeViewNode.find(CHECKBOX_SELECTOR);\r\n                        if ($checkBox.length) {\r\n                            var checkBoxInstance = $checkBox.data(\"dxCheckBox\");\r\n                            checkBoxInstance && checkBoxInstance.option(\"disabled\", true)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        var scrollableInstance = $container.find(\".dx-scrollable\").data(\"dxScrollable\");\r\n        var scrollTop = scrollableInstance && scrollableInstance.scrollTop();\r\n        if (isSelectMode && !this._columnsController.isBandColumnsUsed()) {\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_PLAIN_CLASS))\r\n        }\r\n        treeViewConfig.onContentReady = function(e) {\r\n            (0, _common.deferUpdate)(function() {\r\n                if (scrollTop) {\r\n                    var scrollable = (0, _renderer.default)(e.element).find(\".dx-scrollable\").data(\"dxScrollable\");\r\n                    scrollable && scrollable.scrollTo({\r\n                        y: scrollTop\r\n                    })\r\n                }\r\n                that.renderCompleted.fire()\r\n            })\r\n        };\r\n        if (this._isWinDevice()) {\r\n            treeViewConfig.useNativeScrolling = false\r\n        }(0, _extend.extend)(treeViewConfig, isSelectMode ? this._prepareSelectModeConfig() : this._prepareDragModeConfig());\r\n        if (this._columnChooserList) {\r\n            if (!treeViewConfig.searchEnabled) {\r\n                treeViewConfig.searchValue = \"\"\r\n            }\r\n            this._columnChooserList.option(treeViewConfig)\r\n        } else {\r\n            this._columnChooserList = this._createComponent($container, _tree_view.default, treeViewConfig);\r\n            $container.addClass(this.addWidgetPrefix(COLUMN_CHOOSER_LIST_CLASS))\r\n        }\r\n    },\r\n    _prepareDragModeConfig: function() {\r\n        var columnChooserOptions = this.option(\"columnChooser\");\r\n        return {\r\n            noDataText: columnChooserOptions.emptyPanelText,\r\n            activeStateEnabled: false,\r\n            focusStateEnabled: false,\r\n            hoverStateEnabled: false,\r\n            itemTemplate: function(data, index, item) {\r\n                (0, _renderer.default)(item).text(data.text).parent().addClass(data.cssClass).addClass(COLUMN_CHOOSER_ITEM_CLASS)\r\n            }\r\n        }\r\n    },\r\n    _prepareSelectModeConfig: function() {\r\n        var that = this;\r\n        var selectionChangedHandler = function(e) {\r\n            var visibleColumns = that._columnsController.getVisibleColumns().filter(function(item) {\r\n                return !item.command\r\n            });\r\n            var isLastColumnUnselected = 1 === visibleColumns.length && !e.itemData.selected;\r\n            if (isLastColumnUnselected) {\r\n                e.component.selectItem(e.itemElement)\r\n            } else {\r\n                setTimeout(function() {\r\n                    that._columnsController.columnOption(e.itemData.id, \"visible\", e.itemData.selected)\r\n                }, CLICK_TIMEOUT)\r\n            }\r\n        };\r\n        return {\r\n            selectNodesRecursive: false,\r\n            showCheckBoxesMode: \"normal\",\r\n            onItemSelectionChanged: selectionChangedHandler\r\n        }\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        var changeTypes = e.changeTypes;\r\n        var optionNames = e.optionNames;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        this.callBase(e);\r\n        if (isSelectMode) {\r\n            var needPartialRender = optionNames.visible && 1 === optionNames.length && void 0 !== e.columnIndex;\r\n            var needFullRender = optionNames.showInColumnChooser || optionNames.caption || optionNames.visible || changeTypes.columns && optionNames.all;\r\n            if (needPartialRender) {\r\n                this.render(null, {\r\n                    changeType: \"selection\",\r\n                    columnIndex: e.columnIndex\r\n                })\r\n            } else {\r\n                if (needFullRender) {\r\n                    this.render(null, \"full\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"columnChooser\":\r\n                this._initializePopupContainer();\r\n                this.render(null, \"full\");\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    getColumnElements: function() {\r\n        var result = [];\r\n        var $node;\r\n        var isSelectMode = \"select\" === this.option(\"columnChooser.mode\");\r\n        var chooserColumns = this._columnsController.getChooserColumns(isSelectMode);\r\n        var $content = this._popupContainer && this._popupContainer.$content();\r\n        var $nodes = $content && $content.find(\".dx-treeview-node\");\r\n        if ($nodes) {\r\n            chooserColumns.forEach(function(column) {\r\n                $node = $nodes.filter(\"[data-item-id = '\" + column.index + \"']\");\r\n                var item = $node.length ? $node.children(\".\" + COLUMN_CHOOSER_ITEM_CLASS).get(0) : null;\r\n                result.push(item)\r\n            })\r\n        }\r\n        return (0, _renderer.default)(result)\r\n    },\r\n    getName: function() {\r\n        return \"columnChooser\"\r\n    },\r\n    getColumns: function() {\r\n        return this._columnsController.getChooserColumns()\r\n    },\r\n    allowDragging: function(column, sourceLocation) {\r\n        var columnVisible = column && column.allowHiding && (\"columnChooser\" !== sourceLocation || !column.visible && this._columnsController.isParentColumnVisible(column.index));\r\n        return this.isColumnChooserVisible() && columnVisible\r\n    },\r\n    getBoundingRect: function() {\r\n        var that = this;\r\n        var container = that._popupContainer && that._popupContainer._container();\r\n        if (container && container.is(\":visible\")) {\r\n            var offset = container.offset();\r\n            return {\r\n                left: offset.left,\r\n                top: offset.top,\r\n                right: offset.left + container.outerWidth(),\r\n                bottom: offset.top + container.outerHeight()\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    showColumnChooser: function() {\r\n        if (!this._popupContainer) {\r\n            this._initializePopupContainer();\r\n            this.render()\r\n        }\r\n        this._popupContainer.show();\r\n        if (this._isWinDevice()) {\r\n            (0, _renderer.default)(\"body\").addClass(this.addWidgetPrefix(NOTOUCH_ACTION_CLASS))\r\n        }\r\n    },\r\n    hideColumnChooser: function() {\r\n        if (this._popupContainer) {\r\n            this._popupContainer.hide()\r\n        }\r\n    },\r\n    isColumnChooserVisible: function() {\r\n        var popupContainer = this._popupContainer;\r\n        return popupContainer && popupContainer.option(\"visible\")\r\n    },\r\n    publicMethods: function() {\r\n        return [\"showColumnChooser\", \"hideColumnChooser\"]\r\n    }\r\n});\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnChooser: {\r\n                enabled: false,\r\n                allowSearch: false,\r\n                searchTimeout: 500,\r\n                mode: \"dragAndDrop\",\r\n                width: 250,\r\n                height: 260,\r\n                title: _message.default.format(\"dxDataGrid-columnChooserTitle\"),\r\n                emptyPanelText: _message.default.format(\"dxDataGrid-columnChooserEmptyText\"),\r\n                container: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        columnChooser: ColumnChooserController\r\n    },\r\n    views: {\r\n        columnChooserView: ColumnChooserView\r\n    },\r\n    extenders: {\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    return this._appendColumnChooserItem(items)\r\n                },\r\n                _appendColumnChooserItem: function(items) {\r\n                    var that = this;\r\n                    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n                    if (columnChooserEnabled) {\r\n                        var onClickHandler = function() {\r\n                            that.component.getView(\"columnChooserView\").showColumnChooser()\r\n                        };\r\n                        var onInitialized = function(e) {\r\n                            (0, _renderer.default)(e.element).addClass(that._getToolbarButtonClass(that.addWidgetPrefix(COLUMN_CHOOSER_BUTTON_CLASS)))\r\n                        };\r\n                        var hintText = that.option(\"columnChooser.title\");\r\n                        var toolbarItem = {\r\n                            widget: \"dxButton\",\r\n                            options: {\r\n                                icon: COLUMN_CHOOSER_ICON_NAME,\r\n                                onClick: onClickHandler,\r\n                                hint: hintText,\r\n                                text: hintText,\r\n                                onInitialized: onInitialized\r\n                            },\r\n                            showText: \"inMenu\",\r\n                            location: \"after\",\r\n                            name: \"columnChooserButton\",\r\n                            locateInMenu: \"auto\",\r\n                            sortIndex: 40\r\n                        };\r\n                        items.push(toolbarItem)\r\n                    }\r\n                    return items\r\n                },\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"columnChooser\":\r\n                            this._invalidate();\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var that = this;\r\n                    var columnChooserEnabled = that.option(\"columnChooser.enabled\");\r\n                    return that.callBase() || columnChooserEnabled\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            columns: {\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var columnChooserMode = this.option(\"columnChooser.mode\");\r\n                    var isMoveColumnDisallowed = \"select\" === columnChooserMode && \"columnChooser\" === targetLocation;\r\n                    return isMoveColumnDisallowed ? false : this.callBase(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}