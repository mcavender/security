{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.state_storing.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core = require(\"./ui.grid_core.state_storing_core\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar getDataState = function (that) {\n  var pagerView = that.getView(\"pagerView\");\n  var dataController = that.getController(\"data\");\n  var state = {\n    allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,\n    filterPanel: {\n      filterEnabled: that.option(\"filterPanel.filterEnabled\")\n    },\n    filterValue: that.option(\"filterValue\"),\n    focusedRowKey: that.option(\"focusedRowEnabled\") ? that.option(\"focusedRowKey\") : void 0\n  };\n  return (0, _extend.extend)(state, dataController.getUserState());\n};\n\nvar processLoadState = function (that) {\n  var columnsController = that.getController(\"columns\");\n  var selectionController = that.getController(\"selection\");\n  var exportController = that.getController(\"export\");\n  var dataController = that.getController(\"data\");\n\n  if (columnsController) {\n    columnsController.columnsChanged.add(function () {\n      that.updateState({\n        columns: columnsController.getUserState()\n      });\n    });\n  }\n\n  if (selectionController) {\n    selectionController.selectionChanged.add(function (e) {\n      that.updateState({\n        selectedRowKeys: e.selectedRowKeys,\n        selectionFilter: e.selectionFilter\n      });\n    });\n  }\n\n  if (dataController) {\n    that._initialPageSize = that.option(\"paging.pageSize\");\n    that._initialFilterValue = that.option(\"filterValue\");\n    dataController.changed.add(function () {\n      var state = getDataState(that);\n      that.updateState(state);\n    });\n  }\n\n  if (exportController) {\n    exportController.selectionOnlyChanged.add(function () {\n      that.updateState({\n        exportSelectionOnly: exportController.selectionOnly()\n      });\n    });\n  }\n};\n\nvar DEFAULT_FILTER_VALUE = null;\n\nvar getFilterValue = function (that, state) {\n  var filterSyncController = that.getController(\"filterSync\");\n  var columnsController = that.getController(\"columns\");\n  var hasFilterState = state.columns || void 0 !== state.filterValue;\n\n  if (filterSyncController) {\n    if (hasFilterState) {\n      return state.filterValue || filterSyncController.getFilterValueFromColumns(state.columns);\n    } else {\n      return that._initialFilterValue || filterSyncController.getFilterValueFromColumns(columnsController.getColumns());\n    }\n  }\n\n  return DEFAULT_FILTER_VALUE;\n};\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      stateStoring: {\n        enabled: false,\n        storageKey: null,\n        type: \"localStorage\",\n        customLoad: null,\n        customSave: null,\n        savingTimeout: 2e3\n      }\n    };\n  },\n  controllers: {\n    stateStoring: _uiGrid_core.StateStoringController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        init: function () {\n          var that = this;\n          var dataController = that.getController(\"data\");\n          that.callBase();\n          dataController.stateLoaded.add(function () {\n            if (dataController.isLoaded() && !dataController.getDataSource()) {\n              that.setLoading(false);\n              that.renderNoDataText();\n              var columnHeadersView = that.component.getView(\"columnHeadersView\");\n              columnHeadersView && columnHeadersView.render();\n\n              that.component._fireContentReadyAction();\n            }\n          });\n        }\n      }\n    },\n    controllers: {\n      stateStoring: {\n        init: function () {\n          this.callBase.apply(this, arguments);\n          processLoadState(this);\n        },\n        isLoading: function () {\n          return this.callBase() || this.getController(\"data\").isStateLoading();\n        },\n        state: function (_state) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (void 0 !== _state) {\n            this.applyState((0, _extend.extend)({}, _state));\n          }\n\n          return result;\n        },\n        updateState: function (state) {\n          if (this.isEnabled()) {\n            var oldState = this.state();\n            var newState = (0, _extend.extend)({}, oldState, state);\n            var oldStateHash = (0, _common.getKeyHash)(oldState);\n            var newStateHash = (0, _common.getKeyHash)(newState);\n\n            if (!(0, _common.equalByValue)(oldStateHash, newStateHash)) {\n              (0, _extend.extend)(this._state, state);\n              this.save();\n            }\n          } else {\n            (0, _extend.extend)(this._state, state);\n          }\n        },\n        applyState: function (state) {\n          var that = this;\n          var allowedPageSizes = state.allowedPageSizes;\n          var searchText = state.searchText;\n          var selectedRowKeys = state.selectedRowKeys;\n          var selectionFilter = state.selectionFilter;\n          var exportController = that.getController(\"export\");\n          var columnsController = that.getController(\"columns\");\n          var dataController = that.getController(\"data\");\n          var scrollingMode = that.option(\"scrolling.mode\");\n          var isVirtualScrollingMode = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n          var showPageSizeSelector = true === that.option(\"pager.visible\") && that.option(\"pager.showPageSizeSelector\");\n          that.component.beginUpdate();\n\n          if (columnsController) {\n            columnsController.setUserState(state.columns);\n          }\n\n          if (exportController) {\n            exportController.selectionOnly(state.exportSelectionOnly);\n          }\n\n          if (selectedRowKeys) {\n            that.option(\"selectedRowKeys\", selectedRowKeys);\n          }\n\n          that.option(\"selectionFilter\", selectionFilter);\n\n          if (allowedPageSizes && \"auto\" === that.option(\"pager.allowedPageSizes\")) {\n            that.option(\"pager\").allowedPageSizes = allowedPageSizes;\n          }\n\n          if (that.option(\"focusedRowEnabled\") && void 0 !== state.focusedRowKey) {\n            that.option(\"focusedRowKey\", state.focusedRowKey);\n          }\n\n          that.component.endUpdate();\n          searchText && that.option(\"searchPanel.text\", searchText);\n          that.option(\"filterValue\", getFilterValue(that, state));\n          that.option(\"filterPanel.filterEnabled\", state.filterPanel ? state.filterPanel.filterEnabled : true);\n          that.option(\"paging.pageSize\", (!isVirtualScrollingMode || showPageSizeSelector) && (0, _type.isDefined)(state.pageSize) ? state.pageSize : that._initialPageSize);\n          that.option(\"paging.pageIndex\", state.pageIndex || 0);\n          dataController && dataController.reset();\n        }\n      },\n      columns: {\n        getVisibleColumns: function () {\n          var visibleColumns = this.callBase.apply(this, arguments);\n          var stateStoringController = this.getController(\"stateStoring\");\n          return stateStoringController.isEnabled() && !stateStoringController.isLoaded() ? [] : visibleColumns;\n        }\n      },\n      data: {\n        callbackNames: function () {\n          return this.callBase().concat([\"stateLoaded\"]);\n        },\n        _refreshDataSource: function () {\n          var _this = this;\n\n          var callBase = this.callBase;\n          var stateStoringController = this.getController(\"stateStoring\");\n\n          if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {\n            clearTimeout(this._restoreStateTimeoutID);\n            var deferred = new _deferred.Deferred();\n            this._restoreStateTimeoutID = setTimeout(function () {\n              stateStoringController.load().always(function () {\n                _this._restoreStateTimeoutID = null;\n              }).done(function () {\n                callBase.call(_this);\n\n                _this.stateLoaded.fire();\n\n                deferred.resolve();\n              }).fail(function (error) {\n                _this.stateLoaded.fire();\n\n                _this._handleLoadError(error || \"Unknown error\");\n\n                deferred.reject();\n              });\n            });\n            return deferred.promise();\n          } else {\n            if (!this.isStateLoading()) {\n              callBase.call(this);\n            }\n          }\n        },\n        isLoading: function () {\n          var that = this;\n          var stateStoringController = that.getController(\"stateStoring\");\n          return this.callBase() || stateStoringController.isLoading();\n        },\n        isStateLoading: function () {\n          return (0, _type.isDefined)(this._restoreStateTimeoutID);\n        },\n        isLoaded: function () {\n          return this.callBase() && !this.isStateLoading();\n        },\n        dispose: function () {\n          clearTimeout(this._restoreStateTimeoutID);\n          this.callBase();\n        }\n      },\n      selection: {\n        _fireSelectionChanged: function (options) {\n          var stateStoringController = this.getController(\"stateStoring\");\n          var isDeferredSelection = this.option(\"selection.deferred\");\n\n          if (stateStoringController.isLoading() && isDeferredSelection) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.state_storing.js"],"names":["exports","default","_common","require","_type","_extend","_uiGrid_core","_deferred","getDataState","that","pagerView","getView","dataController","getController","state","allowedPageSizes","getPageSizes","filterPanel","filterEnabled","option","filterValue","focusedRowKey","extend","getUserState","processLoadState","columnsController","selectionController","exportController","columnsChanged","add","updateState","columns","selectionChanged","e","selectedRowKeys","selectionFilter","_initialPageSize","_initialFilterValue","changed","selectionOnlyChanged","exportSelectionOnly","selectionOnly","DEFAULT_FILTER_VALUE","getFilterValue","filterSyncController","hasFilterState","getFilterValueFromColumns","getColumns","_default","defaultOptions","stateStoring","enabled","storageKey","type","customLoad","customSave","savingTimeout","controllers","StateStoringController","extenders","views","rowsView","init","callBase","stateLoaded","isLoaded","getDataSource","setLoading","renderNoDataText","columnHeadersView","component","render","_fireContentReadyAction","apply","arguments","isLoading","isStateLoading","_state","result","applyState","isEnabled","oldState","newState","oldStateHash","getKeyHash","newStateHash","equalByValue","save","searchText","scrollingMode","isVirtualScrollingMode","showPageSizeSelector","beginUpdate","setUserState","endUpdate","isDefined","pageSize","pageIndex","reset","getVisibleColumns","visibleColumns","stateStoringController","data","callbackNames","concat","_refreshDataSource","_this","clearTimeout","_restoreStateTimeoutID","deferred","Deferred","setTimeout","load","always","done","call","fire","resolve","fail","error","_handleLoadError","reject","promise","dispose","selection","_fireSelectionChanged","options","isDeferredSelection","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.state_storing.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _uiGrid_core = require(\"./ui.grid_core.state_storing_core\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar getDataState = function(that) {\r\n    var pagerView = that.getView(\"pagerView\");\r\n    var dataController = that.getController(\"data\");\r\n    var state = {\r\n        allowedPageSizes: pagerView ? pagerView.getPageSizes() : void 0,\r\n        filterPanel: {\r\n            filterEnabled: that.option(\"filterPanel.filterEnabled\")\r\n        },\r\n        filterValue: that.option(\"filterValue\"),\r\n        focusedRowKey: that.option(\"focusedRowEnabled\") ? that.option(\"focusedRowKey\") : void 0\r\n    };\r\n    return (0, _extend.extend)(state, dataController.getUserState())\r\n};\r\nvar processLoadState = function(that) {\r\n    var columnsController = that.getController(\"columns\");\r\n    var selectionController = that.getController(\"selection\");\r\n    var exportController = that.getController(\"export\");\r\n    var dataController = that.getController(\"data\");\r\n    if (columnsController) {\r\n        columnsController.columnsChanged.add(function() {\r\n            that.updateState({\r\n                columns: columnsController.getUserState()\r\n            })\r\n        })\r\n    }\r\n    if (selectionController) {\r\n        selectionController.selectionChanged.add(function(e) {\r\n            that.updateState({\r\n                selectedRowKeys: e.selectedRowKeys,\r\n                selectionFilter: e.selectionFilter\r\n            })\r\n        })\r\n    }\r\n    if (dataController) {\r\n        that._initialPageSize = that.option(\"paging.pageSize\");\r\n        that._initialFilterValue = that.option(\"filterValue\");\r\n        dataController.changed.add(function() {\r\n            var state = getDataState(that);\r\n            that.updateState(state)\r\n        })\r\n    }\r\n    if (exportController) {\r\n        exportController.selectionOnlyChanged.add(function() {\r\n            that.updateState({\r\n                exportSelectionOnly: exportController.selectionOnly()\r\n            })\r\n        })\r\n    }\r\n};\r\nvar DEFAULT_FILTER_VALUE = null;\r\nvar getFilterValue = function(that, state) {\r\n    var filterSyncController = that.getController(\"filterSync\");\r\n    var columnsController = that.getController(\"columns\");\r\n    var hasFilterState = state.columns || void 0 !== state.filterValue;\r\n    if (filterSyncController) {\r\n        if (hasFilterState) {\r\n            return state.filterValue || filterSyncController.getFilterValueFromColumns(state.columns)\r\n        } else {\r\n            return that._initialFilterValue || filterSyncController.getFilterValueFromColumns(columnsController.getColumns())\r\n        }\r\n    }\r\n    return DEFAULT_FILTER_VALUE\r\n};\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            stateStoring: {\r\n                enabled: false,\r\n                storageKey: null,\r\n                type: \"localStorage\",\r\n                customLoad: null,\r\n                customSave: null,\r\n                savingTimeout: 2e3\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        stateStoring: _uiGrid_core.StateStoringController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    var that = this;\r\n                    var dataController = that.getController(\"data\");\r\n                    that.callBase();\r\n                    dataController.stateLoaded.add(function() {\r\n                        if (dataController.isLoaded() && !dataController.getDataSource()) {\r\n                            that.setLoading(false);\r\n                            that.renderNoDataText();\r\n                            var columnHeadersView = that.component.getView(\"columnHeadersView\");\r\n                            columnHeadersView && columnHeadersView.render();\r\n                            that.component._fireContentReadyAction()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            stateStoring: {\r\n                init: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    processLoadState(this)\r\n                },\r\n                isLoading: function() {\r\n                    return this.callBase() || this.getController(\"data\").isStateLoading()\r\n                },\r\n                state: function(_state) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (void 0 !== _state) {\r\n                        this.applyState((0, _extend.extend)({}, _state))\r\n                    }\r\n                    return result\r\n                },\r\n                updateState: function(state) {\r\n                    if (this.isEnabled()) {\r\n                        var oldState = this.state();\r\n                        var newState = (0, _extend.extend)({}, oldState, state);\r\n                        var oldStateHash = (0, _common.getKeyHash)(oldState);\r\n                        var newStateHash = (0, _common.getKeyHash)(newState);\r\n                        if (!(0, _common.equalByValue)(oldStateHash, newStateHash)) {\r\n                            (0, _extend.extend)(this._state, state);\r\n                            this.save()\r\n                        }\r\n                    } else {\r\n                        (0, _extend.extend)(this._state, state)\r\n                    }\r\n                },\r\n                applyState: function(state) {\r\n                    var that = this;\r\n                    var allowedPageSizes = state.allowedPageSizes;\r\n                    var searchText = state.searchText;\r\n                    var selectedRowKeys = state.selectedRowKeys;\r\n                    var selectionFilter = state.selectionFilter;\r\n                    var exportController = that.getController(\"export\");\r\n                    var columnsController = that.getController(\"columns\");\r\n                    var dataController = that.getController(\"data\");\r\n                    var scrollingMode = that.option(\"scrolling.mode\");\r\n                    var isVirtualScrollingMode = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\r\n                    var showPageSizeSelector = true === that.option(\"pager.visible\") && that.option(\"pager.showPageSizeSelector\");\r\n                    that.component.beginUpdate();\r\n                    if (columnsController) {\r\n                        columnsController.setUserState(state.columns)\r\n                    }\r\n                    if (exportController) {\r\n                        exportController.selectionOnly(state.exportSelectionOnly)\r\n                    }\r\n                    if (selectedRowKeys) {\r\n                        that.option(\"selectedRowKeys\", selectedRowKeys)\r\n                    }\r\n                    that.option(\"selectionFilter\", selectionFilter);\r\n                    if (allowedPageSizes && \"auto\" === that.option(\"pager.allowedPageSizes\")) {\r\n                        that.option(\"pager\").allowedPageSizes = allowedPageSizes\r\n                    }\r\n                    if (that.option(\"focusedRowEnabled\") && void 0 !== state.focusedRowKey) {\r\n                        that.option(\"focusedRowKey\", state.focusedRowKey)\r\n                    }\r\n                    that.component.endUpdate();\r\n                    searchText && that.option(\"searchPanel.text\", searchText);\r\n                    that.option(\"filterValue\", getFilterValue(that, state));\r\n                    that.option(\"filterPanel.filterEnabled\", state.filterPanel ? state.filterPanel.filterEnabled : true);\r\n                    that.option(\"paging.pageSize\", (!isVirtualScrollingMode || showPageSizeSelector) && (0, _type.isDefined)(state.pageSize) ? state.pageSize : that._initialPageSize);\r\n                    that.option(\"paging.pageIndex\", state.pageIndex || 0);\r\n                    dataController && dataController.reset()\r\n                }\r\n            },\r\n            columns: {\r\n                getVisibleColumns: function() {\r\n                    var visibleColumns = this.callBase.apply(this, arguments);\r\n                    var stateStoringController = this.getController(\"stateStoring\");\r\n                    return stateStoringController.isEnabled() && !stateStoringController.isLoaded() ? [] : visibleColumns\r\n                }\r\n            },\r\n            data: {\r\n                callbackNames: function() {\r\n                    return this.callBase().concat([\"stateLoaded\"])\r\n                },\r\n                _refreshDataSource: function() {\r\n                    var _this = this;\r\n                    var callBase = this.callBase;\r\n                    var stateStoringController = this.getController(\"stateStoring\");\r\n                    if (stateStoringController.isEnabled() && !stateStoringController.isLoaded()) {\r\n                        clearTimeout(this._restoreStateTimeoutID);\r\n                        var deferred = new _deferred.Deferred;\r\n                        this._restoreStateTimeoutID = setTimeout(function() {\r\n                            stateStoringController.load().always(function() {\r\n                                _this._restoreStateTimeoutID = null\r\n                            }).done(function() {\r\n                                callBase.call(_this);\r\n                                _this.stateLoaded.fire();\r\n                                deferred.resolve()\r\n                            }).fail(function(error) {\r\n                                _this.stateLoaded.fire();\r\n                                _this._handleLoadError(error || \"Unknown error\");\r\n                                deferred.reject()\r\n                            })\r\n                        });\r\n                        return deferred.promise()\r\n                    } else {\r\n                        if (!this.isStateLoading()) {\r\n                            callBase.call(this)\r\n                        }\r\n                    }\r\n                },\r\n                isLoading: function() {\r\n                    var that = this;\r\n                    var stateStoringController = that.getController(\"stateStoring\");\r\n                    return this.callBase() || stateStoringController.isLoading()\r\n                },\r\n                isStateLoading: function() {\r\n                    return (0, _type.isDefined)(this._restoreStateTimeoutID)\r\n                },\r\n                isLoaded: function() {\r\n                    return this.callBase() && !this.isStateLoading()\r\n                },\r\n                dispose: function() {\r\n                    clearTimeout(this._restoreStateTimeoutID);\r\n                    this.callBase()\r\n                }\r\n            },\r\n            selection: {\r\n                _fireSelectionChanged: function(options) {\r\n                    var stateStoringController = this.getController(\"stateStoring\");\r\n                    var isDeferredSelection = this.option(\"selection.deferred\");\r\n                    if (stateStoringController.isLoading() && isDeferredSelection) {\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}