{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _array_utils = require(\"../../data/array_utils\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _selectors = require(\"../widget/selectors\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _button = _interopRequireDefault(require(\"../button\"));\n\nvar _pointer = _interopRequireDefault(require(\"../../events/pointer\"));\n\nvar _validation_engine = _interopRequireDefault(require(\"../validation_engine\"));\n\nvar _validator = _interopRequireDefault(require(\"../validator\"));\n\nvar _overlay = _interopRequireDefault(require(\"../overlay\"));\n\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _load_indicator = _interopRequireDefault(require(\"../load_indicator\"));\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar INVALIDATE_CLASS = \"invalid\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar ROWS_VIEW_CLASS = \"rowsview\";\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\nvar VALIDATOR_CLASS = \"validator\";\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\nvar CONTENT_CLASS = \"content\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar PADDING_BETWEEN_TOOLTIPS = 2;\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\nvar COMMAND_TRANSPARENT = \"transparent\";\nvar VALIDATION_STATUS = {\n  valid: \"valid\",\n  invalid: \"invalid\",\n  pending: \"pending\"\n};\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\nvar EDIT_DATA_REMOVE_TYPE = \"remove\";\nvar VALIDATION_CANCELLED = \"cancel\";\n\nvar validationResultIsValid = function (result) {\n  return (0, _type.isDefined)(result) && result !== VALIDATION_CANCELLED;\n};\n\nvar cellValueShouldBeValidated = function (value, rowOptions) {\n  return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow;\n};\n\nvar ValidatingController = _uiGrid_core.default.Controller.inherit(function () {\n  return {\n    init: function () {\n      this._editingController = this.getController(\"editing\");\n      this.createAction(\"onRowValidating\");\n\n      if (!this._validationState) {\n        this._validationState = [];\n      }\n    },\n    _rowIsValidated: function (change) {\n      var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n      return !!validationData && !!validationData.validated;\n    },\n    _getValidationData: function (key, create) {\n      var validationData = this._validationState.filter(function (data) {\n        return data.key === key;\n      })[0];\n\n      if (!validationData && create) {\n        validationData = {\n          key: key,\n          isValid: true\n        };\n\n        this._validationState.push(validationData);\n      }\n\n      return validationData;\n    },\n    _getBrokenRules: function (validationData, validationResults) {\n      var brokenRules;\n\n      if (validationResults) {\n        brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule];\n      } else {\n        brokenRules = validationData.brokenRules || [];\n      }\n\n      return brokenRules;\n    },\n    _rowValidating: function (validationData, validationResults) {\n      var deferred = new _deferred.Deferred();\n\n      var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n\n      var brokenRules = this._getBrokenRules(validationData, validationResults);\n\n      var isValid = validationResults ? validationResults.isValid : validationData.isValid;\n      var parameters = {\n        brokenRules: brokenRules,\n        isValid: isValid,\n        key: change.key,\n        newData: change.data,\n        oldData: this._editingController._getOldData(change.key),\n        promise: null,\n        errorText: this.getHiddenValidatorsErrorText(brokenRules)\n      };\n      this.executeAction(\"onRowValidating\", parameters);\n      (0, _deferred.when)(parameters.promise).always(function () {\n        validationData.isValid = parameters.isValid;\n        validationData.errorText = parameters.errorText;\n        deferred.resolve(parameters);\n      });\n      return deferred.promise();\n    },\n    getHiddenValidatorsErrorText: function (brokenRules) {\n      var brokenRulesMessages = [];\n      (0, _iterator.each)(brokenRules, function (_, brokenRule) {\n        var column = brokenRule.column;\n        var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\n        var isVisibleColumn = column && column.visible;\n\n        if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\n          brokenRulesMessages.push(brokenRule.message);\n        }\n      });\n      return brokenRulesMessages.join(\", \");\n    },\n    validate: function (isFull) {\n      var _this = this;\n\n      var isValid = true;\n      var editingController = this._editingController;\n      var deferred = new _deferred.Deferred();\n      var completeList = [];\n      var editMode = editingController.getEditMode();\n      isFull = isFull || editMode === EDIT_MODE_ROW;\n\n      if (this._isValidationInProgress) {\n        return deferred.resolve(false).promise();\n      }\n\n      this._isValidationInProgress = true;\n\n      if (isFull) {\n        editingController.addDeferred(deferred);\n        var changes = editingController.getChanges();\n        (0, _iterator.each)(changes, function (index, _ref) {\n          var type = _ref.type,\n              key = _ref.key;\n\n          if (\"remove\" !== type) {\n            var validationData = _this._getValidationData(key);\n\n            var validationResult = _this.validateGroup(validationData);\n\n            completeList.push(validationResult);\n            validationResult.done(function (validationResult) {\n              validationData.validated = true;\n              isValid = isValid && validationResult.isValid;\n            });\n          }\n        });\n      } else {\n        if (this._currentCellValidator) {\n          var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\n          completeList.push(validationResult);\n          validationResult.done(function (validationResult) {\n            isValid = validationResult.isValid;\n          });\n        }\n      }\n\n      _deferred.when.apply(void 0, completeList).done(function () {\n        _this._isValidationInProgress = false;\n        deferred.resolve(isValid);\n      });\n\n      return deferred.promise();\n    },\n    validateGroup: function validateGroup(validationData) {\n      var _validationResult,\n          _this2 = this;\n\n      var result = new _deferred.Deferred();\n\n      var validateGroup = validationData && _validation_engine.default.getGroupConfig(validationData);\n\n      var validationResult;\n\n      if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\n        this.resetRowValidationResults(validationData);\n        validationResult = _validation_engine.default.validateGroup(validationData);\n      }\n\n      (0, _deferred.when)((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(function (validationResult) {\n        (0, _deferred.when)(_this2._rowValidating(validationData, validationResult)).done(result.resolve);\n      });\n      return result.promise();\n    },\n    isRowDataModified: function (change) {\n      return !(0, _type.isEmptyObject)(change.data);\n    },\n    updateValidationState: function (change) {\n      var editMode = this._editingController.getEditMode();\n\n      var key = change.key;\n\n      var validationData = this._getValidationData(key, true);\n\n      if (FORM_BASED_MODES.indexOf(editMode) === -1) {\n        if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {\n          validationData.isValid = true;\n          return;\n        }\n\n        this.setDisableApplyValidationResults(true);\n\n        var groupConfig = _validation_engine.default.getGroupConfig(validationData);\n\n        if (groupConfig) {\n          var validationResult = _validation_engine.default.validateGroup(validationData);\n\n          (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n            validationData.isValid = validationResult.isValid;\n            validationData.brokenRules = validationResult.brokenRules;\n          });\n        } else {\n          if (!validationData.brokenRules || !validationData.brokenRules.length) {\n            validationData.isValid = true;\n          }\n        }\n\n        this.setDisableApplyValidationResults(false);\n      } else {\n        validationData.isValid = true;\n      }\n    },\n    setValidator: function (validator) {\n      this._currentCellValidator = validator;\n    },\n    renderCellPendingIndicator: function ($container) {\n      var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n      if (!$indicator.length) {\n        var $indicatorContainer = $container;\n        $indicator = (0, _renderer.default)(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\n\n        this._createComponent($indicator, _load_indicator.default);\n\n        $container.addClass(VALIDATION_PENDING_CLASS);\n      }\n    },\n    disposeCellPendingIndicator: function ($container) {\n      var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\n\n      if ($indicator.length) {\n        var indicator = _load_indicator.default.getInstance($indicator);\n\n        if (indicator) {\n          indicator.dispose();\n          indicator.$element().remove();\n        }\n\n        $container.removeClass(VALIDATION_PENDING_CLASS);\n      }\n    },\n    validationStatusChanged: function (result) {\n      var validator = result.validator;\n      var validationGroup = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      this.updateCellValidationResult({\n        rowKey: validationGroup.key,\n        columnIndex: column.index,\n        validationResult: result\n      });\n    },\n    validatorInitialized: function (arg) {\n      arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\n      arg.component.on(\"validated\", this.validationStatusChanged.bind(this));\n    },\n    validatorDisposing: function (arg) {\n      var validator = arg.component;\n      var validationGroup = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      var result = this.getCellValidationResult({\n        rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\n        columnIndex: column.index\n      });\n\n      if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\n        this.cancelCellValidationResult({\n          change: validationGroup,\n          columnIndex: column.index\n        });\n      }\n    },\n    applyValidationResult: function ($container, result) {\n      var validator = result.validator;\n      var validationGroup = validator.option(\"validationGroup\");\n      var column = validator.option(\"dataGetter\")().column;\n      result.brokenRules && result.brokenRules.forEach(function (rule) {\n        rule.columnIndex = column.index;\n        rule.column = column;\n      });\n\n      if ($container) {\n        var validationResult = this.getCellValidationResult({\n          rowKey: validationGroup.key,\n          columnIndex: column.index\n        });\n        var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\n\n        if (this._disableApplyValidationResults || requestIsDisabled) {\n          return;\n        }\n\n        if (result.status === VALIDATION_STATUS.invalid) {\n          var $focus = $container.find(\":focus\");\n\n          if (!(0, _selectors.focused)($focus)) {\n            _events_engine.default.trigger($focus, \"focus\");\n\n            _events_engine.default.trigger($focus, _pointer.default.down);\n          }\n        }\n\n        var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\n\n        if (result.status === VALIDATION_STATUS.pending) {\n          if (editor) {\n            editor.option(\"validationStatus\", VALIDATION_STATUS.pending);\n          } else {\n            this.renderCellPendingIndicator($container);\n          }\n        } else {\n          if (editor) {\n            editor.option(\"validationStatus\", VALIDATION_STATUS.valid);\n          } else {\n            this.disposeCellPendingIndicator($container);\n          }\n        }\n\n        $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid);\n      }\n    },\n    createValidator: function (parameters, $container) {\n      var _this3 = this;\n\n      var editingController = this._editingController;\n      var column = parameters.column;\n      var showEditorAlways = column.showEditorAlways;\n\n      if ((0, _type.isDefined)(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\n        return;\n      }\n\n      var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\n      var needCreateValidator = editIndex > -1;\n\n      if (!needCreateValidator) {\n        if (!showEditorAlways) {\n          var columnsController = this.getController(\"columns\");\n          var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\n          showEditorAlways = visibleColumns.some(function (column) {\n            return column.showEditorAlways;\n          });\n        }\n\n        var isEditRow = (0, _common.equalByValue)(this.option(\"editing.editRowKey\"), parameters.key);\n        var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\n          row: parameters.row\n        });\n        needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\n\n        if (isCellOrBatchEditingAllowed && showEditorAlways) {\n          editingController._addInternalData({\n            key: parameters.key,\n            oldData: parameters.data\n          });\n        }\n      }\n\n      if (needCreateValidator) {\n        if ($container && !$container.length) {\n          _ui.default.log(\"E1050\");\n\n          return;\n        }\n\n        var validationData = this._getValidationData(parameters.key, true);\n\n        var getValue = function () {\n          var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\n          var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\n          return void 0 !== value ? value : parameters.value;\n        };\n\n        var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\n        $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\n        var validator = new _validator.default($container || (0, _renderer.default)(\"<div>\"), {\n          name: column.caption,\n          validationRules: (0, _extend.extend)(true, [], column.validationRules),\n          validationGroup: validationData,\n          adapter: useDefaultValidator ? null : {\n            getValue: getValue,\n            applyValidationResults: function (result) {\n              _this3.applyValidationResult($container, result);\n            }\n          },\n          dataGetter: function () {\n            var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\n            var change = editingController.getChangeByKey(key);\n\n            var oldData = editingController._getOldData(key);\n\n            return {\n              data: (0, _array_utils.createObjectWithChanges)(oldData, null === change || void 0 === change ? void 0 : change.data),\n              column: column\n            };\n          },\n          onInitialized: this.validatorInitialized.bind(this),\n          onDisposing: this.validatorDisposing.bind(this)\n        });\n\n        if (useDefaultValidator) {\n          var adapter = validator.option(\"adapter\");\n\n          if (adapter) {\n            adapter.getValue = getValue;\n            adapter.validationRequestsCallbacks = [];\n          }\n        }\n\n        return validator;\n      }\n    },\n    setDisableApplyValidationResults: function (flag) {\n      this._disableApplyValidationResults = flag;\n    },\n    getDisableApplyValidationResults: function () {\n      return this._disableApplyValidationResults;\n    },\n    isCurrentValidatorProcessing: function (_ref2) {\n      var rowKey = _ref2.rowKey,\n          columnIndex = _ref2.columnIndex;\n      return this._currentCellValidator && this._currentCellValidator.option(\"validationGroup\").key === rowKey && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex;\n    },\n    validateCell: function (validator) {\n      var cellParams = {\n        rowKey: validator.option(\"validationGroup\").key,\n        columnIndex: validator.option(\"dataGetter\")().column.index\n      };\n      var validationResult = this.getCellValidationResult(cellParams);\n      var stateRestored = validationResultIsValid(validationResult);\n\n      if (!stateRestored) {\n        validationResult = validator.validate();\n      }\n\n      var deferred = new _deferred.Deferred();\n      var adapter = validator.option(\"adapter\");\n\n      if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\n        this.updateCellValidationResult(cellParams);\n        adapter.applyValidationResults(validationResult);\n      }\n\n      (0, _deferred.when)(validationResult.complete || validationResult).done(function (validationResult) {\n        stateRestored && adapter.applyValidationResults(validationResult);\n        deferred.resolve(validationResult);\n      });\n      return deferred.promise();\n    },\n    updateCellValidationResult: function (_ref3) {\n      var rowKey = _ref3.rowKey,\n          columnIndex = _ref3.columnIndex,\n          validationResult = _ref3.validationResult;\n\n      var validationData = this._getValidationData(rowKey);\n\n      if (!validationData) {\n        return;\n      }\n\n      if (!validationData.validationResults) {\n        validationData.validationResults = {};\n      }\n\n      var result;\n\n      if (validationResult) {\n        result = (0, _extend.extend)({}, validationResult);\n        validationData.validationResults[columnIndex] = result;\n\n        if (validationResult.status === VALIDATION_STATUS.pending) {\n          if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n            result.deferred = new _deferred.Deferred();\n            result.complete.always(function () {\n              result.deferred.resolve();\n            });\n\n            this._editingController.addDeferred(result.deferred);\n          }\n\n          if (this._disableApplyValidationResults) {\n            result.disabledPendingId = validationResult.id;\n            return;\n          }\n        }\n      } else {\n        result = validationData.validationResults[columnIndex];\n      }\n\n      if (result && result.disabledPendingId) {\n        delete result.disabledPendingId;\n      }\n    },\n    getCellValidationResult: function (_ref4) {\n      var _validationData$valid;\n\n      var rowKey = _ref4.rowKey,\n          columnIndex = _ref4.columnIndex;\n\n      var validationData = this._getValidationData(rowKey, true);\n\n      return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex];\n    },\n    removeCellValidationResult: function (_ref5) {\n      var change = _ref5.change,\n          columnIndex = _ref5.columnIndex;\n\n      var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n      if (validationData && validationData.validationResults) {\n        this.cancelCellValidationResult({\n          change: change,\n          columnIndex: columnIndex\n        });\n        delete validationData.validationResults[columnIndex];\n      }\n    },\n    cancelCellValidationResult: function (_ref6) {\n      var change = _ref6.change,\n          columnIndex = _ref6.columnIndex;\n\n      var validationData = this._getValidationData(change.key);\n\n      if (change && validationData.validationResults) {\n        var result = validationData.validationResults[columnIndex];\n\n        if (result) {\n          result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\n          validationData.validationResults[columnIndex] = VALIDATION_CANCELLED;\n        }\n      }\n    },\n    resetRowValidationResults: function (validationData) {\n      if (validationData) {\n        validationData.validationResults && delete validationData.validationResults;\n        delete validationData.validated;\n      }\n    },\n    isInvalidCell: function (_ref7) {\n      var rowKey = _ref7.rowKey,\n          columnIndex = _ref7.columnIndex;\n      var result = this.getCellValidationResult({\n        rowKey: rowKey,\n        columnIndex: columnIndex\n      });\n      return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid;\n    },\n    getCellValidator: function (_ref8) {\n      var rowKey = _ref8.rowKey,\n          columnIndex = _ref8.columnIndex;\n\n      var validationData = this._getValidationData(rowKey);\n\n      var groupConfig = validationData && _validation_engine.default.getGroupConfig(validationData);\n\n      var validators = groupConfig && groupConfig.validators;\n      return validators && validators.filter(function (v) {\n        var column = v.option(\"dataGetter\")().column;\n        return column ? column.index === columnIndex : false;\n      })[0];\n    },\n    setCellValidationStatus: function (cellOptions) {\n      var validationResult = this.getCellValidationResult({\n        rowKey: cellOptions.key,\n        columnIndex: cellOptions.column.index\n      });\n\n      if ((0, _type.isDefined)(validationResult)) {\n        cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED;\n      } else {\n        delete cellOptions.validationStatus;\n      }\n    }\n  };\n}());\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        texts: {\n          validationCancelChanges: _message.default.format(\"dxDataGrid-validationCancelChanges\")\n        }\n      }\n    };\n  },\n  controllers: {\n    validating: ValidatingController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        _addChange: function (options, row) {\n          var index = this.callBase(options, row);\n          var validatingController = this.getController(\"validating\");\n\n          if (index >= 0 && options.type !== EDIT_DATA_REMOVE_TYPE) {\n            var change = this.getChanges()[index];\n            change && validatingController.updateValidationState(change);\n          }\n\n          return index;\n        },\n        _handleChangesChange: function (args) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          args.value.forEach(function (change) {\n            if (void 0 === validatingController._getValidationData(change.key)) {\n              validatingController.updateValidationState(change);\n            }\n          });\n        },\n        _updateRowAndPageIndices: function () {\n          var _this4 = this;\n\n          var that = this;\n          var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\n          var rowIndex = startInsertIndex;\n          (0, _iterator.each)(that.getChanges(), function (_, _ref9) {\n            var key = _ref9.key,\n                type = _ref9.type;\n\n            var validationData = _this4.getController(\"validating\")._getValidationData(key);\n\n            if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\n              validationData.pageIndex = that._pageIndex;\n\n              if (type === EDIT_DATA_INSERT_TYPE) {\n                validationData.rowIndex = startInsertIndex;\n              } else {\n                validationData.rowIndex = rowIndex;\n              }\n\n              rowIndex++;\n            }\n          });\n        },\n        getEditFormOptions: function (detailOptions) {\n          var editFormOptions = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(detailOptions.key, true);\n\n          return (0, _extend.extend)({}, editFormOptions, {\n            validationGroup: validationData\n          });\n        },\n        _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n          this.callBase.apply(this, arguments);\n\n          if (isCustomSetCellValue && this._editForm && !row.isNewRow) {\n            this._editForm.validate();\n          }\n        },\n        _needInsertItem: function (_ref10) {\n          var key = _ref10.key;\n          var result = this.callBase.apply(this, arguments);\n\n          var validationData = this.getController(\"validating\")._getValidationData(key);\n\n          if (result && !(null !== validationData && void 0 !== validationData && validationData.isValid)) {\n            result = key.pageIndex === this._pageIndex;\n          }\n\n          return result;\n        },\n        _prepareEditCell: function (params) {\n          var isNotCanceled = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          if (isNotCanceled && params.column.showEditorAlways) {\n            validatingController.updateValidationState({\n              key: params.key\n            });\n          }\n\n          return isNotCanceled;\n        },\n        processItems: function (items, changeType) {\n          var that = this;\n          var i;\n          var changes = that.getChanges();\n          var dataController = that.getController(\"data\");\n          var validatingController = this.getController(\"validating\");\n\n          var getIndexByChange = function (change, items) {\n            var index = -1;\n            var isInsert = change.type === EDIT_DATA_INSERT_TYPE;\n            var key = change.key;\n            (0, _iterator.each)(items, function (i, item) {\n              if ((0, _common.equalByValue)(key, isInsert ? item : dataController.keyOf(item))) {\n                index = i;\n                return false;\n              }\n            });\n            return index;\n          };\n\n          items = that.callBase(items, changeType);\n          var itemsCount = items.length;\n\n          var addInValidItem = function (change, validationData) {\n            var data = {\n              key: change.key\n            };\n            var index = getIndexByChange(change, items);\n\n            if (index >= 0) {\n              return;\n            }\n\n            validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\n            var rowIndex = validationData.rowIndex;\n            data[INSERT_INDEX] = 1;\n            items.splice(rowIndex, 0, data);\n          };\n\n          if (that.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\n            for (i = 0; i < changes.length; i++) {\n              var key = changes[i].key;\n\n              var validationData = validatingController._getValidationData(key);\n\n              if (validationData && changes[i].type && validationData.pageIndex === that._pageIndex && key.pageIndex !== that._pageIndex) {\n                addInValidItem(changes[i], validationData);\n              }\n            }\n          }\n\n          return items;\n        },\n        processDataItem: function (item) {\n          var isInserted = item.data[INSERT_INDEX];\n          var key = isInserted ? item.data.key : item.key;\n          var editMode = this.getEditMode();\n\n          if (editMode === EDIT_MODE_BATCH && isInserted && key) {\n            var changes = this.getChanges();\n\n            var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\n\n            if (editIndex >= 0) {\n              var change = changes[editIndex];\n\n              if (change.type !== EDIT_DATA_INSERT_TYPE) {\n                var oldData = this._getOldData(change.key);\n\n                item.data = (0, _extend.extend)(true, {}, oldData, change.data);\n                item.key = key;\n              }\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _createInvisibleColumnValidators: function (changes) {\n          var _this5 = this;\n\n          var that = this;\n          var validatingController = this.getController(\"validating\");\n          var columnsController = this.getController(\"columns\");\n          var columns = columnsController.getColumns();\n          var invisibleColumns = columnsController.getInvisibleColumns().filter(function (column) {\n            return !column.isBand;\n          });\n          var groupColumns = columnsController.getGroupColumns().filter(function (column) {\n            return !column.showWhenGrouped && invisibleColumns.indexOf(column) === -1;\n          });\n          var invisibleColumnValidators = [];\n\n          var isCellVisible = function (column, rowKey) {\n            return _this5._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0;\n          };\n\n          invisibleColumns.push.apply(invisibleColumns, _toConsumableArray(groupColumns));\n\n          if (FORM_BASED_MODES.indexOf(this.getEditMode()) === -1) {\n            (0, _iterator.each)(columns, function (_, column) {\n              changes.forEach(function (change) {\n                var data;\n\n                if (isCellVisible(column, change.key)) {\n                  return;\n                }\n\n                if (change.type === EDIT_DATA_INSERT_TYPE) {\n                  data = change.data;\n                } else {\n                  if (\"update\" === change.type) {\n                    var oldData = that._getOldData(change.key);\n\n                    data = (0, _array_utils.createObjectWithChanges)(oldData, change.data);\n                  }\n                }\n\n                if (data) {\n                  var validator = validatingController.createValidator({\n                    column: column,\n                    key: change.key,\n                    value: column.calculateCellValue(data)\n                  });\n\n                  if (validator) {\n                    invisibleColumnValidators.push(validator);\n                  }\n                }\n              });\n            });\n          }\n\n          return function () {\n            invisibleColumnValidators.forEach(function (validator) {\n              validator.dispose();\n            });\n          };\n        },\n        _beforeSaveEditData: function (change, editIndex) {\n          var _this6 = this;\n\n          var result = this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n\n          var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\n\n          if (change) {\n            var isValid = \"remove\" === change.type || validationData.isValid;\n            result = result || !isValid;\n          } else {\n            var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\n\n            result = new _deferred.Deferred();\n            this.executeOperation(result, function () {\n              validatingController.validate(true).done(function (isFullValid) {\n                disposeValidators();\n\n                _this6._updateRowAndPageIndices();\n\n                switch (_this6.getEditMode()) {\n                  case EDIT_MODE_CELL:\n                    if (!isFullValid) {\n                      _this6._focusEditingCell();\n                    }\n\n                    break;\n\n                  case EDIT_MODE_BATCH:\n                    if (!isFullValid) {\n                      _this6._resetEditRowKey();\n\n                      _this6._resetEditColumnName();\n\n                      _this6.getController(\"data\").updateItems();\n                    }\n\n                }\n\n                result.resolve(!isFullValid);\n              });\n            });\n          }\n\n          return result.promise ? result.promise() : result;\n        },\n        _beforeEditCell: function (rowIndex, columnIndex, item) {\n          var result = this.callBase(rowIndex, columnIndex, item);\n\n          if (this.getEditMode() === EDIT_MODE_CELL) {\n            var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\n\n            var validator = $cell && $cell.data(\"dxValidator\");\n            var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\n            var value = validator && validator.option(\"adapter\").getValue();\n\n            if (validator && cellValueShouldBeValidated(value, rowOptions)) {\n              var validatingController = this.getController(\"validating\");\n              var deferred = new _deferred.Deferred();\n              (0, _deferred.when)(validatingController.validateCell(validator), result).done(function (validationResult, result) {\n                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result);\n              });\n              return deferred.promise();\n            } else {\n              if (!validator) {\n                return result;\n              }\n            }\n          }\n        },\n        _afterSaveEditData: function (cancel) {\n          var _this7 = this;\n\n          var $firstErrorRow;\n          (0, _iterator.each)(this.getChanges(), function (_, change) {\n            var $errorRow = _this7._showErrorRow(change);\n\n            $firstErrorRow = $firstErrorRow || $errorRow;\n          });\n\n          if ($firstErrorRow) {\n            var scrollable = this._rowsView.getScrollable();\n\n            if (scrollable) {\n              scrollable.update();\n              scrollable.scrollToElement($firstErrorRow);\n            }\n          }\n\n          if (cancel && this.getEditMode() === EDIT_MODE_CELL && this._needUpdateRow()) {\n            var editRowIndex = this.getEditRowIndex();\n\n            this._dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [editRowIndex]\n            });\n\n            this._focusEditingCell();\n          } else {\n            if (!cancel) {\n              this.getController(\"validating\")._validationState = [];\n            }\n          }\n        },\n        _handleDataChanged: function (args) {\n          var validationState = this.getController(\"validating\")._validationState;\n\n          if (\"standard\" === this.option(\"scrolling.mode\")) {\n            this.resetRowAndPageIndices();\n          }\n\n          if (\"prepend\" === args.changeType) {\n            (0, _iterator.each)(validationState, function (_, validationData) {\n              validationData.rowIndex += args.items.length;\n            });\n          }\n\n          this.callBase(args);\n        },\n        resetRowAndPageIndices: function () {\n          var _this8 = this;\n\n          var validationState = this.getController(\"validating\")._validationState;\n\n          (0, _iterator.each)(validationState, function (_, validationData) {\n            if (validationData.pageIndex !== _this8._pageIndex) {\n              delete validationData.pageIndex;\n              delete validationData.rowIndex;\n            }\n          });\n        },\n        _beforeCancelEditData: function () {\n          var validatingController = this.getController(\"validating\");\n          validatingController._validationState = [];\n          this.callBase();\n        },\n        _showErrorRow: function (change) {\n          var $popupContent;\n          var errorHandling = this.getController(\"errorHandling\");\n          var items = this.getController(\"data\").items();\n          var rowIndex = this.getIndexByKey(change.key, items);\n\n          var validationData = this.getController(\"validating\")._getValidationData(change.key);\n\n          if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\n            $popupContent = this.getPopupContent();\n            return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent);\n          }\n        },\n        updateFieldValue: function (e) {\n          var _this9 = this;\n\n          var validatingController = this.getController(\"validating\");\n          var deferred = new _deferred.Deferred();\n          validatingController.removeCellValidationResult({\n            change: this.getChangeByKey(e.key),\n            columnIndex: e.column.index\n          });\n          this.callBase.apply(this, arguments).done(function () {\n            var currentValidator = validatingController.getCellValidator({\n              rowKey: e.key,\n              columnIndex: e.column.index\n            });\n            (0, _deferred.when)(currentValidator && validatingController.validateCell(currentValidator)).done(function (validationResult) {\n              _this9.getController(\"editorFactory\").refocus();\n\n              deferred.resolve(validationResult);\n            });\n          });\n          return deferred.promise();\n        },\n        highlightDataCell: function ($cell, parameters) {\n          this.callBase.apply(this, arguments);\n          var validatingController = this.getController(\"validating\");\n          validatingController.setCellValidationStatus(parameters);\n          var isEditableCell = !!parameters.setValue;\n          var cellModified = this.isCellModified(parameters);\n          var isValidated = (0, _type.isDefined)(parameters.validationStatus);\n          var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\n\n          if (needValidation) {\n            var validator = $cell.data(\"dxValidator\");\n\n            if (validator) {\n              (0, _deferred.when)(this.getController(\"validating\").validateCell(validator)).done(function () {\n                validatingController.setCellValidationStatus(parameters);\n              });\n            }\n          }\n        },\n        getChangeByKey: function (key) {\n          var changes = this.getChanges();\n          return changes[_uiGrid_core2.default.getIndexByKey(key, changes)];\n        },\n        isCellModified: function (parameters) {\n          var cellModified = this.callBase(parameters);\n          var change = this.getChangeByKey(parameters.key);\n          var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\n            rowKey: parameters.key,\n            columnIndex: parameters.column.index\n          });\n          return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid;\n        }\n      },\n      editorFactory: function () {\n        var getWidthOfVisibleCells = function (that, element) {\n          var rowIndex = (0, _renderer.default)(element).closest(\"tr\").index();\n          var $cellElements = (0, _renderer.default)(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\n          return that._rowsView._getWidths($cellElements).reduce(function (w1, w2) {\n            return w1 + w2;\n          }, 0);\n        };\n\n        var getBoundaryNonFixedColumnsInfo = function (fixedColumns) {\n          var firstNonFixedColumnIndex;\n          var lastNonFixedColumnIndex;\n          fixedColumns.some(function (column, index) {\n            if (column.command === COMMAND_TRANSPARENT) {\n              firstNonFixedColumnIndex = 0 === index ? -1 : index;\n              lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\n              return true;\n            }\n          });\n          return {\n            startColumnIndex: firstNonFixedColumnIndex,\n            endColumnIndex: lastNonFixedColumnIndex\n          };\n        };\n\n        return {\n          _showRevertButton: function ($container) {\n            var _this10 = this;\n\n            if (!$container || !$container.length) {\n              return;\n            }\n\n            var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n            var $overlayContainer = $container.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n            $tooltipElement && $tooltipElement.remove();\n            $tooltipElement = (0, _renderer.default)(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\n            var tooltipOptions = {\n              animation: null,\n              visible: true,\n              width: \"auto\",\n              height: \"auto\",\n              target: $container,\n              shading: false,\n              container: $overlayContainer,\n              propagateOutsideClick: true,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              contentTemplate: function () {\n                var $buttonElement = (0, _renderer.default)(\"<div>\").addClass(REVERT_BUTTON_CLASS);\n                var buttonOptions = {\n                  icon: \"revert\",\n                  hint: _this10.option(\"editing.texts.validationCancelChanges\"),\n                  onClick: function () {\n                    _this10._editingController.cancelEditData();\n                  }\n                };\n                return new _button.default($buttonElement, buttonOptions).$element();\n              },\n              position: {\n                my: \"left top\",\n                at: \"right top\",\n                offset: \"1 0\",\n                collision: \"flip\",\n                boundaryOffset: \"0 0\",\n                boundary: this._rowsView.element()\n              },\n              onPositioned: this._positionedHandler.bind(this)\n            };\n            return new _overlay.default($tooltipElement, tooltipOptions);\n          },\n          _hideFixedGroupCell: function ($cell, overlayOptions) {\n            var $nextFixedRowElement;\n            var $groupCellElement;\n\n            var isFixedColumns = this._rowsView.isFixedColumns();\n\n            var isFormEditMode = this._editingController.isFormEditMode();\n\n            if (isFixedColumns && !isFormEditMode) {\n              var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\n\n              if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\n                $nextFixedRowElement = (0, _renderer.default)(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\n                $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\n\n                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\n                  $groupCellElement.css(\"visibility\", \"hidden\");\n\n                  overlayOptions.onDisposing = function () {\n                    $groupCellElement.css(\"visibility\", \"\");\n                  };\n                }\n              }\n            }\n          },\n          _positionedHandler: function (e, isOverlayVisible) {\n            if (!e.component.__skipPositionProcessing) {\n              var isRevertButton = (0, _renderer.default)(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\n\n              var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\n\n              var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\n\n              e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\n\n              if (normalizedPosition) {\n                e.component.option(normalizedPosition);\n              } else {\n                if (needRepaint) {\n                  e.component.repaint();\n                }\n              }\n            }\n          },\n          _showValidationMessage: function ($cell, messages, alignment, revertTooltip) {\n            var _this11 = this;\n\n            var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\n            var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\n            var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\n            var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\n            var $overlayContainer = $cell.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\n            var errorMessageText = \"\";\n            messages && messages.forEach(function (message) {\n              errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + (0, _string.encodeHtml)(message);\n            });\n            var $overlayElement = (0, _renderer.default)(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\n            var overlayOptions = {\n              target: $cell,\n              container: $overlayContainer,\n              shading: false,\n              width: \"auto\",\n              height: \"auto\",\n              visible: true,\n              animation: false,\n              propagateOutsideClick: true,\n              closeOnOutsideClick: false,\n              closeOnTargetScroll: false,\n              position: {\n                collision: \"flip\",\n                boundary: this._rowsView.element(),\n                boundaryOffset: \"0 0\",\n                offset: {\n                  x: 0,\n                  y: !isOverlayVisible && (_browser.default.mozilla || _browser.default.msie) ? -1 : 0\n                },\n                my: myPosition,\n                at: atPosition\n              },\n              onPositioned: function (e) {\n                _this11._positionedHandler(e, isOverlayVisible);\n\n                _this11._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell);\n              }\n            };\n\n            this._hideFixedGroupCell($cell, overlayOptions);\n\n            new _overlay.default($overlayElement, overlayOptions);\n          },\n          _normalizeValidationMessagePositionAndMaxWidth: function (options, isRevertButton, isOverlayVisible) {\n            var fixedColumns = this._columnsController.getFixedColumns();\n\n            if (!fixedColumns || !fixedColumns.length) {\n              return;\n            }\n\n            var position;\n            var visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\n            var $overlayContentElement = options.component.$content();\n            var validationMessageWidth = $overlayContentElement.outerWidth(true);\n            var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\n\n            var columnIndex = this._rowsView.getCellIndex((0, _renderer.default)(options.element).closest(\"td\"));\n\n            var boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\n\n            if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\n              position = {\n                collision: \"none flip\",\n                my: \"top left\",\n                at: isOverlayVisible ? \"top right\" : \"bottom left\"\n              };\n            } else {\n              if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\n                position = {\n                  collision: \"none flip\",\n                  my: \"top right\",\n                  at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\n                };\n\n                if (isRevertButton) {\n                  position.offset = \"-1 0\";\n                }\n              }\n            }\n\n            return position && {\n              position: position,\n              maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\n            };\n          },\n          _shiftValidationMessageIfNeed: function ($content, $revertContent, $cell) {\n            if (!$revertContent) {\n              return;\n            }\n\n            var contentOffset = $content.offset();\n            var revertContentOffset = $revertContent.offset();\n\n            if (contentOffset.top === revertContentOffset.top && contentOffset.left + $content.width() > revertContentOffset.left) {\n              var left = $revertContent.width() + PADDING_BETWEEN_TOOLTIPS;\n              $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left);\n            }\n          },\n          _getTooltipsSelector: function () {\n            var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\n            var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n            return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass;\n          },\n          init: function () {\n            this.callBase();\n            this._editingController = this.getController(\"editing\");\n            this._columnsController = this.getController(\"columns\");\n            this._rowsView = this.getView(\"rowsView\");\n          },\n          loseFocus: function (skipValidator) {\n            if (!skipValidator) {\n              this.getController(\"validating\").setValidator(null);\n            }\n\n            this.callBase();\n          },\n          updateCellState: function ($element, validationResult, hideBorder) {\n            var _change$data;\n\n            var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n            var $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\n            var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\n            var change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\n            var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\n            var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\n            var revertTooltip;\n\n            if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\n              if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\n                revertTooltip = this._showRevertButton($focus);\n              }\n            }\n\n            var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\n\n            if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\n              var errorMessages = [];\n              validationResult.brokenRules.forEach(function (rule) {\n                errorMessages.push(rule.message);\n              });\n\n              this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip);\n            }\n\n            !hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight();\n          },\n          focus: function ($element, hideBorder) {\n            var _this12 = this;\n\n            if (!arguments.length) {\n              return this.callBase();\n            }\n\n            var $tooltips = $element && $element.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\n            $tooltips && $tooltips.remove();\n\n            if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\")) {\n              return this.callBase($element, hideBorder);\n            }\n\n            var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\n            var callBase = this.callBase;\n            var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\n            var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\n            var editingController = this.getController(\"editing\");\n            var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\n            var validationResult;\n            var validatingController = this.getController(\"validating\");\n\n            if (validator) {\n              validatingController.setValidator(validator);\n              var value = validator.option(\"adapter\").getValue();\n\n              if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\n                editingController.waitForDeferredOperations().done(function () {\n                  (0, _deferred.when)(validatingController.validateCell(validator)).done(function (result) {\n                    validationResult = result;\n                    var column = validationResult.validator.option(\"dataGetter\")().column;\n\n                    if (change && column && !validatingController.isCurrentValidatorProcessing({\n                      rowKey: change.key,\n                      columnIndex: column.index\n                    })) {\n                      return;\n                    }\n\n                    if (validationResult.status === VALIDATION_STATUS.invalid) {\n                      hideBorder = true;\n                    }\n\n                    _this12.updateCellState($element, validationResult, hideBorder);\n\n                    callBase.call(_this12, $element, hideBorder);\n                  });\n                });\n                return this.callBase($element, hideBorder);\n              }\n            }\n\n            this.updateCellState($element, validationResult, hideBorder);\n            return this.callBase($element, hideBorder);\n          },\n          getEditorInstance: function ($container) {\n            var $editor = $container.find(\".dx-texteditor\").eq(0);\n            return _uiGrid_core2.default.getWidgetInstance($editor);\n          }\n        };\n      }(),\n      data: {\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var cell = oldRow.cells[columnIndex];\n          var oldValidationStatus = cell && cell.validationStatus;\n          var validatingController = this.getController(\"validating\");\n          var validationResult = validatingController.getCellValidationResult({\n            rowKey: oldRow.key,\n            columnIndex: columnIndex\n          });\n\n          var validationData = validatingController._getValidationData(oldRow.key);\n\n          var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\n          var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\n          var cellIsMarkedAsInvalid = (0, _renderer.default)(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));\n\n          if (oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        updateFreeSpaceRowHeight: function ($table) {\n          var that = this;\n          var $rowElements;\n          var $freeSpaceRowElement;\n          var $freeSpaceRowElements;\n          var $element = that.element();\n          var $tooltipContent = $element && $element.find(\".\" + that.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\n          that.callBase($table);\n\n          if ($tooltipContent && $tooltipContent.length) {\n            $rowElements = that._getRowElements();\n            $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\n            $freeSpaceRowElement = $freeSpaceRowElements.first();\n\n            if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || $tooltipContent.outerHeight() > $freeSpaceRowElement.outerHeight())) {\n              $freeSpaceRowElements.show();\n              $freeSpaceRowElements.height($tooltipContent.outerHeight());\n              return true;\n            }\n          }\n        },\n        _formItemPrepared: function (cellOptions, $container) {\n          var _this13 = this;\n\n          this.callBase.apply(this, arguments);\n          (0, _common.deferUpdate)(function () {\n            var $editor = $container.find(\".dx-widget\").first();\n            var isEditorDisposed = $editor.length && !$editor.children().length;\n\n            if (!isEditorDisposed) {\n              _this13.getController(\"validating\").createValidator(cellOptions, $editor);\n            }\n          });\n        },\n        _cellPrepared: function ($cell, parameters) {\n          if (!this.getController(\"editing\").isFormEditMode()) {\n            this.getController(\"validating\").createValidator(parameters, $cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.validating.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_events_engine","_uiGrid_core","_uiGrid_core2","_array_utils","_common","_iterator","_type","_extend","_selectors","_message","_button","_pointer","_validation_engine","_validator","_overlay","_ui","_deferred","_load_indicator","_string","_browser","obj","__esModule","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","INVALIDATE_CLASS","REVERT_TOOLTIP_CLASS","ROWS_VIEW_CLASS","INVALID_MESSAGE_CLASS","WIDGET_INVALID_MESSAGE_CLASS","INVALID_MESSAGE_ALWAYS_CLASS","REVERT_BUTTON_CLASS","VALIDATOR_CLASS","PENDING_INDICATOR_CLASS","VALIDATION_PENDING_CLASS","CONTENT_CLASS","INSERT_INDEX","PADDING_BETWEEN_TOOLTIPS","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_BATCH","EDIT_MODE_CELL","EDIT_MODE_POPUP","GROUP_CELL_CLASS","FORM_BASED_MODES","COMMAND_TRANSPARENT","VALIDATION_STATUS","valid","invalid","pending","EDIT_DATA_INSERT_TYPE","EDIT_DATA_REMOVE_TYPE","VALIDATION_CANCELLED","validationResultIsValid","result","isDefined","cellValueShouldBeValidated","value","rowOptions","isNewRow","ValidatingController","Controller","inherit","init","_editingController","getController","createAction","_validationState","_rowIsValidated","change","validationData","_getValidationData","key","validated","create","filter","data","isValid","push","_getBrokenRules","validationResults","brokenRules","brokenRule","_rowValidating","deferred","Deferred","getChangeByKey","parameters","newData","oldData","_getOldData","promise","errorText","getHiddenValidatorsErrorText","executeAction","when","always","resolve","brokenRulesMessages","each","_","column","isGroupExpandColumn","groupIndex","showWhenGrouped","isVisibleColumn","visible","validator","$element","parent","message","join","validate","isFull","_this","editingController","completeList","editMode","getEditMode","_isValidationInProgress","addDeferred","changes","getChanges","index","_ref","type","validationResult","validateGroup","done","_currentCellValidator","_findGroup","apply","_validationResult","_this2","getGroupConfig","validators","resetRowValidationResults","complete","isRowDataModified","isEmptyObject","updateValidationState","indexOf","setDisableApplyValidationResults","groupConfig","setValidator","renderCellPendingIndicator","$container","$indicator","find","$indicatorContainer","appendTo","addClass","_createComponent","disposeCellPendingIndicator","indicator","getInstance","dispose","remove","removeClass","validationStatusChanged","validationGroup","option","updateCellValidationResult","rowKey","columnIndex","validatorInitialized","arg","component","on","bind","validatorDisposing","getCellValidationResult","status","cancelCellValidationResult","applyValidationResult","forEach","rule","requestIsDisabled","disabledPendingId","id","_disableApplyValidationResults","$focus","focused","trigger","down","editor","editCellTemplate","getEditorInstance","toggleClass","addWidgetPrefix","createValidator","_this3","showEditorAlways","command","validationRules","editIndex","getIndexByKey","needCreateValidator","columnsController","visibleColumns","getVisibleColumns","some","isEditRow","equalByValue","isCellOrBatchEditingAllowed","isCellOrBatchEditMode","allowUpdating","row","_addInternalData","log","getValue","calculateCellValue","useDefaultValidator","hasClass","caption","extend","adapter","applyValidationResults","dataGetter","createObjectWithChanges","onInitialized","onDisposing","validationRequestsCallbacks","flag","getDisableApplyValidationResults","isCurrentValidatorProcessing","_ref2","validateCell","cellParams","stateRestored","_ref3","_ref4","_validationData$valid","removeCellValidationResult","_ref5","_ref6","reject","isInvalidCell","_ref7","getCellValidator","_ref8","v","setCellValidationStatus","cellOptions","validationStatus","_default","defaultOptions","editing","texts","validationCancelChanges","format","controllers","validating","extenders","_addChange","options","callBase","validatingController","_handleChangesChange","args","arguments","_updateRowAndPageIndices","_this4","that","startInsertIndex","getView","getTopVisibleItemIndex","rowIndex","_ref9","pageIndex","_pageIndex","getEditFormOptions","detailOptions","editFormOptions","_updateEditRowCore","skipCurrentRow","isCustomSetCellValue","_editForm","_needInsertItem","_ref10","_prepareEditCell","params","isNotCanceled","processItems","items","changeType","dataController","getIndexByChange","isInsert","item","keyOf","itemsCount","addInValidItem","splice","processDataItem","isInserted","_createInvisibleColumnValidators","_this5","columns","getColumns","invisibleColumns","getInvisibleColumns","isBand","groupColumns","getGroupColumns","invisibleColumnValidators","isCellVisible","_dataController","getRowIndexByKey","_beforeSaveEditData","_this6","disposeValidators","executeOperation","isFullValid","_focusEditingCell","_resetEditRowKey","_resetEditColumnName","updateItems","_beforeEditCell","$cell","_rowsView","_getCellElement","closest","_afterSaveEditData","cancel","_this7","$firstErrorRow","$errorRow","_showErrorRow","scrollable","getScrollable","update","scrollToElement","_needUpdateRow","editRowIndex","getEditRowIndex","rowIndices","_handleDataChanged","validationState","resetRowAndPageIndices","_this8","_beforeCancelEditData","$popupContent","errorHandling","getPopupContent","renderErrorRow","updateFieldValue","e","_this9","currentValidator","refocus","highlightDataCell","isEditableCell","setValue","cellModified","isCellModified","isValidated","needValidation","setCellValue","isCellInvalid","editorFactory","getWidthOfVisibleCells","element","$cellElements","getRowElement","first","children","_getWidths","reduce","w1","w2","getBoundaryNonFixedColumnsInfo","fixedColumns","firstNonFixedColumnIndex","lastNonFixedColumnIndex","colspan","startColumnIndex","endColumnIndex","_showRevertButton","_this10","$tooltipElement","$overlayContainer","concat","tooltipOptions","animation","width","height","target","shading","container","propagateOutsideClick","closeOnOutsideClick","closeOnTargetScroll","contentTemplate","$buttonElement","buttonOptions","icon","hint","onClick","cancelEditData","position","my","at","offset","collision","boundaryOffset","boundary","onPositioned","_positionedHandler","_hideFixedGroupCell","overlayOptions","$nextFixedRowElement","$groupCellElement","isFixedColumns","isFormEditMode","nextRowOptions","next","rowType","last","get","style","visibility","css","isOverlayVisible","__skipPositionProcessing","isRevertButton","needRepaint","updateFreeSpaceRowHeight","normalizedPosition","_normalizeValidationMessagePositionAndMaxWidth","repaint","_showValidationMessage","messages","alignment","revertTooltip","_this11","editorPopup","myPosition","atPosition","errorMessageText","encodeHtml","$overlayElement","html","x","y","mozilla","msie","_shiftValidationMessageIfNeed","$content","_columnsController","getFixedColumns","visibleTableWidth","$overlayContentElement","validationMessageWidth","outerWidth","needMaxWidth","getCellIndex","boundaryNonFixedColumnsInfo","maxWidth","$revertContent","contentOffset","revertContentOffset","top","left","_getTooltipsSelector","invalidMessageClass","revertTooltipClass","loseFocus","skipValidator","updateCellState","hideBorder","_change$data","_getFocusCellSelector","is","isSaving","showValidationMessage","errorMessages","focus","_this12","$tooltips","eq","waitForDeferredOperations","$editor","getWidgetInstance","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","cell","cells","oldValidationStatus","newValidationStatus","rowIsModified","JSON","stringify","modifiedValues","cellIsMarkedAsInvalid","cellElement","views","rowsView","$table","$rowElements","$freeSpaceRowElement","$freeSpaceRowElements","$tooltipContent","_getRowElements","_getFreeSpaceRowElements","outerHeight","show","_formItemPrepared","_this13","deferUpdate","isEditorDisposed","_cellPrepared","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.validating.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _array_utils = require(\"../../data/array_utils\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _selectors = require(\"../widget/selectors\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _button = _interopRequireDefault(require(\"../button\"));\r\nvar _pointer = _interopRequireDefault(require(\"../../events/pointer\"));\r\nvar _validation_engine = _interopRequireDefault(require(\"../validation_engine\"));\r\nvar _validator = _interopRequireDefault(require(\"../validator\"));\r\nvar _overlay = _interopRequireDefault(require(\"../overlay\"));\r\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _load_indicator = _interopRequireDefault(require(\"../load_indicator\"));\r\nvar _string = require(\"../../core/utils/string\");\r\nvar _browser = _interopRequireDefault(require(\"../../core/utils/browser\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(o)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n    if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\r\n        return Array.from(iter)\r\n    }\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return _arrayLikeToArray(arr)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\nvar INVALIDATE_CLASS = \"invalid\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar ROWS_VIEW_CLASS = \"rowsview\";\r\nvar INVALID_MESSAGE_CLASS = \"dx-invalid-message\";\r\nvar WIDGET_INVALID_MESSAGE_CLASS = \"invalid-message\";\r\nvar INVALID_MESSAGE_ALWAYS_CLASS = \"dx-invalid-message-always\";\r\nvar REVERT_BUTTON_CLASS = \"dx-revert-button\";\r\nvar VALIDATOR_CLASS = \"validator\";\r\nvar PENDING_INDICATOR_CLASS = \"dx-pending-indicator\";\r\nvar VALIDATION_PENDING_CLASS = \"dx-validation-pending\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar PADDING_BETWEEN_TOOLTIPS = 2;\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar FORM_BASED_MODES = [EDIT_MODE_POPUP, EDIT_MODE_FORM];\r\nvar COMMAND_TRANSPARENT = \"transparent\";\r\nvar VALIDATION_STATUS = {\r\n    valid: \"valid\",\r\n    invalid: \"invalid\",\r\n    pending: \"pending\"\r\n};\r\nvar EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nvar VALIDATION_CANCELLED = \"cancel\";\r\nvar validationResultIsValid = function(result) {\r\n    return (0, _type.isDefined)(result) && result !== VALIDATION_CANCELLED\r\n};\r\nvar cellValueShouldBeValidated = function(value, rowOptions) {\r\n    return void 0 !== value || void 0 === value && rowOptions && !rowOptions.isNewRow\r\n};\r\nvar ValidatingController = _uiGrid_core.default.Controller.inherit(function() {\r\n    return {\r\n        init: function() {\r\n            this._editingController = this.getController(\"editing\");\r\n            this.createAction(\"onRowValidating\");\r\n            if (!this._validationState) {\r\n                this._validationState = []\r\n            }\r\n        },\r\n        _rowIsValidated: function(change) {\r\n            var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n            return !!validationData && !!validationData.validated\r\n        },\r\n        _getValidationData: function(key, create) {\r\n            var validationData = this._validationState.filter(function(data) {\r\n                return data.key === key\r\n            })[0];\r\n            if (!validationData && create) {\r\n                validationData = {\r\n                    key: key,\r\n                    isValid: true\r\n                };\r\n                this._validationState.push(validationData)\r\n            }\r\n            return validationData\r\n        },\r\n        _getBrokenRules: function(validationData, validationResults) {\r\n            var brokenRules;\r\n            if (validationResults) {\r\n                brokenRules = validationResults.brokenRules || validationResults.brokenRule && [validationResults.brokenRule]\r\n            } else {\r\n                brokenRules = validationData.brokenRules || []\r\n            }\r\n            return brokenRules\r\n        },\r\n        _rowValidating: function(validationData, validationResults) {\r\n            var deferred = new _deferred.Deferred;\r\n            var change = this._editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n            var brokenRules = this._getBrokenRules(validationData, validationResults);\r\n            var isValid = validationResults ? validationResults.isValid : validationData.isValid;\r\n            var parameters = {\r\n                brokenRules: brokenRules,\r\n                isValid: isValid,\r\n                key: change.key,\r\n                newData: change.data,\r\n                oldData: this._editingController._getOldData(change.key),\r\n                promise: null,\r\n                errorText: this.getHiddenValidatorsErrorText(brokenRules)\r\n            };\r\n            this.executeAction(\"onRowValidating\", parameters);\r\n            (0, _deferred.when)(parameters.promise).always(function() {\r\n                validationData.isValid = parameters.isValid;\r\n                validationData.errorText = parameters.errorText;\r\n                deferred.resolve(parameters)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        getHiddenValidatorsErrorText: function(brokenRules) {\r\n            var brokenRulesMessages = [];\r\n            (0, _iterator.each)(brokenRules, function(_, brokenRule) {\r\n                var column = brokenRule.column;\r\n                var isGroupExpandColumn = column && void 0 !== column.groupIndex && !column.showWhenGrouped;\r\n                var isVisibleColumn = column && column.visible;\r\n                if (!brokenRule.validator.$element().parent().length && (!isVisibleColumn || isGroupExpandColumn)) {\r\n                    brokenRulesMessages.push(brokenRule.message)\r\n                }\r\n            });\r\n            return brokenRulesMessages.join(\", \")\r\n        },\r\n        validate: function(isFull) {\r\n            var _this = this;\r\n            var isValid = true;\r\n            var editingController = this._editingController;\r\n            var deferred = new _deferred.Deferred;\r\n            var completeList = [];\r\n            var editMode = editingController.getEditMode();\r\n            isFull = isFull || editMode === EDIT_MODE_ROW;\r\n            if (this._isValidationInProgress) {\r\n                return deferred.resolve(false).promise()\r\n            }\r\n            this._isValidationInProgress = true;\r\n            if (isFull) {\r\n                editingController.addDeferred(deferred);\r\n                var changes = editingController.getChanges();\r\n                (0, _iterator.each)(changes, function(index, _ref) {\r\n                    var type = _ref.type,\r\n                        key = _ref.key;\r\n                    if (\"remove\" !== type) {\r\n                        var validationData = _this._getValidationData(key);\r\n                        var validationResult = _this.validateGroup(validationData);\r\n                        completeList.push(validationResult);\r\n                        validationResult.done(function(validationResult) {\r\n                            validationData.validated = true;\r\n                            isValid = isValid && validationResult.isValid\r\n                        })\r\n                    }\r\n                })\r\n            } else {\r\n                if (this._currentCellValidator) {\r\n                    var validationResult = this.validateGroup(this._currentCellValidator._findGroup());\r\n                    completeList.push(validationResult);\r\n                    validationResult.done(function(validationResult) {\r\n                        isValid = validationResult.isValid\r\n                    })\r\n                }\r\n            }\r\n            _deferred.when.apply(void 0, completeList).done(function() {\r\n                _this._isValidationInProgress = false;\r\n                deferred.resolve(isValid)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        validateGroup: function validateGroup(validationData) {\r\n            var _validationResult, _this2 = this;\r\n            var result = new _deferred.Deferred;\r\n            var validateGroup = validationData && _validation_engine.default.getGroupConfig(validationData);\r\n            var validationResult;\r\n            if (null !== validateGroup && void 0 !== validateGroup && validateGroup.validators.length) {\r\n                this.resetRowValidationResults(validationData);\r\n                validationResult = _validation_engine.default.validateGroup(validationData)\r\n            }(0, _deferred.when)((null === (_validationResult = validationResult) || void 0 === _validationResult ? void 0 : _validationResult.complete) || validationResult).done(function(validationResult) {\r\n                (0, _deferred.when)(_this2._rowValidating(validationData, validationResult)).done(result.resolve)\r\n            });\r\n            return result.promise()\r\n        },\r\n        isRowDataModified: function(change) {\r\n            return !(0, _type.isEmptyObject)(change.data)\r\n        },\r\n        updateValidationState: function(change) {\r\n            var editMode = this._editingController.getEditMode();\r\n            var key = change.key;\r\n            var validationData = this._getValidationData(key, true);\r\n            if (FORM_BASED_MODES.indexOf(editMode) === -1) {\r\n                if (change.type === EDIT_DATA_INSERT_TYPE && !this.isRowDataModified(change)) {\r\n                    validationData.isValid = true;\r\n                    return\r\n                }\r\n                this.setDisableApplyValidationResults(true);\r\n                var groupConfig = _validation_engine.default.getGroupConfig(validationData);\r\n                if (groupConfig) {\r\n                    var validationResult = _validation_engine.default.validateGroup(validationData);\r\n                    (0, _deferred.when)(validationResult.complete || validationResult).done(function(validationResult) {\r\n                        validationData.isValid = validationResult.isValid;\r\n                        validationData.brokenRules = validationResult.brokenRules\r\n                    })\r\n                } else {\r\n                    if (!validationData.brokenRules || !validationData.brokenRules.length) {\r\n                        validationData.isValid = true\r\n                    }\r\n                }\r\n                this.setDisableApplyValidationResults(false)\r\n            } else {\r\n                validationData.isValid = true\r\n            }\r\n        },\r\n        setValidator: function(validator) {\r\n            this._currentCellValidator = validator\r\n        },\r\n        renderCellPendingIndicator: function($container) {\r\n            var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n            if (!$indicator.length) {\r\n                var $indicatorContainer = $container;\r\n                $indicator = (0, _renderer.default)(\"<div>\").appendTo($indicatorContainer).addClass(PENDING_INDICATOR_CLASS);\r\n                this._createComponent($indicator, _load_indicator.default);\r\n                $container.addClass(VALIDATION_PENDING_CLASS)\r\n            }\r\n        },\r\n        disposeCellPendingIndicator: function($container) {\r\n            var $indicator = $container.find(\".\" + PENDING_INDICATOR_CLASS);\r\n            if ($indicator.length) {\r\n                var indicator = _load_indicator.default.getInstance($indicator);\r\n                if (indicator) {\r\n                    indicator.dispose();\r\n                    indicator.$element().remove()\r\n                }\r\n                $container.removeClass(VALIDATION_PENDING_CLASS)\r\n            }\r\n        },\r\n        validationStatusChanged: function(result) {\r\n            var validator = result.validator;\r\n            var validationGroup = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            this.updateCellValidationResult({\r\n                rowKey: validationGroup.key,\r\n                columnIndex: column.index,\r\n                validationResult: result\r\n            })\r\n        },\r\n        validatorInitialized: function(arg) {\r\n            arg.component.on(\"validating\", this.validationStatusChanged.bind(this));\r\n            arg.component.on(\"validated\", this.validationStatusChanged.bind(this))\r\n        },\r\n        validatorDisposing: function(arg) {\r\n            var validator = arg.component;\r\n            var validationGroup = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            var result = this.getCellValidationResult({\r\n                rowKey: null === validationGroup || void 0 === validationGroup ? void 0 : validationGroup.key,\r\n                columnIndex: column.index\r\n            });\r\n            if (validationResultIsValid(result) && result.status === VALIDATION_STATUS.pending) {\r\n                this.cancelCellValidationResult({\r\n                    change: validationGroup,\r\n                    columnIndex: column.index\r\n                })\r\n            }\r\n        },\r\n        applyValidationResult: function($container, result) {\r\n            var validator = result.validator;\r\n            var validationGroup = validator.option(\"validationGroup\");\r\n            var column = validator.option(\"dataGetter\")().column;\r\n            result.brokenRules && result.brokenRules.forEach(function(rule) {\r\n                rule.columnIndex = column.index;\r\n                rule.column = column\r\n            });\r\n            if ($container) {\r\n                var validationResult = this.getCellValidationResult({\r\n                    rowKey: validationGroup.key,\r\n                    columnIndex: column.index\r\n                });\r\n                var requestIsDisabled = validationResultIsValid(validationResult) && validationResult.disabledPendingId === result.id;\r\n                if (this._disableApplyValidationResults || requestIsDisabled) {\r\n                    return\r\n                }\r\n                if (result.status === VALIDATION_STATUS.invalid) {\r\n                    var $focus = $container.find(\":focus\");\r\n                    if (!(0, _selectors.focused)($focus)) {\r\n                        _events_engine.default.trigger($focus, \"focus\");\r\n                        _events_engine.default.trigger($focus, _pointer.default.down)\r\n                    }\r\n                }\r\n                var editor = !column.editCellTemplate && this.getController(\"editorFactory\").getEditorInstance($container);\r\n                if (result.status === VALIDATION_STATUS.pending) {\r\n                    if (editor) {\r\n                        editor.option(\"validationStatus\", VALIDATION_STATUS.pending)\r\n                    } else {\r\n                        this.renderCellPendingIndicator($container)\r\n                    }\r\n                } else {\r\n                    if (editor) {\r\n                        editor.option(\"validationStatus\", VALIDATION_STATUS.valid)\r\n                    } else {\r\n                        this.disposeCellPendingIndicator($container)\r\n                    }\r\n                }\r\n                $container.toggleClass(this.addWidgetPrefix(INVALIDATE_CLASS), result.status === VALIDATION_STATUS.invalid)\r\n            }\r\n        },\r\n        createValidator: function(parameters, $container) {\r\n            var _this3 = this;\r\n            var editingController = this._editingController;\r\n            var column = parameters.column;\r\n            var showEditorAlways = column.showEditorAlways;\r\n            if ((0, _type.isDefined)(column.command) || !column.validationRules || !Array.isArray(column.validationRules) || !column.validationRules.length) {\r\n                return\r\n            }\r\n            var editIndex = editingController.getIndexByKey(parameters.key, editingController.getChanges());\r\n            var needCreateValidator = editIndex > -1;\r\n            if (!needCreateValidator) {\r\n                if (!showEditorAlways) {\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var visibleColumns = (null === columnsController || void 0 === columnsController ? void 0 : columnsController.getVisibleColumns()) || [];\r\n                    showEditorAlways = visibleColumns.some(function(column) {\r\n                        return column.showEditorAlways\r\n                    })\r\n                }\r\n                var isEditRow = (0, _common.equalByValue)(this.option(\"editing.editRowKey\"), parameters.key);\r\n                var isCellOrBatchEditingAllowed = editingController.isCellOrBatchEditMode() && editingController.allowUpdating({\r\n                    row: parameters.row\r\n                });\r\n                needCreateValidator = isEditRow || isCellOrBatchEditingAllowed && showEditorAlways;\r\n                if (isCellOrBatchEditingAllowed && showEditorAlways) {\r\n                    editingController._addInternalData({\r\n                        key: parameters.key,\r\n                        oldData: parameters.data\r\n                    })\r\n                }\r\n            }\r\n            if (needCreateValidator) {\r\n                if ($container && !$container.length) {\r\n                    _ui.default.log(\"E1050\");\r\n                    return\r\n                }\r\n                var validationData = this._getValidationData(parameters.key, true);\r\n                var getValue = function() {\r\n                    var change = editingController.getChangeByKey(null === validationData || void 0 === validationData ? void 0 : validationData.key);\r\n                    var value = column.calculateCellValue((null === change || void 0 === change ? void 0 : change.data) || {});\r\n                    return void 0 !== value ? value : parameters.value\r\n                };\r\n                var useDefaultValidator = $container && $container.hasClass(\"dx-widget\");\r\n                $container && $container.addClass(this.addWidgetPrefix(VALIDATOR_CLASS));\r\n                var validator = new _validator.default($container || (0, _renderer.default)(\"<div>\"), {\r\n                    name: column.caption,\r\n                    validationRules: (0, _extend.extend)(true, [], column.validationRules),\r\n                    validationGroup: validationData,\r\n                    adapter: useDefaultValidator ? null : {\r\n                        getValue: getValue,\r\n                        applyValidationResults: function(result) {\r\n                            _this3.applyValidationResult($container, result)\r\n                        }\r\n                    },\r\n                    dataGetter: function() {\r\n                        var key = null === validationData || void 0 === validationData ? void 0 : validationData.key;\r\n                        var change = editingController.getChangeByKey(key);\r\n                        var oldData = editingController._getOldData(key);\r\n                        return {\r\n                            data: (0, _array_utils.createObjectWithChanges)(oldData, null === change || void 0 === change ? void 0 : change.data),\r\n                            column: column\r\n                        }\r\n                    },\r\n                    onInitialized: this.validatorInitialized.bind(this),\r\n                    onDisposing: this.validatorDisposing.bind(this)\r\n                });\r\n                if (useDefaultValidator) {\r\n                    var adapter = validator.option(\"adapter\");\r\n                    if (adapter) {\r\n                        adapter.getValue = getValue;\r\n                        adapter.validationRequestsCallbacks = []\r\n                    }\r\n                }\r\n                return validator\r\n            }\r\n        },\r\n        setDisableApplyValidationResults: function(flag) {\r\n            this._disableApplyValidationResults = flag\r\n        },\r\n        getDisableApplyValidationResults: function() {\r\n            return this._disableApplyValidationResults\r\n        },\r\n        isCurrentValidatorProcessing: function(_ref2) {\r\n            var rowKey = _ref2.rowKey,\r\n                columnIndex = _ref2.columnIndex;\r\n            return this._currentCellValidator && this._currentCellValidator.option(\"validationGroup\").key === rowKey && this._currentCellValidator.option(\"dataGetter\")().column.index === columnIndex\r\n        },\r\n        validateCell: function(validator) {\r\n            var cellParams = {\r\n                rowKey: validator.option(\"validationGroup\").key,\r\n                columnIndex: validator.option(\"dataGetter\")().column.index\r\n            };\r\n            var validationResult = this.getCellValidationResult(cellParams);\r\n            var stateRestored = validationResultIsValid(validationResult);\r\n            if (!stateRestored) {\r\n                validationResult = validator.validate()\r\n            }\r\n            var deferred = new _deferred.Deferred;\r\n            var adapter = validator.option(\"adapter\");\r\n            if (stateRestored && validationResult.status === VALIDATION_STATUS.pending) {\r\n                this.updateCellValidationResult(cellParams);\r\n                adapter.applyValidationResults(validationResult)\r\n            }(0, _deferred.when)(validationResult.complete || validationResult).done(function(validationResult) {\r\n                stateRestored && adapter.applyValidationResults(validationResult);\r\n                deferred.resolve(validationResult)\r\n            });\r\n            return deferred.promise()\r\n        },\r\n        updateCellValidationResult: function(_ref3) {\r\n            var rowKey = _ref3.rowKey,\r\n                columnIndex = _ref3.columnIndex,\r\n                validationResult = _ref3.validationResult;\r\n            var validationData = this._getValidationData(rowKey);\r\n            if (!validationData) {\r\n                return\r\n            }\r\n            if (!validationData.validationResults) {\r\n                validationData.validationResults = {}\r\n            }\r\n            var result;\r\n            if (validationResult) {\r\n                result = (0, _extend.extend)({}, validationResult);\r\n                validationData.validationResults[columnIndex] = result;\r\n                if (validationResult.status === VALIDATION_STATUS.pending) {\r\n                    if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                        result.deferred = new _deferred.Deferred;\r\n                        result.complete.always(function() {\r\n                            result.deferred.resolve()\r\n                        });\r\n                        this._editingController.addDeferred(result.deferred)\r\n                    }\r\n                    if (this._disableApplyValidationResults) {\r\n                        result.disabledPendingId = validationResult.id;\r\n                        return\r\n                    }\r\n                }\r\n            } else {\r\n                result = validationData.validationResults[columnIndex]\r\n            }\r\n            if (result && result.disabledPendingId) {\r\n                delete result.disabledPendingId\r\n            }\r\n        },\r\n        getCellValidationResult: function(_ref4) {\r\n            var _validationData$valid;\r\n            var rowKey = _ref4.rowKey,\r\n                columnIndex = _ref4.columnIndex;\r\n            var validationData = this._getValidationData(rowKey, true);\r\n            return null === validationData || void 0 === validationData ? void 0 : null === (_validationData$valid = validationData.validationResults) || void 0 === _validationData$valid ? void 0 : _validationData$valid[columnIndex]\r\n        },\r\n        removeCellValidationResult: function(_ref5) {\r\n            var change = _ref5.change,\r\n                columnIndex = _ref5.columnIndex;\r\n            var validationData = this._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n            if (validationData && validationData.validationResults) {\r\n                this.cancelCellValidationResult({\r\n                    change: change,\r\n                    columnIndex: columnIndex\r\n                });\r\n                delete validationData.validationResults[columnIndex]\r\n            }\r\n        },\r\n        cancelCellValidationResult: function(_ref6) {\r\n            var change = _ref6.change,\r\n                columnIndex = _ref6.columnIndex;\r\n            var validationData = this._getValidationData(change.key);\r\n            if (change && validationData.validationResults) {\r\n                var result = validationData.validationResults[columnIndex];\r\n                if (result) {\r\n                    result.deferred && result.deferred.reject(VALIDATION_CANCELLED);\r\n                    validationData.validationResults[columnIndex] = VALIDATION_CANCELLED\r\n                }\r\n            }\r\n        },\r\n        resetRowValidationResults: function(validationData) {\r\n            if (validationData) {\r\n                validationData.validationResults && delete validationData.validationResults;\r\n                delete validationData.validated\r\n            }\r\n        },\r\n        isInvalidCell: function(_ref7) {\r\n            var rowKey = _ref7.rowKey,\r\n                columnIndex = _ref7.columnIndex;\r\n            var result = this.getCellValidationResult({\r\n                rowKey: rowKey,\r\n                columnIndex: columnIndex\r\n            });\r\n            return validationResultIsValid(result) && result.status === VALIDATION_STATUS.invalid\r\n        },\r\n        getCellValidator: function(_ref8) {\r\n            var rowKey = _ref8.rowKey,\r\n                columnIndex = _ref8.columnIndex;\r\n            var validationData = this._getValidationData(rowKey);\r\n            var groupConfig = validationData && _validation_engine.default.getGroupConfig(validationData);\r\n            var validators = groupConfig && groupConfig.validators;\r\n            return validators && validators.filter(function(v) {\r\n                var column = v.option(\"dataGetter\")().column;\r\n                return column ? column.index === columnIndex : false\r\n            })[0]\r\n        },\r\n        setCellValidationStatus: function(cellOptions) {\r\n            var validationResult = this.getCellValidationResult({\r\n                rowKey: cellOptions.key,\r\n                columnIndex: cellOptions.column.index\r\n            });\r\n            if ((0, _type.isDefined)(validationResult)) {\r\n                cellOptions.validationStatus = validationResult !== VALIDATION_CANCELLED ? validationResult.status : VALIDATION_CANCELLED\r\n            } else {\r\n                delete cellOptions.validationStatus\r\n            }\r\n        }\r\n    }\r\n}());\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                texts: {\r\n                    validationCancelChanges: _message.default.format(\"dxDataGrid-validationCancelChanges\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        validating: ValidatingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                _addChange: function(options, row) {\r\n                    var index = this.callBase(options, row);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (index >= 0 && options.type !== EDIT_DATA_REMOVE_TYPE) {\r\n                        var change = this.getChanges()[index];\r\n                        change && validatingController.updateValidationState(change)\r\n                    }\r\n                    return index\r\n                },\r\n                _handleChangesChange: function(args) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    args.value.forEach(function(change) {\r\n                        if (void 0 === validatingController._getValidationData(change.key)) {\r\n                            validatingController.updateValidationState(change)\r\n                        }\r\n                    })\r\n                },\r\n                _updateRowAndPageIndices: function() {\r\n                    var _this4 = this;\r\n                    var that = this;\r\n                    var startInsertIndex = that.getView(\"rowsView\").getTopVisibleItemIndex();\r\n                    var rowIndex = startInsertIndex;\r\n                    (0, _iterator.each)(that.getChanges(), function(_, _ref9) {\r\n                        var key = _ref9.key,\r\n                            type = _ref9.type;\r\n                        var validationData = _this4.getController(\"validating\")._getValidationData(key);\r\n                        if (validationData && !validationData.isValid && validationData.pageIndex !== that._pageIndex) {\r\n                            validationData.pageIndex = that._pageIndex;\r\n                            if (type === EDIT_DATA_INSERT_TYPE) {\r\n                                validationData.rowIndex = startInsertIndex\r\n                            } else {\r\n                                validationData.rowIndex = rowIndex\r\n                            }\r\n                            rowIndex++\r\n                        }\r\n                    })\r\n                },\r\n                getEditFormOptions: function(detailOptions) {\r\n                    var editFormOptions = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationData = validatingController._getValidationData(detailOptions.key, true);\r\n                    return (0, _extend.extend)({}, editFormOptions, {\r\n                        validationGroup: validationData\r\n                    })\r\n                },\r\n                _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isCustomSetCellValue && this._editForm && !row.isNewRow) {\r\n                        this._editForm.validate()\r\n                    }\r\n                },\r\n                _needInsertItem: function(_ref10) {\r\n                    var key = _ref10.key;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var validationData = this.getController(\"validating\")._getValidationData(key);\r\n                    if (result && !(null !== validationData && void 0 !== validationData && validationData.isValid)) {\r\n                        result = key.pageIndex === this._pageIndex\r\n                    }\r\n                    return result\r\n                },\r\n                _prepareEditCell: function(params) {\r\n                    var isNotCanceled = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    if (isNotCanceled && params.column.showEditorAlways) {\r\n                        validatingController.updateValidationState({\r\n                            key: params.key\r\n                        })\r\n                    }\r\n                    return isNotCanceled\r\n                },\r\n                processItems: function(items, changeType) {\r\n                    var that = this;\r\n                    var i;\r\n                    var changes = that.getChanges();\r\n                    var dataController = that.getController(\"data\");\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var getIndexByChange = function(change, items) {\r\n                        var index = -1;\r\n                        var isInsert = change.type === EDIT_DATA_INSERT_TYPE;\r\n                        var key = change.key;\r\n                        (0, _iterator.each)(items, function(i, item) {\r\n                            if ((0, _common.equalByValue)(key, isInsert ? item : dataController.keyOf(item))) {\r\n                                index = i;\r\n                                return false\r\n                            }\r\n                        });\r\n                        return index\r\n                    };\r\n                    items = that.callBase(items, changeType);\r\n                    var itemsCount = items.length;\r\n                    var addInValidItem = function(change, validationData) {\r\n                        var data = {\r\n                            key: change.key\r\n                        };\r\n                        var index = getIndexByChange(change, items);\r\n                        if (index >= 0) {\r\n                            return\r\n                        }\r\n                        validationData.rowIndex = validationData.rowIndex > itemsCount ? validationData.rowIndex % itemsCount : validationData.rowIndex;\r\n                        var rowIndex = validationData.rowIndex;\r\n                        data[INSERT_INDEX] = 1;\r\n                        items.splice(rowIndex, 0, data)\r\n                    };\r\n                    if (that.getEditMode() === EDIT_MODE_BATCH && \"prepend\" !== changeType && \"append\" !== changeType) {\r\n                        for (i = 0; i < changes.length; i++) {\r\n                            var key = changes[i].key;\r\n                            var validationData = validatingController._getValidationData(key);\r\n                            if (validationData && changes[i].type && validationData.pageIndex === that._pageIndex && key.pageIndex !== that._pageIndex) {\r\n                                addInValidItem(changes[i], validationData)\r\n                            }\r\n                        }\r\n                    }\r\n                    return items\r\n                },\r\n                processDataItem: function(item) {\r\n                    var isInserted = item.data[INSERT_INDEX];\r\n                    var key = isInserted ? item.data.key : item.key;\r\n                    var editMode = this.getEditMode();\r\n                    if (editMode === EDIT_MODE_BATCH && isInserted && key) {\r\n                        var changes = this.getChanges();\r\n                        var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\r\n                        if (editIndex >= 0) {\r\n                            var change = changes[editIndex];\r\n                            if (change.type !== EDIT_DATA_INSERT_TYPE) {\r\n                                var oldData = this._getOldData(change.key);\r\n                                item.data = (0, _extend.extend)(true, {}, oldData, change.data);\r\n                                item.key = key\r\n                            }\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _createInvisibleColumnValidators: function(changes) {\r\n                    var _this5 = this;\r\n                    var that = this;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var columnsController = this.getController(\"columns\");\r\n                    var columns = columnsController.getColumns();\r\n                    var invisibleColumns = columnsController.getInvisibleColumns().filter(function(column) {\r\n                        return !column.isBand\r\n                    });\r\n                    var groupColumns = columnsController.getGroupColumns().filter(function(column) {\r\n                        return !column.showWhenGrouped && invisibleColumns.indexOf(column) === -1\r\n                    });\r\n                    var invisibleColumnValidators = [];\r\n                    var isCellVisible = function(column, rowKey) {\r\n                        return _this5._dataController.getRowIndexByKey(rowKey) >= 0 && invisibleColumns.indexOf(column) < 0\r\n                    };\r\n                    invisibleColumns.push.apply(invisibleColumns, _toConsumableArray(groupColumns));\r\n                    if (FORM_BASED_MODES.indexOf(this.getEditMode()) === -1) {\r\n                        (0, _iterator.each)(columns, function(_, column) {\r\n                            changes.forEach(function(change) {\r\n                                var data;\r\n                                if (isCellVisible(column, change.key)) {\r\n                                    return\r\n                                }\r\n                                if (change.type === EDIT_DATA_INSERT_TYPE) {\r\n                                    data = change.data\r\n                                } else {\r\n                                    if (\"update\" === change.type) {\r\n                                        var oldData = that._getOldData(change.key);\r\n                                        data = (0, _array_utils.createObjectWithChanges)(oldData, change.data)\r\n                                    }\r\n                                }\r\n                                if (data) {\r\n                                    var validator = validatingController.createValidator({\r\n                                        column: column,\r\n                                        key: change.key,\r\n                                        value: column.calculateCellValue(data)\r\n                                    });\r\n                                    if (validator) {\r\n                                        invisibleColumnValidators.push(validator)\r\n                                    }\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                    return function() {\r\n                        invisibleColumnValidators.forEach(function(validator) {\r\n                            validator.dispose()\r\n                        })\r\n                    }\r\n                },\r\n                _beforeSaveEditData: function(change, editIndex) {\r\n                    var _this6 = this;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationData = validatingController._getValidationData(null === change || void 0 === change ? void 0 : change.key);\r\n                    if (change) {\r\n                        var isValid = \"remove\" === change.type || validationData.isValid;\r\n                        result = result || !isValid\r\n                    } else {\r\n                        var disposeValidators = this._createInvisibleColumnValidators(this.getChanges());\r\n                        result = new _deferred.Deferred;\r\n                        this.executeOperation(result, function() {\r\n                            validatingController.validate(true).done(function(isFullValid) {\r\n                                disposeValidators();\r\n                                _this6._updateRowAndPageIndices();\r\n                                switch (_this6.getEditMode()) {\r\n                                    case EDIT_MODE_CELL:\r\n                                        if (!isFullValid) {\r\n                                            _this6._focusEditingCell()\r\n                                        }\r\n                                        break;\r\n                                    case EDIT_MODE_BATCH:\r\n                                        if (!isFullValid) {\r\n                                            _this6._resetEditRowKey();\r\n                                            _this6._resetEditColumnName();\r\n                                            _this6.getController(\"data\").updateItems()\r\n                                        }\r\n                                }\r\n                                result.resolve(!isFullValid)\r\n                            })\r\n                        })\r\n                    }\r\n                    return result.promise ? result.promise() : result\r\n                },\r\n                _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n                    var result = this.callBase(rowIndex, columnIndex, item);\r\n                    if (this.getEditMode() === EDIT_MODE_CELL) {\r\n                        var $cell = this._rowsView._getCellElement(rowIndex, columnIndex);\r\n                        var validator = $cell && $cell.data(\"dxValidator\");\r\n                        var rowOptions = $cell && $cell.closest(\".dx-row\").data(\"options\");\r\n                        var value = validator && validator.option(\"adapter\").getValue();\r\n                        if (validator && cellValueShouldBeValidated(value, rowOptions)) {\r\n                            var validatingController = this.getController(\"validating\");\r\n                            var deferred = new _deferred.Deferred;\r\n                            (0, _deferred.when)(validatingController.validateCell(validator), result).done(function(validationResult, result) {\r\n                                deferred.resolve(validationResult.status === VALIDATION_STATUS.valid && result)\r\n                            });\r\n                            return deferred.promise()\r\n                        } else {\r\n                            if (!validator) {\r\n                                return result\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _afterSaveEditData: function(cancel) {\r\n                    var _this7 = this;\r\n                    var $firstErrorRow;\r\n                    (0, _iterator.each)(this.getChanges(), function(_, change) {\r\n                        var $errorRow = _this7._showErrorRow(change);\r\n                        $firstErrorRow = $firstErrorRow || $errorRow\r\n                    });\r\n                    if ($firstErrorRow) {\r\n                        var scrollable = this._rowsView.getScrollable();\r\n                        if (scrollable) {\r\n                            scrollable.update();\r\n                            scrollable.scrollToElement($firstErrorRow)\r\n                        }\r\n                    }\r\n                    if (cancel && this.getEditMode() === EDIT_MODE_CELL && this._needUpdateRow()) {\r\n                        var editRowIndex = this.getEditRowIndex();\r\n                        this._dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [editRowIndex]\r\n                        });\r\n                        this._focusEditingCell()\r\n                    } else {\r\n                        if (!cancel) {\r\n                            this.getController(\"validating\")._validationState = []\r\n                        }\r\n                    }\r\n                },\r\n                _handleDataChanged: function(args) {\r\n                    var validationState = this.getController(\"validating\")._validationState;\r\n                    if (\"standard\" === this.option(\"scrolling.mode\")) {\r\n                        this.resetRowAndPageIndices()\r\n                    }\r\n                    if (\"prepend\" === args.changeType) {\r\n                        (0, _iterator.each)(validationState, function(_, validationData) {\r\n                            validationData.rowIndex += args.items.length\r\n                        })\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                resetRowAndPageIndices: function() {\r\n                    var _this8 = this;\r\n                    var validationState = this.getController(\"validating\")._validationState;\r\n                    (0, _iterator.each)(validationState, function(_, validationData) {\r\n                        if (validationData.pageIndex !== _this8._pageIndex) {\r\n                            delete validationData.pageIndex;\r\n                            delete validationData.rowIndex\r\n                        }\r\n                    })\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    var validatingController = this.getController(\"validating\");\r\n                    validatingController._validationState = [];\r\n                    this.callBase()\r\n                },\r\n                _showErrorRow: function(change) {\r\n                    var $popupContent;\r\n                    var errorHandling = this.getController(\"errorHandling\");\r\n                    var items = this.getController(\"data\").items();\r\n                    var rowIndex = this.getIndexByKey(change.key, items);\r\n                    var validationData = this.getController(\"validating\")._getValidationData(change.key);\r\n                    if (!(null !== validationData && void 0 !== validationData && validationData.isValid) && null !== validationData && void 0 !== validationData && validationData.errorText && rowIndex >= 0) {\r\n                        $popupContent = this.getPopupContent();\r\n                        return errorHandling && errorHandling.renderErrorRow(null === validationData || void 0 === validationData ? void 0 : validationData.errorText, rowIndex, $popupContent)\r\n                    }\r\n                },\r\n                updateFieldValue: function(e) {\r\n                    var _this9 = this;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var deferred = new _deferred.Deferred;\r\n                    validatingController.removeCellValidationResult({\r\n                        change: this.getChangeByKey(e.key),\r\n                        columnIndex: e.column.index\r\n                    });\r\n                    this.callBase.apply(this, arguments).done(function() {\r\n                        var currentValidator = validatingController.getCellValidator({\r\n                            rowKey: e.key,\r\n                            columnIndex: e.column.index\r\n                        });\r\n                        (0, _deferred.when)(currentValidator && validatingController.validateCell(currentValidator)).done(function(validationResult) {\r\n                            _this9.getController(\"editorFactory\").refocus();\r\n                            deferred.resolve(validationResult)\r\n                        })\r\n                    });\r\n                    return deferred.promise()\r\n                },\r\n                highlightDataCell: function($cell, parameters) {\r\n                    this.callBase.apply(this, arguments);\r\n                    var validatingController = this.getController(\"validating\");\r\n                    validatingController.setCellValidationStatus(parameters);\r\n                    var isEditableCell = !!parameters.setValue;\r\n                    var cellModified = this.isCellModified(parameters);\r\n                    var isValidated = (0, _type.isDefined)(parameters.validationStatus);\r\n                    var needValidation = cellModified && parameters.column.setCellValue || isEditableCell && !cellModified && !(parameters.row.isNewRow || !isValidated);\r\n                    if (needValidation) {\r\n                        var validator = $cell.data(\"dxValidator\");\r\n                        if (validator) {\r\n                            (0, _deferred.when)(this.getController(\"validating\").validateCell(validator)).done(function() {\r\n                                validatingController.setCellValidationStatus(parameters)\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                getChangeByKey: function(key) {\r\n                    var changes = this.getChanges();\r\n                    return changes[_uiGrid_core2.default.getIndexByKey(key, changes)]\r\n                },\r\n                isCellModified: function(parameters) {\r\n                    var cellModified = this.callBase(parameters);\r\n                    var change = this.getChangeByKey(parameters.key);\r\n                    var isCellInvalid = !!parameters.row && this.getController(\"validating\").isInvalidCell({\r\n                        rowKey: parameters.key,\r\n                        columnIndex: parameters.column.index\r\n                    });\r\n                    return cellModified || this.getController(\"validating\")._rowIsValidated(change) && isCellInvalid\r\n                }\r\n            },\r\n            editorFactory: function() {\r\n                var getWidthOfVisibleCells = function(that, element) {\r\n                    var rowIndex = (0, _renderer.default)(element).closest(\"tr\").index();\r\n                    var $cellElements = (0, _renderer.default)(that._rowsView.getRowElement(rowIndex)).first().children().filter(\":not(.dx-hidden-cell)\");\r\n                    return that._rowsView._getWidths($cellElements).reduce(function(w1, w2) {\r\n                        return w1 + w2\r\n                    }, 0)\r\n                };\r\n                var getBoundaryNonFixedColumnsInfo = function(fixedColumns) {\r\n                    var firstNonFixedColumnIndex;\r\n                    var lastNonFixedColumnIndex;\r\n                    fixedColumns.some(function(column, index) {\r\n                        if (column.command === COMMAND_TRANSPARENT) {\r\n                            firstNonFixedColumnIndex = 0 === index ? -1 : index;\r\n                            lastNonFixedColumnIndex = index === fixedColumns.length - 1 ? -1 : index + column.colspan - 1;\r\n                            return true\r\n                        }\r\n                    });\r\n                    return {\r\n                        startColumnIndex: firstNonFixedColumnIndex,\r\n                        endColumnIndex: lastNonFixedColumnIndex\r\n                    }\r\n                };\r\n                return {\r\n                    _showRevertButton: function($container) {\r\n                        var _this10 = this;\r\n                        if (!$container || !$container.length) {\r\n                            return\r\n                        }\r\n                        var $tooltipElement = $container.find(\".\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                        var $overlayContainer = $container.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\r\n                        $tooltipElement && $tooltipElement.remove();\r\n                        $tooltipElement = (0, _renderer.default)(\"<div>\").addClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)).appendTo($container);\r\n                        var tooltipOptions = {\r\n                            animation: null,\r\n                            visible: true,\r\n                            width: \"auto\",\r\n                            height: \"auto\",\r\n                            target: $container,\r\n                            shading: false,\r\n                            container: $overlayContainer,\r\n                            propagateOutsideClick: true,\r\n                            closeOnOutsideClick: false,\r\n                            closeOnTargetScroll: false,\r\n                            contentTemplate: function() {\r\n                                var $buttonElement = (0,\r\n                                    _renderer.default)(\"<div>\").addClass(REVERT_BUTTON_CLASS);\r\n                                var buttonOptions = {\r\n                                    icon: \"revert\",\r\n                                    hint: _this10.option(\"editing.texts.validationCancelChanges\"),\r\n                                    onClick: function() {\r\n                                        _this10._editingController.cancelEditData()\r\n                                    }\r\n                                };\r\n                                return new _button.default($buttonElement, buttonOptions).$element()\r\n                            },\r\n                            position: {\r\n                                my: \"left top\",\r\n                                at: \"right top\",\r\n                                offset: \"1 0\",\r\n                                collision: \"flip\",\r\n                                boundaryOffset: \"0 0\",\r\n                                boundary: this._rowsView.element()\r\n                            },\r\n                            onPositioned: this._positionedHandler.bind(this)\r\n                        };\r\n                        return new _overlay.default($tooltipElement, tooltipOptions)\r\n                    },\r\n                    _hideFixedGroupCell: function($cell, overlayOptions) {\r\n                        var $nextFixedRowElement;\r\n                        var $groupCellElement;\r\n                        var isFixedColumns = this._rowsView.isFixedColumns();\r\n                        var isFormEditMode = this._editingController.isFormEditMode();\r\n                        if (isFixedColumns && !isFormEditMode) {\r\n                            var nextRowOptions = $cell.closest(\".dx-row\").next().data(\"options\");\r\n                            if (nextRowOptions && \"group\" === nextRowOptions.rowType) {\r\n                                $nextFixedRowElement = (0, _renderer.default)(this._rowsView.getRowElement(nextRowOptions.rowIndex)).last();\r\n                                $groupCellElement = $nextFixedRowElement.find(\".\" + GROUP_CELL_CLASS);\r\n                                if ($groupCellElement.length && \"hidden\" !== $groupCellElement.get(0).style.visibility) {\r\n                                    $groupCellElement.css(\"visibility\", \"hidden\");\r\n                                    overlayOptions.onDisposing = function() {\r\n                                        $groupCellElement.css(\"visibility\", \"\")\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    _positionedHandler: function(e, isOverlayVisible) {\r\n                        if (!e.component.__skipPositionProcessing) {\r\n                            var isRevertButton = (0, _renderer.default)(e.element).hasClass(this.addWidgetPrefix(REVERT_TOOLTIP_CLASS));\r\n                            var needRepaint = !isRevertButton && this._rowsView.updateFreeSpaceRowHeight();\r\n                            var normalizedPosition = this._normalizeValidationMessagePositionAndMaxWidth(e, isRevertButton, isOverlayVisible);\r\n                            e.component.__skipPositionProcessing = !!(needRepaint || normalizedPosition);\r\n                            if (normalizedPosition) {\r\n                                e.component.option(normalizedPosition)\r\n                            } else {\r\n                                if (needRepaint) {\r\n                                    e.component.repaint()\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                    _showValidationMessage: function($cell, messages, alignment, revertTooltip) {\r\n                        var _this11 = this;\r\n                        var editorPopup = $cell.find(\".dx-dropdowneditor-overlay\").data(\"dxPopup\");\r\n                        var isOverlayVisible = editorPopup && editorPopup.option(\"visible\");\r\n                        var myPosition = isOverlayVisible ? \"top right\" : \"top \" + alignment;\r\n                        var atPosition = isOverlayVisible ? \"top left\" : \"bottom \" + alignment;\r\n                        var $overlayContainer = $cell.closest(\".\".concat(this.addWidgetPrefix(CONTENT_CLASS)));\r\n                        var errorMessageText = \"\";\r\n                        messages && messages.forEach(function(message) {\r\n                            errorMessageText += (errorMessageText.length ? \"<br/>\" : \"\") + (0, _string.encodeHtml)(message)\r\n                        });\r\n                        var $overlayElement = (0, _renderer.default)(\"<div>\").addClass(INVALID_MESSAGE_CLASS).addClass(INVALID_MESSAGE_ALWAYS_CLASS).addClass(this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS)).html(errorMessageText).appendTo($cell);\r\n                        var overlayOptions = {\r\n                            target: $cell,\r\n                            container: $overlayContainer,\r\n                            shading: false,\r\n                            width: \"auto\",\r\n                            height: \"auto\",\r\n                            visible: true,\r\n                            animation: false,\r\n                            propagateOutsideClick: true,\r\n                            closeOnOutsideClick: false,\r\n                            closeOnTargetScroll: false,\r\n                            position: {\r\n                                collision: \"flip\",\r\n                                boundary: this._rowsView.element(),\r\n                                boundaryOffset: \"0 0\",\r\n                                offset: {\r\n                                    x: 0,\r\n                                    y: !isOverlayVisible && (_browser.default.mozilla || _browser.default.msie) ? -1 : 0\r\n                                },\r\n                                my: myPosition,\r\n                                at: atPosition\r\n                            },\r\n                            onPositioned: function(e) {\r\n                                _this11._positionedHandler(e, isOverlayVisible);\r\n                                _this11._shiftValidationMessageIfNeed(e.component.$content(), revertTooltip && revertTooltip.$content(), $cell)\r\n                            }\r\n                        };\r\n                        this._hideFixedGroupCell($cell, overlayOptions);\r\n                        new _overlay.default($overlayElement, overlayOptions)\r\n                    },\r\n                    _normalizeValidationMessagePositionAndMaxWidth: function(options, isRevertButton, isOverlayVisible) {\r\n                        var fixedColumns = this._columnsController.getFixedColumns();\r\n                        if (!fixedColumns || !fixedColumns.length) {\r\n                            return\r\n                        }\r\n                        var position;\r\n                        var visibleTableWidth = !isRevertButton && getWidthOfVisibleCells(this, options.element);\r\n                        var $overlayContentElement = options.component.$content();\r\n                        var validationMessageWidth = $overlayContentElement.outerWidth(true);\r\n                        var needMaxWidth = !isRevertButton && validationMessageWidth > visibleTableWidth;\r\n                        var columnIndex = this._rowsView.getCellIndex((0, _renderer.default)(options.element).closest(\"td\"));\r\n                        var boundaryNonFixedColumnsInfo = getBoundaryNonFixedColumnsInfo(fixedColumns);\r\n                        if (!isRevertButton && (columnIndex === boundaryNonFixedColumnsInfo.startColumnIndex || needMaxWidth)) {\r\n                            position = {\r\n                                collision: \"none flip\",\r\n                                my: \"top left\",\r\n                                at: isOverlayVisible ? \"top right\" : \"bottom left\"\r\n                            }\r\n                        } else {\r\n                            if (columnIndex === boundaryNonFixedColumnsInfo.endColumnIndex) {\r\n                                position = {\r\n                                    collision: \"none flip\",\r\n                                    my: \"top right\",\r\n                                    at: isRevertButton || isOverlayVisible ? \"top left\" : \"bottom right\"\r\n                                };\r\n                                if (isRevertButton) {\r\n                                    position.offset = \"-1 0\"\r\n                                }\r\n                            }\r\n                        }\r\n                        return position && {\r\n                            position: position,\r\n                            maxWidth: needMaxWidth ? visibleTableWidth - 2 : void 0\r\n                        }\r\n                    },\r\n                    _shiftValidationMessageIfNeed: function($content, $revertContent, $cell) {\r\n                        if (!$revertContent) {\r\n                            return\r\n                        }\r\n                        var contentOffset = $content.offset();\r\n                        var revertContentOffset = $revertContent.offset();\r\n                        if (contentOffset.top === revertContentOffset.top && contentOffset.left + $content.width() > revertContentOffset.left) {\r\n                            var left = $revertContent.width() + PADDING_BETWEEN_TOOLTIPS;\r\n                            $content.css(\"left\", revertContentOffset.left < $cell.offset().left ? -left : left)\r\n                        }\r\n                    },\r\n                    _getTooltipsSelector: function() {\r\n                        var invalidMessageClass = this.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS);\r\n                        var revertTooltipClass = this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\r\n                        return \".dx-editor-cell .\" + revertTooltipClass + \", .dx-editor-cell .\" + invalidMessageClass + \", .dx-cell-modified .\" + invalidMessageClass\r\n                    },\r\n                    init: function() {\r\n                        this.callBase();\r\n                        this._editingController = this.getController(\"editing\");\r\n                        this._columnsController = this.getController(\"columns\");\r\n                        this._rowsView = this.getView(\"rowsView\")\r\n                    },\r\n                    loseFocus: function(skipValidator) {\r\n                        if (!skipValidator) {\r\n                            this.getController(\"validating\").setValidator(null)\r\n                        }\r\n                        this.callBase()\r\n                    },\r\n                    updateCellState: function($element, validationResult, hideBorder) {\r\n                        var _change$data;\r\n                        var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                        var $cell = null !== $focus && void 0 !== $focus && $focus.is(\"td\") ? $focus : null;\r\n                        var rowOptions = null === $focus || void 0 === $focus ? void 0 : $focus.closest(\".dx-row\").data(\"options\");\r\n                        var change = rowOptions ? this.getController(\"editing\").getChangeByKey(rowOptions.key) : null;\r\n                        var column = $cell && this.getController(\"columns\").getVisibleColumns()[$cell.index()];\r\n                        var isCellModified = void 0 !== (null === change || void 0 === change ? void 0 : null === (_change$data = change.data) || void 0 === _change$data ? void 0 : _change$data[null === column || void 0 === column ? void 0 : column.name]) && !this._editingController.isSaving();\r\n                        var revertTooltip;\r\n                        if ((null === validationResult || void 0 === validationResult ? void 0 : validationResult.status) === VALIDATION_STATUS.invalid || isCellModified) {\r\n                            if (this._editingController.getEditMode() === EDIT_MODE_CELL) {\r\n                                revertTooltip = this._showRevertButton($focus)\r\n                            }\r\n                        }\r\n                        var showValidationMessage = validationResult && validationResult.status === VALIDATION_STATUS.invalid;\r\n                        if (showValidationMessage && $cell && column && validationResult && validationResult.brokenRules) {\r\n                            var errorMessages = [];\r\n                            validationResult.brokenRules.forEach(function(rule) {\r\n                                errorMessages.push(rule.message)\r\n                            });\r\n                            this._showValidationMessage($focus, errorMessages, column.alignment || \"left\", revertTooltip)\r\n                        }!hideBorder && this._rowsView.element() && this._rowsView.updateFreeSpaceRowHeight()\r\n                    },\r\n                    focus: function($element, hideBorder) {\r\n                        var _this12 = this;\r\n                        if (!arguments.length) {\r\n                            return this.callBase()\r\n                        }\r\n                        var $tooltips = $element && $element.closest(\".\" + this.addWidgetPrefix(ROWS_VIEW_CLASS)).find(this._getTooltipsSelector());\r\n                        $tooltips && $tooltips.remove();\r\n                        if (null !== $element && void 0 !== $element && $element.hasClass(\"dx-row\")) {\r\n                            return this.callBase($element, hideBorder)\r\n                        }\r\n                        var $focus = null === $element || void 0 === $element ? void 0 : $element.closest(this._getFocusCellSelector());\r\n                        var callBase = this.callBase;\r\n                        var validator = $focus && ($focus.data(\"dxValidator\") || $element.find(\".\" + this.addWidgetPrefix(VALIDATOR_CLASS)).eq(0).data(\"dxValidator\"));\r\n                        var rowOptions = $focus && $focus.closest(\".dx-row\").data(\"options\");\r\n                        var editingController = this.getController(\"editing\");\r\n                        var change = rowOptions ? editingController.getChangeByKey(rowOptions.key) : null;\r\n                        var validationResult;\r\n                        var validatingController = this.getController(\"validating\");\r\n                        if (validator) {\r\n                            validatingController.setValidator(validator);\r\n                            var value = validator.option(\"adapter\").getValue();\r\n                            if (cellValueShouldBeValidated(value, rowOptions) || validatingController._rowIsValidated(change)) {\r\n                                editingController.waitForDeferredOperations().done(function() {\r\n                                    (0, _deferred.when)(validatingController.validateCell(validator)).done(function(result) {\r\n                                        validationResult = result;\r\n                                        var column = validationResult.validator.option(\"dataGetter\")().column;\r\n                                        if (change && column && !validatingController.isCurrentValidatorProcessing({\r\n                                                rowKey: change.key,\r\n                                                columnIndex: column.index\r\n                                            })) {\r\n                                            return\r\n                                        }\r\n                                        if (validationResult.status === VALIDATION_STATUS.invalid) {\r\n                                            hideBorder = true\r\n                                        }\r\n                                        _this12.updateCellState($element, validationResult, hideBorder);\r\n                                        callBase.call(_this12, $element, hideBorder)\r\n                                    })\r\n                                });\r\n                                return this.callBase($element, hideBorder)\r\n                            }\r\n                        }\r\n                        this.updateCellState($element, validationResult, hideBorder);\r\n                        return this.callBase($element, hideBorder)\r\n                    },\r\n                    getEditorInstance: function($container) {\r\n                        var $editor = $container.find(\".dx-texteditor\").eq(0);\r\n                        return _uiGrid_core2.default.getWidgetInstance($editor)\r\n                    }\r\n                }\r\n            }(),\r\n            data: {\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var cell = oldRow.cells[columnIndex];\r\n                    var oldValidationStatus = cell && cell.validationStatus;\r\n                    var validatingController = this.getController(\"validating\");\r\n                    var validationResult = validatingController.getCellValidationResult({\r\n                        rowKey: oldRow.key,\r\n                        columnIndex: columnIndex\r\n                    });\r\n                    var validationData = validatingController._getValidationData(oldRow.key);\r\n                    var newValidationStatus = validationResultIsValid(validationResult) ? validationResult.status : validationResult;\r\n                    var rowIsModified = JSON.stringify(newRow.modifiedValues) !== JSON.stringify(oldRow.modifiedValues);\r\n                    var cellIsMarkedAsInvalid = (0, _renderer.default)(null === cell || void 0 === cell ? void 0 : cell.cellElement).hasClass(this.addWidgetPrefix(INVALIDATE_CLASS));\r\n                    if (oldValidationStatus !== newValidationStatus && rowIsModified || validationData.isValid && cellIsMarkedAsInvalid) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                updateFreeSpaceRowHeight: function($table) {\r\n                    var that = this;\r\n                    var $rowElements;\r\n                    var $freeSpaceRowElement;\r\n                    var $freeSpaceRowElements;\r\n                    var $element = that.element();\r\n                    var $tooltipContent = $element && $element.find(\".\" + that.addWidgetPrefix(WIDGET_INVALID_MESSAGE_CLASS) + \" .dx-overlay-content\");\r\n                    that.callBase($table);\r\n                    if ($tooltipContent && $tooltipContent.length) {\r\n                        $rowElements = that._getRowElements();\r\n                        $freeSpaceRowElements = that._getFreeSpaceRowElements($table);\r\n                        $freeSpaceRowElement = $freeSpaceRowElements.first();\r\n                        if ($freeSpaceRowElement && 1 === $rowElements.length && (!$freeSpaceRowElement.is(\":visible\") || $tooltipContent.outerHeight() > $freeSpaceRowElement.outerHeight())) {\r\n                            $freeSpaceRowElements.show();\r\n                            $freeSpaceRowElements.height($tooltipContent.outerHeight());\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                _formItemPrepared: function(cellOptions, $container) {\r\n                    var _this13 = this;\r\n                    this.callBase.apply(this, arguments);\r\n                    (0, _common.deferUpdate)(function() {\r\n                        var $editor = $container.find(\".dx-widget\").first();\r\n                        var isEditorDisposed = $editor.length && !$editor.children().length;\r\n                        if (!isEditorDisposed) {\r\n                            _this13.getController(\"validating\").createValidator(cellOptions, $editor)\r\n                        }\r\n                    })\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    if (!this.getController(\"editing\").isFormEditMode()) {\r\n                        this.getController(\"validating\").createValidator(parameters, $cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}