{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _dom_adapter = _interopRequireDefault(require(\"../../core/dom_adapter\"));\n\nvar _window = require(\"../../core/utils/window\");\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _guid = _interopRequireDefault(require(\"../../core/guid\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _click = require(\"../../events/click\");\n\nvar _double_click = require(\"../../events/double_click\");\n\nvar _pointer = _interopRequireDefault(require(\"../../events/pointer\"));\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _array_utils = require(\"../../data/array_utils\");\n\nvar _index = require(\"../../events/utils/index\");\n\nvar _dialog = require(\"../dialog\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _button = _interopRequireDefault(require(\"../button\"));\n\nvar _popup = _interopRequireDefault(require(\"../popup\"));\n\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\n\nvar _form = _interopRequireDefault(require(\"../form\"));\n\nvar _hold = _interopRequireDefault(require(\"../../events/hold\"));\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar iconUtils = _interopRequireWildcard(require(\"../../core/utils/icon\"));\n\nvar _ui = _interopRequireDefault(require(\"../scroll_view/ui.scrollable\"));\n\nfunction _getRequireWildcardCache() {\n  if (\"function\" !== typeof WeakMap) {\n    return null;\n  }\n\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else {\n      if (Object.getOwnPropertyDescriptors) {\n        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n      } else {\n        ownKeys(Object(source)).forEach(function (key) {\n          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n      }\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) {\n    return;\n  }\n\n  if (\"string\" === typeof o) {\n    return _arrayLikeToArray(o, minLen);\n  }\n\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n\n  if (\"Object\" === n && o.constructor) {\n    n = o.constructor.name;\n  }\n\n  if (\"Map\" === n || \"Set\" === n) {\n    return Array.from(o);\n  }\n\n  if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\n    return _arrayLikeToArray(o, minLen);\n  }\n}\n\nfunction _iterableToArray(iter) {\n  if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\n    return Array.from(iter);\n  }\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    return _arrayLikeToArray(arr);\n  }\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (null == len || len > arr.length) {\n    len = arr.length;\n  }\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar EDIT_FORM_CLASS = \"edit-form\";\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\nvar READONLY_CLASS = \"readonly\";\nvar EDIT_POPUP_CLASS = \"edit-popup\";\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\nvar LINK_CLASS = \"dx-link\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_SELECTED = \"dx-selection\";\nvar EDIT_ROW = \"dx-edit-row\";\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\nvar SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\";\nvar BUTTON_CLASS = \"dx-button\";\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_REMOVED = \"dx-row-removed\";\nvar ROW_INSERTED = \"dx-row-inserted\";\nvar ROW_MODIFIED = \"dx-row-modified\";\nvar CELL_MODIFIED = \"dx-cell-modified\";\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar FOCUSABLE_ELEMENT_SELECTOR = \"[tabindex], \" + EDITORS_INPUT_SELECTOR;\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_CELL = \"cell\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\nvar DEFAULT_START_EDIT_ACTION = \"click\";\nvar EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL];\nvar FORM_BASED_MODES = [EDIT_MODE_FORM, EDIT_MODE_POPUP];\nvar MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];\nvar TARGET_COMPONENT_NAME = \"targetComponent\";\nvar EDIT_LINK_CLASS = {\n  save: \"dx-link-save\",\n  cancel: \"dx-link-cancel\",\n  edit: \"dx-link-edit\",\n  undelete: \"dx-link-undelete\",\n  \"delete\": \"dx-link-delete\",\n  add: \"dx-link-add\"\n};\nvar EDIT_ICON_CLASS = {\n  save: \"save\",\n  cancel: \"revert\",\n  edit: \"edit\",\n  undelete: \"revert\",\n  \"delete\": \"trash\",\n  add: \"add\"\n};\nvar METHOD_NAMES = {\n  edit: \"editRow\",\n  \"delete\": \"deleteRow\",\n  undelete: \"undeleteRow\",\n  save: \"saveEditData\",\n  cancel: \"cancelEditData\",\n  add: \"addRowByRowIndex\"\n};\nvar ACTION_OPTION_NAMES = {\n  add: \"allowAdding\",\n  edit: \"allowUpdating\",\n  \"delete\": \"allowDeleting\"\n};\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\nvar EDITING_POPUP_OPTION_NAME = \"editing.popup\";\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\n\nvar createFailureHandler = function (deferred) {\n  return function (arg) {\n    var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\n    deferred.reject(error);\n  };\n};\n\nvar _getEditMode = function (that) {\n  var editMode = that.option(\"editing.mode\");\n\n  if (EDIT_MODES.indexOf(editMode) !== -1) {\n    return editMode;\n  }\n\n  return EDIT_MODE_ROW;\n};\n\nvar _isRowEditMode = function (that) {\n  var editMode = _getEditMode(that);\n\n  return ROW_BASED_MODES.indexOf(editMode) !== -1;\n};\n\nvar isEditingCell = function (isEditRow, cellOptions) {\n  return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing;\n};\n\nvar isEditingOrShowEditorAlwaysDataCell = function (isEditRow, cellOptions) {\n  var isCommandCell = !!cellOptions.column.command;\n  var isEditing = isEditingCell(isEditRow, cellOptions);\n  var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\n  return \"data\" === cellOptions.rowType && isEditorCell;\n};\n\nvar EditingController = _uiGrid_core.default.ViewController.inherit(function () {\n  var getDefaultEditorTemplate = function (that) {\n    return function (container, options) {\n      var $editor = (0, _renderer.default)(\"<div>\").appendTo(container);\n      that.getController(\"editorFactory\").createEditor($editor, (0, _extend.extend)({}, options.column, {\n        value: options.value,\n        setValue: options.setValue,\n        row: options.row,\n        parentType: \"dataRow\",\n        width: null,\n        readOnly: !options.setValue,\n        isOnForm: options.isOnForm,\n        id: options.id\n      }));\n    };\n  };\n\n  var getEditingTexts = function (options) {\n    var editingTexts = options.component.option(\"editing.texts\") || {};\n    return {\n      save: editingTexts.saveRowChanges,\n      cancel: editingTexts.cancelRowChanges,\n      edit: editingTexts.editRow,\n      undelete: editingTexts.undeleteRow,\n      \"delete\": editingTexts.deleteRow,\n      add: editingTexts.addRowToNode\n    };\n  };\n\n  var getButtonIndex = function (buttons, name) {\n    var result = -1;\n    buttons.some(function (button, index) {\n      if (getButtonName(button) === name) {\n        result = index;\n        return true;\n      }\n    });\n    return result;\n  };\n\n  function getButtonName(button) {\n    return (0, _type.isObject)(button) ? button.name : button;\n  }\n\n  var getEditorType = function (item) {\n    var column = item.column;\n    return item.isCustomEditorType ? item.editorType : column.formItem && column.formItem.editorType;\n  };\n\n  var forEachFormItems = function forEachFormItems(items, callBack) {\n    items.forEach(function (item) {\n      if (item.items || item.tabs) {\n        forEachFormItems(item.items || item.tabs, callBack);\n      } else {\n        callBack(item);\n      }\n    });\n  };\n\n  return {\n    init: function () {\n      var that = this;\n      that._columnsController = that.getController(\"columns\");\n      that._dataController = that.getController(\"data\");\n      that._rowsView = that.getView(\"rowsView\");\n      that._editForm = null;\n      that._updateEditFormDeferred = null;\n      that._lastOperation = null;\n\n      if (that._deferreds) {\n        that._deferreds.forEach(function (d) {\n          return d.reject(\"cancel\");\n        });\n      }\n\n      that._deferreds = [];\n\n      if (!that._dataChangedHandler) {\n        that._dataChangedHandler = that._handleDataChanged.bind(that);\n\n        that._dataController.changed.add(that._dataChangedHandler);\n      }\n\n      if (!that._saveEditorHandler) {\n        that.createAction(\"onInitNewRow\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserting\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowInserted\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onEditingStart\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdating\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowUpdated\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onRowRemoved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onSaved\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onSaving\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onEditCanceling\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        that.createAction(\"onEditCanceled\", {\n          excludeValidators: [\"disabled\", \"readOnly\"]\n        });\n        var $pointerDownTarget;\n        var isResizing;\n\n        that._pointerUpEditorHandler = function () {\n          var _that$getController;\n\n          isResizing = null === (_that$getController = that.getController(\"columnsResizer\")) || void 0 === _that$getController ? void 0 : _that$getController.isResizing();\n        };\n\n        that._pointerDownEditorHandler = function (e) {\n          return $pointerDownTarget = (0, _renderer.default)(e.target);\n        };\n\n        that._saveEditorHandler = that.createAction(function (e) {\n          var event = e.event;\n          var $target = (0, _renderer.default)(event.target);\n          var targetComponent = event[TARGET_COMPONENT_NAME];\n\n          if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\n            return;\n          }\n\n          function checkEditorPopup($element) {\n            return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length;\n          }\n\n          if (!_isRowEditMode(that) && !that._editCellInProgress) {\n            var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\n            var isDomElement = !!$target.closest((0, _window.getWindow)().document).length;\n            var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== that.component;\n            var isAddRowButton = !!$target.closest(\".\".concat(that.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\n            var isFocusOverlay = $target.hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\n            var isCellEditMode = _getEditMode(that) === EDIT_MODE_CELL;\n\n            if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && that.isEditing()) && (isDomElement || isAnotherComponent)) {\n              that._closeEditItem.bind(that)($target);\n            }\n          }\n        });\n\n        _events_engine.default.on(_dom_adapter.default.getDocument(), _pointer.default.up, that._pointerUpEditorHandler);\n\n        _events_engine.default.on(_dom_adapter.default.getDocument(), _pointer.default.down, that._pointerDownEditorHandler);\n\n        _events_engine.default.on(_dom_adapter.default.getDocument(), _click.name, that._saveEditorHandler);\n      }\n\n      that._updateEditColumn();\n\n      that._updateEditButtons();\n\n      if (!this._internalState) {\n        this._internalState = [];\n      }\n\n      this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\n      this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true;\n    },\n    getChanges: function () {\n      return this.option(EDITING_CHANGES_OPTION_NAME);\n    },\n    resetChanges: function () {\n      var changes = this.getChanges();\n      var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\n\n      if (needReset) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, []);\n      }\n    },\n    _getInternalData: function (key) {\n      return this._internalState.filter(function (item) {\n        return item.key === key;\n      })[0];\n    },\n    _addInternalData: function (params) {\n      var internalData = this._getInternalData(params.key);\n\n      if (internalData) {\n        return (0, _extend.extend)(internalData, params);\n      }\n\n      this._internalState.push(params);\n\n      return params;\n    },\n    _getOldData: function (key) {\n      var _this$_getInternalDat;\n\n      return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData;\n    },\n    getUpdatedData: function (data) {\n      var key = this._dataController.keyOf(data);\n\n      var changes = this.getChanges();\n\n      var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\n\n      if (changes[editIndex]) {\n        return (0, _array_utils.createObjectWithChanges)(data, changes[editIndex].data);\n      }\n\n      return data;\n    },\n    getInsertedData: function () {\n      return this.getChanges().filter(function (change) {\n        return change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE;\n      }).map(function (change) {\n        return change.data;\n      });\n    },\n    getRemovedData: function () {\n      var _this = this;\n\n      return this.getChanges().filter(function (change) {\n        return _this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE;\n      }).map(function (change) {\n        return _this._getOldData(change.key);\n      });\n    },\n    _fireDataErrorOccurred: function (arg) {\n      if (\"cancel\" === arg) {\n        return;\n      }\n\n      var $popupContent = this.getPopupContent();\n\n      this._dataController.dataErrorOccurred.fire(arg, $popupContent);\n    },\n    _needToCloseEditableCell: function ($targetElement) {\n      var $element = this.component.$element();\n      var result = this.isEditing();\n      var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\n\n      if (isCurrentComponentElement) {\n        var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\n\n        if (isDataRow) {\n          var rowsView = this.getView(\"rowsView\");\n          var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\n          var rowIndex = rowsView.getRowIndex($targetCell.parent());\n          var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\n\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\n          result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex);\n        }\n      }\n\n      return result;\n    },\n    _closeEditItem: function ($targetElement) {\n      if (this._needToCloseEditableCell($targetElement)) {\n        this.closeEditCell();\n      }\n    },\n    _handleDataChanged: function (args) {\n      var editForm = this._editForm;\n\n      if (\"refresh\" === args.changeType && _getEditMode(this) === EDIT_MODE_POPUP && editForm && editForm.option(\"visible\")) {\n        this._repaintEditPopup();\n      }\n    },\n    _isDefaultButtonVisible: function (button, options) {\n      var result = true;\n\n      var isRowMode = _isRowEditMode(this);\n\n      var isBatchMode = _getEditMode(this) === EDIT_MODE_BATCH;\n      var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex() && isRowMode;\n\n      switch (button.name) {\n        case \"edit\":\n          result = !isEditRow && this.allowUpdating(options) && isRowMode;\n          break;\n\n        case \"save\":\n        case \"cancel\":\n          result = isEditRow;\n          break;\n\n        case \"delete\":\n          result = !isEditRow && this.allowDeleting(options) && (!isBatchMode || !options.row.removed);\n          break;\n\n        case \"undelete\":\n          result = isBatchMode && this.allowDeleting(options) && options.row.removed;\n      }\n\n      return result;\n    },\n    _isButtonVisible: function (button, options) {\n      var visible = button.visible;\n\n      if (!(0, _type.isDefined)(visible)) {\n        return this._isDefaultButtonVisible(button, options);\n      }\n\n      return (0, _type.isFunction)(visible) ? visible.call(button, {\n        component: options.component,\n        row: options.row,\n        column: options.column\n      }) : visible;\n    },\n    _getButtonConfig: function (button, options) {\n      var _this2 = this;\n\n      var config = (0, _type.isObject)(button) ? button : {};\n      var buttonName = getButtonName(button);\n      var editingTexts = getEditingTexts(options);\n      var methodName = METHOD_NAMES[buttonName];\n      var editingOptions = this.option(\"editing\");\n      var actionName = ACTION_OPTION_NAMES[buttonName];\n      var allowAction = actionName ? editingOptions[actionName] : true;\n      return (0, _extend.extend)({\n        name: buttonName,\n        text: editingTexts[buttonName],\n        cssClass: EDIT_LINK_CLASS[buttonName],\n        onClick: function (e) {\n          var event = e.event;\n          event.stopPropagation();\n          event.preventDefault();\n          setTimeout(function () {\n            options.row && allowAction && _this2[methodName] && _this2[methodName](options.row.rowIndex);\n          });\n        }\n      }, config);\n    },\n    _getEditingButtons: function (options) {\n      var _this3 = this;\n\n      var buttonIndex;\n      var haveCustomButtons = !!options.column.buttons;\n      var buttons = (options.column.buttons || []).slice();\n\n      if (haveCustomButtons) {\n        buttonIndex = getButtonIndex(buttons, \"edit\");\n\n        if (buttonIndex >= 0) {\n          if (getButtonIndex(buttons, \"save\") < 0) {\n            buttons.splice(buttonIndex + 1, 0, \"save\");\n          }\n\n          if (getButtonIndex(buttons, \"cancel\") < 0) {\n            buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\");\n          }\n        }\n\n        buttonIndex = getButtonIndex(buttons, \"delete\");\n\n        if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\n          buttons.splice(buttonIndex + 1, 0, \"undelete\");\n        }\n      } else {\n        buttons = BUTTON_NAMES.slice();\n      }\n\n      return buttons.map(function (button) {\n        return _this3._getButtonConfig(button, options);\n      });\n    },\n    _renderEditingButtons: function ($container, buttons, options) {\n      var _this4 = this;\n\n      buttons.forEach(function (button) {\n        if (_this4._isButtonVisible(button, options)) {\n          _this4._createButton($container, button, options);\n        }\n      });\n    },\n    _getEditCommandCellTemplate: function () {\n      var _this5 = this;\n\n      return function (container, options) {\n        var $container = (0, _renderer.default)(container);\n\n        if (\"data\" === options.rowType) {\n          var buttons = _this5._getEditingButtons(options);\n\n          _this5._renderEditingButtons($container, buttons, options);\n\n          options.watch && options.watch(function () {\n            return buttons.map(function (button) {\n              return _this5._isButtonVisible(button, options);\n            });\n          }, function () {\n            $container.empty();\n\n            _this5._renderEditingButtons($container, buttons, options);\n          });\n        } else {\n          _uiGrid_core2.default.setEmptyText($container);\n        }\n      };\n    },\n    isRowEditMode: function () {\n      return _isRowEditMode(this);\n    },\n    isFormEditMode: function () {\n      var editMode = _getEditMode(this);\n\n      return FORM_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    isCellOrBatchEditMode: function () {\n      var editMode = this.getEditMode();\n      return CELL_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    getEditMode: function () {\n      return _getEditMode(this);\n    },\n    getFirstEditableColumnIndex: function () {\n      var columnsController = this.getController(\"columns\");\n      var firstFormItem = this._firstFormItem;\n      var columnIndex;\n\n      if (_getEditMode(this) === EDIT_MODE_FORM && firstFormItem) {\n        var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n\n        var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\n\n        var $editFormElements = this._rowsView.getCellElements(editRowIndex);\n\n        columnIndex = this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n      } else {\n        var visibleColumns = columnsController.getVisibleColumns();\n        (0, _iterator.each)(visibleColumns, function (index, column) {\n          if (column.allowEditing) {\n            columnIndex = index;\n            return false;\n          }\n        });\n      }\n\n      return columnIndex;\n    },\n    getFirstEditableCellInRow: function (rowIndex) {\n      var rowsView = this.getView(\"rowsView\");\n      return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex());\n    },\n    getFocusedCellInRow: function (rowIndex) {\n      return this.getFirstEditableCellInRow(rowIndex);\n    },\n    getIndexByKey: function (key, items) {\n      return _uiGrid_core2.default.getIndexByKey(key, items);\n    },\n    hasChanges: function (rowIndex) {\n      var changes = this.getChanges();\n      var result = false;\n\n      for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\n        if (changes[i].type && (!(0, _type.isDefined)(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\n          result = true;\n          break;\n        }\n      }\n\n      return result;\n    },\n    dispose: function () {\n      this.callBase();\n      clearTimeout(this._inputFocusTimeoutID);\n\n      _events_engine.default.off(_dom_adapter.default.getDocument(), _pointer.default.up, this._pointerUpEditorHandler);\n\n      _events_engine.default.off(_dom_adapter.default.getDocument(), _pointer.default.down, this._pointerDownEditorHandler);\n\n      _events_engine.default.off(_dom_adapter.default.getDocument(), _click.name, this._saveEditorHandler);\n    },\n    optionChanged: function (args) {\n      if (\"editing\" === args.name) {\n        var fullName = args.fullName;\n        var editPopup = this._editPopup;\n\n        if (fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n          if (editPopup) {\n            var popupOptionName = fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n\n            if (popupOptionName) {\n              editPopup.option(popupOptionName, args.value);\n            } else {\n              editPopup.option(args.value);\n            }\n          }\n        } else {\n          if (editPopup && editPopup.option(\"visible\") && 0 === fullName.indexOf(\"editing.form\")) {\n            this._repaintEditPopup();\n          } else {\n            if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\n              this._handleEditRowKeyChange(args);\n            } else {\n              if (fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\n                this._handleEditColumnNameChange(args);\n              } else {\n                if (fullName === EDITING_CHANGES_OPTION_NAME) {\n                  this._handleChangesChange(args);\n                } else {\n                  this.init();\n                  this.resetChanges();\n\n                  this._resetEditColumnName();\n\n                  this._resetEditRowKey();\n                }\n              }\n            }\n          }\n        }\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    },\n    _handleEditRowKeyChange: function (args) {\n      var rowIndex = this._dataController.getRowIndexByKey(args.value);\n\n      var oldRowIndexCorrection = this._getEditRowIndexCorrection();\n\n      var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\n\n      var columnIndex = this._getVisibleEditColumnIndex();\n\n      if (!this.isCellOrBatchEditMode()) {\n        if ((0, _type.isDefined)(args.value)) {\n          if (args.value !== args.previousValue) {\n            this._editRowFromOptionChanged(rowIndex, oldRowIndex);\n          }\n        } else {\n          this.cancelEditData();\n        }\n      } else {\n        if ((0, _type.isDefined)(args.value) && args.value !== args.previousValue) {\n          this._editCellFromOptionChanged(columnIndex, columnIndex, oldRowIndex);\n        }\n      }\n    },\n    _handleEditColumnNameChange: function (args) {\n      var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\n\n      if (this.isCellOrBatchEditMode() && oldRowIndex !== -1 && (0, _type.isDefined)(args.value) && args.value !== args.previousValue) {\n        var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\n\n        var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\n\n        this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex);\n      }\n    },\n    _handleChangesChange: function (args) {\n      var dataController = this._dataController;\n\n      if (!args.value.length && !args.previousValue.length) {\n        return;\n      }\n\n      dataController.updateItems({\n        repaintChangesOnly: true\n      });\n    },\n    _editCellFromOptionChanged: function (columnIndex, oldColumnIndex, oldRowIndex) {\n      var _this6 = this;\n\n      var columns = this._columnsController.getVisibleColumns();\n\n      if (columnIndex > -1) {\n        (0, _common.deferRender)(function () {\n          _this6._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex);\n        });\n      }\n    },\n    publicMethods: function () {\n      return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"editCell\", \"closeEditCell\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"];\n    },\n    refresh: function (isPageChanged) {\n      var editMode = _getEditMode(this);\n\n      var needResetIndexes = editMode === EDIT_MODE_BATCH || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\n\n      if (!(0, _type.isDefined)(this._pageIndex)) {\n        return;\n      }\n\n      if (!this.isCellOrBatchEditMode()) {\n        this.resetChanges();\n        this.init();\n\n        if ((0, _type.isDefined)(this.option(EDITING_EDITROWKEY_OPTION_NAME))) {\n          this._resetEditRowKey();\n        }\n      } else {\n        if (needResetIndexes) {\n          this._resetEditColumnName();\n\n          this._resetEditRowKey();\n        }\n      }\n    },\n    isEditing: function () {\n      var isEditRowKeyDefined = (0, _type.isDefined)(this.option(EDITING_EDITROWKEY_OPTION_NAME));\n      var isEditColumnNameDefined = (0, _type.isDefined)(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\n\n      if (this.isCellOrBatchEditMode()) {\n        return isEditRowKeyDefined && isEditColumnNameDefined;\n      }\n\n      return isEditRowKeyDefined;\n    },\n    isEditRow: function (rowIndex) {\n      var editMode = _getEditMode(this);\n\n      return this._getVisibleEditRowIndex() === rowIndex && ROW_BASED_MODES.indexOf(editMode) !== -1;\n    },\n    _setEditRowKey: function (value, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value);\n      } else {\n        this.option(EDITING_EDITROWKEY_OPTION_NAME, value);\n      }\n    },\n    _setEditRowKeyByIndex: function (rowIndex, silent) {\n      var key = this._dataController.getKeyByRowIndex(rowIndex);\n\n      if (void 0 === key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      this._setEditRowKey(key, silent);\n    },\n    getEditRowIndex: function () {\n      return this._getVisibleEditRowIndex();\n    },\n    getEditFormRowIndex: function () {\n      var editMode = _getEditMode(this);\n\n      return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP ? this._getVisibleEditRowIndex() : -1;\n    },\n    isEditCell: function (visibleRowIndex, columnIndex) {\n      return this._getVisibleEditRowIndex() === visibleRowIndex && this._getVisibleEditColumnIndex() === columnIndex;\n    },\n    getPopupContent: function () {\n      var editMode = _getEditMode(this);\n\n      var popupVisible = this._editPopup && this._editPopup.option(\"visible\");\n\n      if (editMode === EDIT_MODE_POPUP && popupVisible) {\n        return this._$popupContent;\n      }\n    },\n    getEditForm: function () {\n      return this._editForm;\n    },\n    _needInsertItem: function (change, changeType) {\n      var that = this;\n\n      var dataSource = that._dataController.dataSource();\n\n      var scrollingMode = that.option(\"scrolling.mode\");\n      var pageIndex = dataSource.pageIndex();\n      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\n      var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\n\n      if (\"standard\" !== scrollingMode) {\n        switch (changeType) {\n          case \"append\":\n            return change.key.pageIndex === endPageIndex;\n\n          case \"prepend\":\n            return change.key.pageIndex === beginPageIndex;\n\n          case \"refresh\":\n            change.key.rowIndex = 0;\n            change.key.dataRowIndex = 0;\n            change.key.pageIndex = 0;\n            break;\n\n          default:\n            return change.key.pageIndex >= beginPageIndex && change.key.pageIndex <= endPageIndex;\n        }\n      }\n\n      return change.key.pageIndex === pageIndex;\n    },\n    _generateNewItem: function (key) {\n      var item = {\n        key: key\n      };\n\n      if (key && key[INSERT_INDEX]) {\n        item[INSERT_INDEX] = key[INSERT_INDEX];\n      }\n\n      return item;\n    },\n    _getLoadedRowIndexByInsertKey: function (items, change, key) {\n      var dataController = this._dataController;\n      var loadedRowIndexOffset = dataController.getRowIndexOffset(true);\n      var loadedRowIndex = key.dataRowIndex - loadedRowIndexOffset;\n\n      if (\"append\" === change.changeType) {\n        loadedRowIndex -= dataController.items(true).length;\n\n        if (change.removeCount) {\n          loadedRowIndex += change.removeCount;\n        }\n      }\n\n      for (var i = 0; i < loadedRowIndex; i++) {\n        if (items[i] && items[i][INSERT_INDEX]) {\n          loadedRowIndex++;\n        }\n      }\n\n      return loadedRowIndex;\n    },\n    processItems: function (items, e) {\n      var _this7 = this;\n\n      var changeType = e.changeType;\n      this.update(changeType);\n      var changes = this.getChanges();\n      changes.forEach(function (change) {\n        var key = change.key;\n\n        if ((0, _type.isDefined)(key) && change.type === DATA_EDIT_DATA_INSERT_TYPE) {\n          var loadedRowIndex = _this7._getLoadedRowIndexByInsertKey(items, e, key);\n\n          var item = _this7._generateNewItem(key);\n\n          if (loadedRowIndex >= 0 && _this7._needInsertItem(change, changeType, items, item)) {\n            items.splice(key.dataRowIndex ? loadedRowIndex : 0, 0, item);\n          }\n        }\n      });\n      return items;\n    },\n    processDataItem: function (item, options, generateDataValues) {\n      var columns = options.visibleColumns;\n      var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\n      var changes = this.getChanges();\n\n      var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\n\n      item.isEditing = false;\n\n      if (editIndex >= 0) {\n        var editMode = _getEditMode(this);\n\n        var _changes$editIndex = changes[editIndex],\n            data = _changes$editIndex.data,\n            type = _changes$editIndex.type;\n\n        switch (type) {\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            if (editMode === EDIT_MODE_POPUP) {\n              item.visible = false;\n            }\n\n            item.isNewRow = true;\n            item.key = key;\n            item.data = data;\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            item.modified = true;\n            item.oldData = item.data;\n            item.data = (0, _array_utils.createObjectWithChanges)(item.data, data);\n            item.modifiedValues = generateDataValues(data, columns, true);\n            break;\n\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            if (editMode === EDIT_MODE_BATCH) {\n              item.data = (0, _array_utils.createObjectWithChanges)(item.data, data);\n            }\n\n            item.removed = true;\n        }\n      }\n    },\n    _initNewRow: function (options) {\n      var _this8 = this;\n\n      this.executeAction(\"onInitNewRow\", options);\n\n      if (options.promise) {\n        var deferred = new _deferred.Deferred();\n        (0, _deferred.when)((0, _deferred.fromPromise)(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return _this8._fireDataErrorOccurred(arg);\n        });\n        return deferred;\n      }\n    },\n    _getInsertKey: function (parentKey) {\n      var that = this;\n      var dataController = that._dataController;\n      var rows = dataController.items();\n\n      var editMode = _getEditMode(that);\n\n      var insertKey = {\n        parentKey: parentKey,\n        pageIndex: dataController.pageIndex(),\n        rowIndex: that._getInsertRowIndex(parentKey)\n      };\n      var row = rows[insertKey.rowIndex];\n\n      if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\n        insertKey.rowIndex++;\n      }\n\n      insertKey.dataRowIndex = dataController.getRowIndexOffset() + rows.filter(function (row, index) {\n        return index < insertKey.rowIndex && (\"data\" === row.rowType && !row.isNewRow || \"group\" === row.rowType);\n      }).length;\n\n      if (editMode !== EDIT_MODE_BATCH) {\n        this._setEditRowKey(insertKey, true);\n      }\n\n      insertKey[INSERT_INDEX] = that._getInsertIndex();\n      return insertKey;\n    },\n    _getInsertRowIndex: function (parentKey) {\n      var that = this;\n      var rowsView = that.getView(\"rowsView\");\n\n      var parentRowIndex = that._dataController.getRowIndexByKey(parentKey);\n\n      if (parentRowIndex >= 0) {\n        return parentRowIndex + 1;\n      }\n\n      if (rowsView) {\n        return rowsView.getTopVisibleItemIndex(true);\n      }\n\n      return 0;\n    },\n    _getInsertIndex: function () {\n      var maxInsertIndex = 0;\n      this.getChanges().forEach(function (editItem) {\n        if (editItem.type === DATA_EDIT_DATA_INSERT_TYPE && editItem.key[INSERT_INDEX] > maxInsertIndex) {\n          maxInsertIndex = editItem.key[INSERT_INDEX];\n        }\n      });\n      return maxInsertIndex + 1;\n    },\n    addRow: function (parentKey) {\n      var that = this;\n      var dataController = that._dataController;\n      var store = dataController.store();\n      var key = store && store.key();\n      var param = {\n        data: {}\n      };\n\n      var editMode = _getEditMode(that);\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var deferred = new _deferred.Deferred();\n\n      if (!store) {\n        dataController.fireError(\"E1052\", this.component.NAME);\n        return deferred.reject();\n      }\n\n      if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\n        that.saveEditData().done(function () {\n          if (!that.hasChanges()) {\n            that.addRow(parentKey).done(deferred.resolve).fail(deferred.reject);\n          } else {\n            deferred.reject(\"cancel\");\n          }\n        });\n        return deferred.promise();\n      }\n\n      that.refresh();\n\n      if (!that._allowRowAdding()) {\n        return deferred.reject(\"cancel\");\n      }\n\n      if (!key) {\n        param.data.__KEY__ = String(new _guid.default());\n      }\n\n      (0, _deferred.when)(that._initNewRow(param, parentKey)).done(function () {\n        if (that._allowRowAdding()) {\n          that._addRowCore(param.data, parentKey, oldEditRowIndex);\n\n          deferred.resolve();\n        } else {\n          deferred.reject(\"cancel\");\n        }\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _allowRowAdding: function () {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var insertIndex = that._getInsertIndex();\n\n      if (editMode !== EDIT_MODE_BATCH && insertIndex > 1) {\n        return false;\n      }\n\n      return true;\n    },\n    _addRowCore: function (data, parentKey, initialOldEditRowIndex) {\n      var that = this;\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var insertKey = that._getInsertKey(parentKey);\n\n      var editMode = _getEditMode(that);\n\n      that._addChange({\n        key: insertKey,\n        data: data,\n        type: DATA_EDIT_DATA_INSERT_TYPE\n      });\n\n      that._dataController.updateItems({\n        changeType: \"update\",\n        rowIndices: [initialOldEditRowIndex, oldEditRowIndex, insertKey.rowIndex]\n      });\n\n      if (editMode === EDIT_MODE_POPUP) {\n        that._showEditPopup(insertKey.rowIndex);\n      } else {\n        that._focusFirstEditableCellInRow(insertKey.rowIndex);\n      }\n\n      that._afterInsertRow({\n        key: insertKey,\n        data: data\n      });\n    },\n    _focusFirstEditableCellInRow: function (rowIndex) {\n      var that = this;\n      var $firstCell = that.getFirstEditableCellInRow(rowIndex);\n      that._editCellInProgress = true;\n\n      that._delayedInputFocus($firstCell, function () {\n        that._editCellInProgress = false;\n        var $cell = that.getFirstEditableCellInRow(rowIndex);\n        var eventToTrigger = \"dblClick\" === that.option(\"editing.startEditAction\") ? _double_click.name : _click.name;\n        $cell && _events_engine.default.trigger($cell, eventToTrigger);\n      });\n    },\n    _isEditingStart: function (options) {\n      this.executeAction(\"onEditingStart\", options);\n      return options.cancel;\n    },\n    _beforeEditCell: function (rowIndex, columnIndex, item) {\n      var that = this;\n\n      if (_getEditMode(that) === EDIT_MODE_CELL && !item.isNewRow && that.hasChanges()) {\n        var d = new _deferred.Deferred();\n        that.saveEditData().always(function () {\n          d.resolve(that.hasChanges());\n        });\n        return d;\n      }\n    },\n    _beforeUpdateItems: function () {},\n    _getVisibleEditColumnIndex: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n\n      if (!(0, _type.isDefined)(editColumnName)) {\n        return -1;\n      }\n\n      return this._columnsController.getVisibleColumnIndex(editColumnName);\n    },\n    _setEditColumnNameByIndex: function (index, silent) {\n      var _visibleColumns$index;\n\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent);\n    },\n    _setEditColumnName: function (name, silent) {\n      if (silent) {\n        this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      } else {\n        this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name);\n      }\n    },\n    _resetEditColumnName: function () {\n      this._setEditColumnName(null, true);\n    },\n    _getEditColumn: function () {\n      var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\n      return this._getColumnByName(editColumnName);\n    },\n    _getColumnByName: function (name) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      var editColumn;\n      (0, _type.isDefined)(name) && visibleColumns.some(function (column) {\n        if (column.name === name) {\n          editColumn = column;\n          return true;\n        }\n      });\n      return editColumn;\n    },\n    _getVisibleEditRowIndex: function (columnName) {\n      var dataController = this._dataController;\n      var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n      var rowIndex = dataController.getRowIndexByKey(editRowKey);\n\n      if (rowIndex === -1) {\n        return rowIndex;\n      }\n\n      return rowIndex + this._getEditRowIndexCorrection(columnName);\n    },\n    _getEditRowIndexCorrection: function (columnName) {\n      var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\n      var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\n      return isColumnHidden ? 1 : 0;\n    },\n    _resetEditRowKey: function () {\n      this._setEditRowKey(null, true);\n    },\n    _resetEditIndices: function () {\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n    },\n    editRow: function (rowIndex) {\n      var dataController = this._dataController;\n      var items = dataController.items();\n      var item = items[rowIndex];\n      var params = {\n        data: item && item.data,\n        cancel: false\n      };\n\n      var oldRowIndex = this._getVisibleEditRowIndex();\n\n      if (!item) {\n        return;\n      }\n\n      if (rowIndex === oldRowIndex) {\n        return true;\n      }\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return;\n      }\n\n      this.resetChanges();\n      this.init();\n\n      this._resetEditColumnName();\n\n      this._pageIndex = dataController.pageIndex();\n\n      this._addInternalData({\n        key: item.key,\n        oldData: item.data\n      });\n\n      this._setEditRowKey(item.key);\n    },\n    _editRowFromOptionChanged: function (rowIndex, oldRowIndex) {\n      var rowIndices = [oldRowIndex, rowIndex];\n\n      var editMode = _getEditMode(this);\n\n      this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\n\n      if (editMode === EDIT_MODE_POPUP) {\n        this._showEditPopup(rowIndex);\n      } else {\n        this._needFocusEditor = true;\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: rowIndices\n        });\n      }\n    },\n    _focusEditorIfNeed: function () {\n      var _this9 = this;\n\n      var editMode = _getEditMode(this);\n\n      if (this._needFocusEditor) {\n        if (MODES_WITH_DELAYED_FOCUS.indexOf(editMode) !== -1) {\n          var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\n\n          this._delayedInputFocus($editingCell, function () {\n            $editingCell && _this9.component.focus($editingCell);\n          });\n        } else {\n          if (CELL_BASED_MODES.indexOf(editMode) !== -1) {\n            var _this$_rowsView;\n\n            var editColumnIndex = this._getVisibleEditColumnIndex();\n\n            var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\n\n            if ($cell && !$cell.find(\":focus\").length) {\n              this._focusEditingCell(function () {\n                _this9._editCellInProgress = false;\n              }, $cell, true);\n            } else {\n              this._editCellInProgress = false;\n            }\n          }\n        }\n\n        this._needFocusEditor = false;\n      }\n    },\n    _showEditPopup: function (rowIndex, repaintForm) {\n      var that = this;\n\n      var isMobileDevice = \"desktop\" !== _devices.default.current().deviceType;\n\n      var popupOptions = (0, _extend.extend)({\n        showTitle: false,\n        fullScreen: isMobileDevice,\n        toolbarItems: [{\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: that._getSaveButtonConfig()\n        }, {\n          toolbar: \"bottom\",\n          location: \"after\",\n          widget: \"dxButton\",\n          options: that._getCancelButtonConfig()\n        }],\n        contentTemplate: that._getPopupEditFormTemplate(rowIndex)\n      }, that.option(EDITING_POPUP_OPTION_NAME));\n\n      if (!that._editPopup) {\n        var $popupContainer = (0, _renderer.default)(\"<div>\").appendTo(that.component.$element()).addClass(that.addWidgetPrefix(EDIT_POPUP_CLASS));\n        that._editPopup = that._createComponent($popupContainer, _popup.default, {});\n\n        that._editPopup.on(\"hiding\", that._getEditPopupHiddenHandler());\n\n        that._editPopup.on(\"shown\", function (e) {\n          _events_engine.default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\n\n          if (repaintForm) {\n            that._editForm && that._editForm.repaint();\n          }\n        });\n      }\n\n      that._editPopup.option(popupOptions);\n\n      that._editPopup.show();\n    },\n    _repaintEditPopup: function () {\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      if (this._editPopup && this._editPopup.option(\"visible\") && rowIndex >= 0) {\n        var defaultAnimation = this._editPopup.option(\"animation\");\n\n        this._editPopup.option(\"animation\", null);\n\n        this._showEditPopup(rowIndex, true);\n\n        this._editPopup.option(\"animation\", defaultAnimation);\n      }\n    },\n    _getEditPopupHiddenHandler: function () {\n      var that = this;\n      return function (e) {\n        if (that.isEditing()) {\n          that.cancelEditData();\n        }\n      };\n    },\n    _getPopupEditFormTemplate: function (rowIndex) {\n      var that = this;\n      var row = that.component.getVisibleRows()[rowIndex];\n      var templateOptions = {\n        row: row,\n        rowType: row.rowType,\n        key: row.key\n      };\n      return function (container) {\n        var formTemplate = that.getEditFormTemplate();\n\n        var scrollable = that._createComponent((0, _renderer.default)(\"<div>\").appendTo(container), _ui.default);\n\n        that._$popupContent = scrollable.$content();\n        formTemplate(that._$popupContent, templateOptions, true);\n      };\n    },\n    _getSaveButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.saveRowChanges\"),\n        onClick: this.saveEditData.bind(this)\n      };\n    },\n    _getCancelButtonConfig: function () {\n      return {\n        text: this.option(\"editing.texts.cancelRowChanges\"),\n        onClick: this.cancelEditData.bind(this)\n      };\n    },\n    _removeInternalData: function (key) {\n      var internalData = this._getInternalData(key);\n\n      var index = this._internalState.indexOf(internalData);\n\n      if (index > -1) {\n        this._internalState.splice(index, 1);\n      }\n    },\n    _removeChange: function (index) {\n      if (index >= 0) {\n        var changes = _toConsumableArray(this.getChanges());\n\n        var key = changes[index].key;\n\n        this._removeInternalData(key);\n\n        changes.splice(index, 1);\n\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n        if ((0, _common.equalByValue)(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\n          this._resetEditIndices();\n        }\n      }\n    },\n    executeOperation: function (deferred, func) {\n      var _this10 = this;\n\n      this._lastOperation && this._lastOperation.reject();\n      this._lastOperation = deferred;\n      this.waitForDeferredOperations().done(function () {\n        if (\"rejected\" === deferred.state()) {\n          return;\n        }\n\n        func();\n        _this10._lastOperation = null;\n      }).fail(function () {\n        deferred.reject();\n        _this10._lastOperation = null;\n      });\n    },\n    waitForDeferredOperations: function () {\n      return _deferred.when.apply(void 0, _toConsumableArray(this._deferreds));\n    },\n    editCell: function (rowIndex, columnIndex) {\n      return this._editCell({\n        rowIndex: rowIndex,\n        columnIndex: columnIndex\n      });\n    },\n    _editCell: function (options) {\n      var _this11 = this;\n\n      var d = new _deferred.Deferred();\n      var coreResult;\n      this.executeOperation(d, function () {\n        coreResult = _this11._editCellCore(options);\n        (0, _deferred.when)(coreResult).done(d.resolve).fail(d.reject);\n      });\n      return void 0 !== coreResult ? coreResult : d.promise();\n    },\n    _getNormalizedEditCellOptions: function (_ref) {\n      var oldColumnIndex = _ref.oldColumnIndex,\n          oldRowIndex = _ref.oldRowIndex,\n          columnIndex = _ref.columnIndex,\n          rowIndex = _ref.rowIndex;\n      var columnsController = this._columnsController;\n      var visibleColumns = columnsController.getVisibleColumns();\n\n      var items = this._dataController.items();\n\n      var item = items[rowIndex];\n      var oldColumn;\n\n      if ((0, _type.isDefined)(oldColumnIndex)) {\n        oldColumn = visibleColumns[oldColumnIndex];\n      } else {\n        oldColumn = this._getEditColumn();\n      }\n\n      if (!(0, _type.isDefined)(oldRowIndex)) {\n        oldRowIndex = this._getVisibleEditRowIndex();\n      }\n\n      if ((0, _type.isString)(columnIndex)) {\n        columnIndex = columnsController.columnOption(columnIndex, \"index\");\n        columnIndex = columnsController.getVisibleIndex(columnIndex);\n      }\n\n      var column = visibleColumns[columnIndex];\n      return {\n        oldColumn: oldColumn,\n        columnIndex: columnIndex,\n        oldRowIndex: oldRowIndex,\n        rowIndex: rowIndex,\n        column: column,\n        item: item\n      };\n    },\n    _editCellCore: function (options) {\n      var _this12 = this;\n\n      var dataController = this._dataController;\n      var isEditByOptionChanged = (0, _type.isDefined)(options.oldColumnIndex) || (0, _type.isDefined)(options.oldRowIndex);\n\n      var _this$_getNormalizedE = this._getNormalizedEditCellOptions(options),\n          columnIndex = _this$_getNormalizedE.columnIndex,\n          rowIndex = _this$_getNormalizedE.rowIndex,\n          column = _this$_getNormalizedE.column,\n          item = _this$_getNormalizedE.item;\n\n      var params = {\n        data: null === item || void 0 === item ? void 0 : item.data,\n        cancel: false,\n        column: column\n      };\n\n      if (void 0 === item.key) {\n        this._dataController.fireError(\"E1043\");\n\n        return;\n      }\n\n      if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && !_isRowEditMode(this)) {\n        if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\n          return true;\n        }\n\n        var editRowIndex = rowIndex + dataController.getRowIndexOffset();\n        return (0, _deferred.when)(this._beforeEditCell(rowIndex, columnIndex, item)).done(function (cancel) {\n          if (cancel) {\n            return;\n          }\n\n          if (!_this12._prepareEditCell(params, item, columnIndex, editRowIndex)) {\n            _this12._processCanceledEditingCell();\n          }\n        });\n      }\n\n      return false;\n    },\n    _processCanceledEditingCell: function () {},\n    _prepareEditCell: function (params, item, editColumnIndex, editRowIndex) {\n      if (!item.isNewRow) {\n        params.key = item.key;\n      }\n\n      if (this._isEditingStart(params)) {\n        return false;\n      }\n\n      this._pageIndex = this._dataController.pageIndex();\n\n      this._setEditRowKey(item.key);\n\n      this._setEditColumnNameByIndex(editColumnIndex);\n\n      if (!params.column.showEditorAlways) {\n        this._addInternalData({\n          key: item.key,\n          oldData: item.data\n        });\n      }\n\n      return true;\n    },\n    _repaintEditCell: function (column, oldColumn, oldEditRowIndex) {\n      this._needFocusEditor = true;\n\n      if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\n        this._editCellInProgress = true;\n        this.getController(\"editorFactory\").loseFocus();\n\n        this._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\n        });\n      } else {\n        if (column !== oldColumn) {\n          this._dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: []\n          });\n        }\n      }\n    },\n    _delayedInputFocus: function ($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\n      var that = this;\n\n      function inputFocus() {\n        if (beforeFocusCallback) {\n          beforeFocusCallback();\n        }\n\n        if ($cell) {\n          var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\n\n          _uiGrid_core2.default.focusAndSelectElement(that, $focusableElement);\n        }\n\n        that._beforeFocusCallback = null;\n      }\n\n      if (_devices.default.real().ios || _devices.default.real().android) {\n        inputFocus();\n      } else {\n        if (that._beforeFocusCallback) {\n          that._beforeFocusCallback();\n        }\n\n        clearTimeout(that._inputFocusTimeoutID);\n\n        if (callBeforeFocusCallbackAlways) {\n          that._beforeFocusCallback = beforeFocusCallback;\n        }\n\n        that._inputFocusTimeoutID = setTimeout(inputFocus);\n      }\n    },\n    _focusEditingCell: function (beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\n      var that = this;\n      var rowsView = that.getView(\"rowsView\");\n\n      var editColumnIndex = this._getVisibleEditColumnIndex();\n\n      $editCell = $editCell || rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), editColumnIndex);\n\n      that._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways);\n    },\n    deleteRow: function (rowIndex) {\n      var _this13 = this;\n\n      if (\"cell\" === this.option(\"editing.mode\") && this.isEditing()) {\n        var isNewRow = this._dataController.items()[rowIndex].isNewRow;\n\n        var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n        this.closeEditCell(null, isNewRow).always(function () {\n          rowIndex = _this13._dataController.getRowIndexByKey(rowKey);\n\n          _this13._checkAndDeleteRow(rowIndex);\n        });\n      } else {\n        this._checkAndDeleteRow(rowIndex);\n      }\n    },\n    _checkAndDeleteRow: function (rowIndex) {\n      var that = this;\n      var editingOptions = that.option(\"editing\");\n      var editingTexts = editingOptions && editingOptions.texts;\n      var isBatchMode = editingOptions && editingOptions.mode === EDIT_MODE_BATCH;\n      var confirmDelete = editingOptions && editingOptions.confirmDelete;\n      var confirmDeleteMessage = editingTexts && editingTexts.confirmDeleteMessage;\n\n      var item = that._dataController.items()[rowIndex];\n\n      var allowDeleting = isBatchMode || !that.isEditing() || item.isNewRow;\n\n      if (item && allowDeleting) {\n        if (isBatchMode || !confirmDelete || !confirmDeleteMessage) {\n          that._deleteRowCore(rowIndex);\n        } else {\n          var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\n          var showDialogTitle = (0, _type.isDefined)(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\n          (0, _dialog.confirm)(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function (confirmResult) {\n            if (confirmResult) {\n              that._deleteRowCore(rowIndex);\n            }\n          });\n        }\n      }\n    },\n    _deleteRowCore: function (rowIndex) {\n      var dataController = this._dataController;\n      var item = dataController.items()[rowIndex];\n      var key = item && item.key;\n\n      var oldEditRowIndex = this._getVisibleEditRowIndex();\n\n      var isBatchMode = this.option(\"editing.mode\") === EDIT_MODE_BATCH;\n      this.refresh();\n      var changes = this.getChanges();\n\n      var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\n\n      if (editIndex >= 0) {\n        if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\n          this._removeChange(editIndex);\n        } else {\n          this._addChange({\n            key: key,\n            type: DATA_EDIT_DATA_REMOVE_TYPE\n          });\n        }\n      } else {\n        this._addChange({\n          key: key,\n          oldData: item.data,\n          type: DATA_EDIT_DATA_REMOVE_TYPE\n        });\n      }\n\n      if (isBatchMode) {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [oldEditRowIndex, rowIndex]\n        });\n      } else {\n        this.saveEditData();\n      }\n    },\n    undeleteRow: function (rowIndex) {\n      var that = this;\n      var dataController = that._dataController;\n      var item = dataController.items()[rowIndex];\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      var key = item && item.key;\n      var changes = this.getChanges();\n\n      if (item) {\n        var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\n\n        if (editIndex >= 0) {\n          var data = changes[editIndex].data;\n\n          if ((0, _type.isEmptyObject)(data)) {\n            that._removeChange(editIndex);\n          } else {\n            that._addChange({\n              key: key,\n              type: DATA_EDIT_DATA_UPDATE_TYPE\n            });\n          }\n\n          dataController.updateItems({\n            changeType: \"update\",\n            rowIndices: [oldEditRowIndex, rowIndex]\n          });\n        }\n      }\n    },\n    _fireOnSaving: function () {\n      var _this14 = this;\n\n      var onSavingParams = {\n        cancel: false,\n        promise: null,\n        changes: _toConsumableArray(this.getChanges())\n      };\n      this.executeAction(\"onSaving\", onSavingParams);\n      var d = new _deferred.Deferred();\n      (0, _deferred.when)((0, _deferred.fromPromise)(onSavingParams.promise)).done(function () {\n        d.resolve(onSavingParams);\n      }).fail(function (arg) {\n        createFailureHandler(d);\n\n        _this14._fireDataErrorOccurred(arg);\n\n        d.resolve({\n          cancel: true\n        });\n      });\n      return d;\n    },\n    _executeEditingAction: function (actionName, params, func) {\n      if (this.component._disposed) {\n        return null;\n      }\n\n      var deferred = new _deferred.Deferred();\n      this.executeAction(actionName, params);\n      (0, _deferred.when)((0, _deferred.fromPromise)(params.cancel)).done(function (cancel) {\n        if (cancel) {\n          setTimeout(function () {\n            deferred.resolve(\"cancel\");\n          });\n        } else {\n          func(params).done(deferred.resolve).fail(createFailureHandler(deferred));\n        }\n      }).fail(createFailureHandler(deferred));\n      return deferred;\n    },\n    _processChanges: function (deferreds, results, dataChanges, changes) {\n      var _this15 = this;\n\n      var store = this._dataController.store();\n\n      (0, _iterator.each)(changes, function (index, change) {\n        var oldData = _this15._getOldData(change.key);\n\n        var data = change.data,\n            type = change.type;\n\n        var changeCopy = _objectSpread({}, change);\n\n        var deferred;\n        var params;\n\n        if (_this15._beforeSaveEditData(change, index)) {\n          return;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            params = {\n              data: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this15._executeEditingAction(\"onRowRemoving\", params, function () {\n              return store.remove(change.key).done(function (key) {\n                dataChanges.push({\n                  type: \"remove\",\n                  key: key\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            params = {\n              data: data,\n              cancel: false\n            };\n            deferred = _this15._executeEditingAction(\"onRowInserting\", params, function () {\n              return store.insert(params.data).done(function (data, key) {\n                if ((0, _type.isDefined)(key)) {\n                  changeCopy.key = key;\n                }\n\n                if (data && (0, _type.isObject)(data) && data !== params.data) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"insert\",\n                  data: data,\n                  index: 0\n                });\n              });\n            });\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            params = {\n              newData: data,\n              oldData: oldData,\n              key: change.key,\n              cancel: false\n            };\n            deferred = _this15._executeEditingAction(\"onRowUpdating\", params, function () {\n              return store.update(change.key, params.newData).done(function (data, key) {\n                if (data && (0, _type.isObject)(data) && data !== params.newData) {\n                  changeCopy.data = data;\n                }\n\n                dataChanges.push({\n                  type: \"update\",\n                  key: key,\n                  data: data\n                });\n              });\n            });\n        }\n\n        changes[index] = changeCopy;\n\n        if (deferred) {\n          var doneDeferred = new _deferred.Deferred();\n          deferred.always(function (data) {\n            results.push({\n              key: change.key,\n              result: data\n            });\n          }).always(doneDeferred.resolve);\n          deferreds.push(doneDeferred.promise());\n        }\n      });\n    },\n    _processSaveEditDataResult: function (results) {\n      var that = this;\n      var hasSavedData = false;\n\n      var editMode = _getEditMode(that);\n\n      var changes = _toConsumableArray(this.getChanges());\n\n      var changesLength = changes.length;\n\n      for (var i = 0; i < results.length; i++) {\n        var arg = results[i].result;\n        var cancel = \"cancel\" === arg;\n\n        var editIndex = _uiGrid_core2.default.getIndexByKey(results[i].key, changes);\n\n        var change = changes[editIndex];\n        var isError = arg && arg instanceof Error;\n\n        if (isError) {\n          if (change) {\n            this._addInternalData({\n              key: change.key,\n              error: arg\n            });\n          }\n\n          that._fireDataErrorOccurred(arg);\n\n          if (editMode !== EDIT_MODE_BATCH) {\n            if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\n              if (editIndex >= 0) {\n                changes.splice(editIndex, 1);\n              }\n            }\n\n            break;\n          }\n        } else {\n          if (!cancel || !change || editMode !== EDIT_MODE_BATCH && change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\n            if (editIndex >= 0) {\n              changes.splice(editIndex, 1);\n            }\n\n            hasSavedData = !cancel;\n          }\n        }\n      }\n\n      if (changes.length < changesLength) {\n        this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n      }\n\n      return hasSavedData;\n    },\n    _fireSaveEditDataEvents: function (changes) {\n      var that = this;\n      (0, _iterator.each)(changes, function (_, _ref2) {\n        var data = _ref2.data,\n            key = _ref2.key,\n            type = _ref2.type;\n\n        var internalData = that._addInternalData({\n          key: key\n        });\n\n        var params = {\n          key: key,\n          data: data\n        };\n\n        if (internalData.error) {\n          params.error = internalData.error;\n        }\n\n        switch (type) {\n          case DATA_EDIT_DATA_REMOVE_TYPE:\n            that.executeAction(\"onRowRemoved\", (0, _extend.extend)({}, params, {\n              data: internalData.oldData\n            }));\n            break;\n\n          case DATA_EDIT_DATA_INSERT_TYPE:\n            that.executeAction(\"onRowInserted\", params);\n            break;\n\n          case DATA_EDIT_DATA_UPDATE_TYPE:\n            that.executeAction(\"onRowUpdated\", params);\n        }\n      });\n      this.executeAction(\"onSaved\", {\n        changes: changes\n      });\n    },\n    saveEditData: function () {\n      var _this16 = this;\n\n      var deferred = new _deferred.Deferred();\n      this.waitForDeferredOperations().done(function () {\n        if (_this16.isSaving()) {\n          _this16._resolveAfterSave(deferred);\n\n          return;\n        }\n\n        (0, _deferred.when)(_this16._beforeSaveEditData()).done(function (cancel) {\n          if (cancel) {\n            _this16._resolveAfterSave(deferred, {\n              cancel: cancel\n            });\n\n            return;\n          }\n\n          _this16._saving = true;\n\n          _this16._saveEditDataInner().always(function () {\n            _this16._saving = false;\n          }).done(deferred.resolve).fail(deferred.reject);\n        }).fail(deferred.reject);\n      }).fail(deferred.reject);\n      return deferred.promise();\n    },\n    _resolveAfterSave: function (deferred) {\n      var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\n          cancel = _ref3.cancel,\n          error = _ref3.error;\n\n      (0, _deferred.when)(this._afterSaveEditData(cancel)).done(function () {\n        deferred.resolve(error);\n      }).fail(deferred.reject);\n    },\n    _saveEditDataInner: function () {\n      var _this17 = this;\n\n      var results = [];\n      var deferreds = [];\n      var dataChanges = [];\n      var dataController = this._dataController;\n      var dataSource = dataController.dataSource();\n      var result = new _deferred.Deferred();\n      (0, _deferred.when)(this._fireOnSaving()).done(function (_ref4) {\n        var cancel = _ref4.cancel,\n            changes = _ref4.changes;\n\n        if (cancel) {\n          return result.resolve().promise();\n        }\n\n        _this17._processChanges(deferreds, results, dataChanges, changes);\n\n        if (deferreds.length) {\n          null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\n\n          _deferred.when.apply(void 0, deferreds).done(function () {\n            if (_this17._processSaveEditDataResult(results)) {\n              _this17._endSaving(dataChanges, changes, result);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n              result.resolve();\n            }\n          }).fail(function (error) {\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n            result.resolve(error);\n          });\n\n          return result.always(function () {\n            _this17._focusEditingCell();\n          }).promise();\n        }\n\n        _this17._cancelSaving(result);\n      }).fail(result.reject);\n      return result.promise();\n    },\n    _resetModifiedClassCells: function (changes) {\n      var _this18 = this;\n\n      var editMode = _getEditMode(this);\n\n      if (editMode === EDIT_MODE_BATCH) {\n        var columnsCount = this._columnsController.getVisibleColumns().length;\n\n        changes.forEach(function (_ref5) {\n          var key = _ref5.key;\n\n          var rowIndex = _this18._dataController.getRowIndexByKey(key);\n\n          if (rowIndex !== -1) {\n            for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\n              _this18._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED);\n            }\n          }\n        });\n      }\n    },\n    _endSaving: function (dataChanges, changes, deferred) {\n      var _changes$;\n\n      var editMode = _getEditMode(this);\n\n      var dataSource = this._dataController.dataSource();\n\n      if (editMode !== EDIT_MODE_CELL) {\n        this._resetModifiedClassCells(changes);\n\n        this._resetEditIndices();\n      } else {\n        if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\n          this._resetEditIndices();\n        }\n      }\n\n      if (editMode === EDIT_MODE_POPUP && this._editPopup) {\n        this._editPopup.hide();\n      }\n\n      null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\n\n      this._refreshDataAfterSave(dataChanges, changes, deferred);\n    },\n    _cancelSaving: function (result) {\n      var editMode = _getEditMode(this);\n\n      var dataController = this._dataController;\n\n      if (_isRowEditMode(this)) {\n        if (!this.hasChanges()) {\n          this._cancelEditDataCore();\n        }\n      } else {\n        if (this.isCellOrBatchEditMode()) {\n          if (editMode !== EDIT_MODE_CELL) {\n            this._resetEditIndices();\n          }\n\n          dataController.updateItems();\n        } else {\n          this._focusEditingCell();\n        }\n      }\n\n      this.executeAction(\"onSaved\", {\n        changes: []\n      });\n\n      this._resolveAfterSave(result);\n    },\n    _refreshDataAfterSave: function (dataChanges, changes, deferred) {\n      var _this19 = this;\n\n      var dataController = this._dataController;\n      var refreshMode = this.option(\"editing.refreshMode\");\n      var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\n\n      if (!isFullRefresh) {\n        dataController.push(dataChanges);\n      }\n\n      (0, _deferred.when)(dataController.refresh({\n        selection: isFullRefresh,\n        reload: isFullRefresh,\n        load: \"reshape\" === refreshMode,\n        changesOnly: this.option(\"repaintChangesOnly\")\n      })).always(function () {\n        _this19._fireSaveEditDataEvents(changes);\n      }).done(function () {\n        _this19._resolveAfterSave(deferred);\n      }).fail(function (error) {\n        _this19._resolveAfterSave(deferred, {\n          error: error\n        });\n      });\n    },\n    isSaving: function () {\n      return this._saving;\n    },\n    _updateEditColumn: function () {\n      var that = this;\n\n      var isEditColumnVisible = that._isEditColumnVisible();\n\n      var useIcons = that.option(\"editing.useIcons\");\n      var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\n\n      that._columnsController.addCommandColumn({\n        type: \"buttons\",\n        command: \"edit\",\n        visible: isEditColumnVisible,\n        cssClass: cssClass,\n        width: \"auto\",\n        alignment: \"center\",\n        cellTemplate: that._getEditCommandCellTemplate(),\n        fixedPosition: \"right\"\n      });\n\n      that._columnsController.columnOption(\"command:edit\", {\n        visible: isEditColumnVisible,\n        cssClass: cssClass\n      });\n    },\n    _isEditColumnVisible: function () {\n      var that = this;\n      var editingOptions = that.option(\"editing\");\n\n      if (editingOptions) {\n        var editMode = _getEditMode(that);\n\n        var isVisibleWithCurrentEditMode = false;\n\n        switch (editMode) {\n          case EDIT_MODE_ROW:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n            break;\n\n          case EDIT_MODE_FORM:\n          case EDIT_MODE_POPUP:\n            isVisibleWithCurrentEditMode = editingOptions.allowUpdating;\n        }\n\n        return editingOptions.allowDeleting || isVisibleWithCurrentEditMode;\n      }\n    },\n    _updateEditButtons: function () {\n      var that = this;\n      var headerPanel = that.getView(\"headerPanel\");\n      var hasChanges = that.hasChanges();\n\n      if (headerPanel) {\n        headerPanel.setToolbarItemDisabled(\"saveButton\", !hasChanges);\n        headerPanel.setToolbarItemDisabled(\"revertButton\", !hasChanges);\n      }\n    },\n    _applyModified: function ($element) {\n      $element && $element.addClass(CELL_MODIFIED);\n    },\n    _beforeCloseEditCellInBatchMode: function () {},\n    cancelEditData: function () {\n      var changes = this.getChanges();\n      var params = {\n        cancel: false,\n        changes: changes\n      };\n      this.executeAction(\"onEditCanceling\", params);\n\n      if (!params.cancel) {\n        this._cancelEditDataCore();\n\n        this.executeAction(\"onEditCanceled\", {\n          changes: changes\n        });\n      }\n    },\n    _cancelEditDataCore: function () {\n      var editMode = _getEditMode(this);\n\n      var rowIndex = this._getVisibleEditRowIndex();\n\n      var dataController = this._dataController;\n\n      this._beforeCancelEditData();\n\n      this.init();\n      this.resetChanges();\n\n      this._resetEditColumnName();\n\n      this._resetEditRowKey();\n\n      if (ROW_BASED_MODES.indexOf(editMode) !== -1 && rowIndex >= 0) {\n        dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: [rowIndex, rowIndex + 1]\n        });\n      } else {\n        dataController.updateItems({\n          repaintChangesOnly: this.option(\"repaintChangesOnly\")\n        });\n      }\n\n      if (editMode === EDIT_MODE_POPUP) {\n        this._hideEditPopup();\n      }\n    },\n    _hideEditPopup: function () {\n      this._editPopup && this._editPopup.option(\"visible\", false);\n    },\n    hasEditData: function () {\n      return this.hasChanges();\n    },\n    closeEditCell: function (isError, withoutSaveEditData) {\n      var _this20 = this;\n\n      var that = this;\n      var result = (0, _deferred.when)();\n\n      var oldEditRowIndex = that._getVisibleEditRowIndex();\n\n      if (!_isRowEditMode(that)) {\n        var deferred = new _deferred.Deferred();\n        result = new _deferred.Deferred();\n        this.executeOperation(deferred, function () {\n          _this20._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve);\n        });\n      }\n\n      return result.promise();\n    },\n    _closeEditCellCore: function (isError, oldEditRowIndex, withoutSaveEditData) {\n      var _this21 = this;\n\n      var editMode = _getEditMode(this);\n\n      var dataController = this._dataController;\n      var deferred = new _deferred.Deferred();\n      var promise = deferred.promise();\n\n      if (editMode === EDIT_MODE_CELL && this.hasChanges()) {\n        if (!withoutSaveEditData) {\n          this.saveEditData().done(function (error) {\n            if (!_this21.hasChanges()) {\n              _this21.closeEditCell(!!error).always(deferred.resolve);\n\n              return;\n            }\n\n            deferred.resolve();\n          });\n          return promise;\n        }\n      } else {\n        if (oldEditRowIndex >= 0) {\n          var rowIndices = [oldEditRowIndex];\n\n          this._resetEditRowKey();\n\n          this._resetEditColumnName();\n\n          this._beforeCloseEditCellInBatchMode(rowIndices);\n\n          if (!isError) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndices\n            });\n          }\n        }\n      }\n\n      deferred.resolve();\n      return promise;\n    },\n    update: function (changeType) {\n      var that = this;\n      var dataController = that._dataController;\n\n      if (dataController && that._pageIndex !== dataController.pageIndex()) {\n        if (\"refresh\" === changeType) {\n          that.refresh(true);\n        }\n\n        that._pageIndex = dataController.pageIndex();\n      }\n\n      that._updateEditButtons();\n    },\n    _getRowIndicesForCascadeUpdating: function (row, skipCurrentRow) {\n      return skipCurrentRow ? [] : [row.rowIndex];\n    },\n    addDeferred: function (deferred) {\n      var _this22 = this;\n\n      if (this._deferreds.indexOf(deferred) < 0) {\n        this._deferreds.push(deferred);\n\n        deferred.always(function () {\n          var index = _this22._deferreds.indexOf(deferred);\n\n          if (index >= 0) {\n            _this22._deferreds.splice(index, 1);\n          }\n        });\n      }\n    },\n    _prepareChange: function (options, value, text) {\n      var _options$row;\n\n      var that = this;\n      var newData = {};\n      var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\n      var rowKey = options.key;\n      var $cellElement = (0, _renderer.default)(options.cellElement);\n\n      var editMode = _getEditMode(that);\n\n      var deferred = new _deferred.Deferred();\n\n      if (void 0 !== rowKey) {\n        if (editMode === EDIT_MODE_BATCH) {\n          that._applyModified($cellElement, options);\n        }\n\n        options.value = value;\n        var setCellValueResult = (0, _deferred.fromPromise)(options.column.setCellValue(newData, value, (0, _extend.extend)(true, {}, oldData), text));\n        setCellValueResult.done(function () {\n          deferred.resolve({\n            data: newData,\n            key: rowKey,\n            oldData: oldData,\n            type: DATA_EDIT_DATA_UPDATE_TYPE\n          });\n        }).fail(createFailureHandler(deferred)).fail(function (arg) {\n          return that._fireDataErrorOccurred(arg);\n        });\n\n        if ((0, _type.isDefined)(text) && options.column.displayValueMap) {\n          options.column.displayValueMap[value] = text;\n        }\n\n        that._updateRowValues(options);\n\n        that.addDeferred(deferred);\n      }\n\n      return deferred;\n    },\n    _updateRowValues: function (options) {\n      if (options.values) {\n        var dataController = this._dataController;\n        var rowIndex = dataController.getRowIndexByKey(options.key);\n        var row = dataController.getVisibleRows()[rowIndex];\n\n        if (row) {\n          options.values = row.values;\n        }\n\n        options.values[options.columnIndex] = options.value;\n      }\n    },\n    updateFieldValue: function (options, value, text, forceUpdateRow) {\n      var _this23 = this;\n\n      var rowKey = options.key;\n      var deferred = new _deferred.Deferred();\n\n      if (void 0 === rowKey) {\n        this._dataController.fireError(\"E1043\");\n      }\n\n      if (options.column.setCellValue) {\n        this._prepareChange(options, value, text).done(function (params) {\n          (0, _deferred.when)(_this23._applyChange(options, params, forceUpdateRow)).always(function () {\n            deferred.resolve();\n          });\n        });\n      } else {\n        deferred.resolve();\n      }\n\n      return deferred.promise();\n    },\n    _focusPreviousEditingCellIfNeed: function (options) {\n      var that = this;\n\n      if (that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex)) {\n        that._focusEditingCell();\n\n        that._updateEditRow(options.row, true);\n\n        return true;\n      }\n    },\n    _needUpdateRow: function (column) {\n      var visibleColumns = this._columnsController.getVisibleColumns();\n\n      if (!column) {\n        column = this._getEditColumn();\n      }\n\n      var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\n      var isCustomCalculateCellValue = visibleColumns.some(function (visibleColumn) {\n        return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue;\n      });\n      return isCustomSetCellValue || isCustomCalculateCellValue;\n    },\n    _applyChange: function (options, params, forceUpdateRow) {\n      var that = this;\n\n      var editMode = _getEditMode(that);\n\n      var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\n      var showEditorAlways = options.column.showEditorAlways;\n      var isUpdateInCellMode = editMode === EDIT_MODE_CELL && options.row && !options.row.isNewRow;\n      var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex);\n\n      if (focusPreviousEditingCell) {\n        that._focusEditingCell();\n\n        that._updateEditRow(options.row, true, isCustomSetCellValue);\n\n        return;\n      }\n\n      that._addChange(params, options.row);\n\n      that._updateEditButtons();\n\n      if (showEditorAlways && !forceUpdateRow) {\n        if (isUpdateInCellMode) {\n          that._setEditRowKey(options.row.key, true);\n\n          that._setEditColumnNameByIndex(options.columnIndex, true);\n\n          return that.saveEditData();\n        } else {\n          if (editMode === EDIT_MODE_BATCH) {\n            forceUpdateRow = that._needUpdateRow(options.column);\n          }\n        }\n      }\n\n      var row = options.row;\n\n      if (row) {\n        if (forceUpdateRow || isCustomSetCellValue) {\n          that._updateEditRow(row, forceUpdateRow, isCustomSetCellValue);\n        } else {\n          if (row.update) {\n            row.update();\n          }\n        }\n      }\n    },\n    _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n      var that = this;\n      var editForm = that._editForm;\n\n      var editMode = _getEditMode(that);\n\n      if (editMode === EDIT_MODE_POPUP) {\n        if (that.option(\"repaintChangesOnly\")) {\n          row.update && row.update(row);\n        } else {\n          if (editForm) {\n            that._updateEditFormDeferred = new _deferred.Deferred().done(function () {\n              return editForm.repaint();\n            });\n\n            if (!that._updateLockCount) {\n              that._updateEditFormDeferred.resolve();\n            }\n          }\n        }\n      } else {\n        that._dataController.updateItems({\n          changeType: \"update\",\n          rowIndices: that._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\n        });\n      }\n    },\n    _endUpdateCore: function () {\n      this._updateEditFormDeferred && this._updateEditFormDeferred.resolve();\n    },\n    _updateEditRow: function (row, forceUpdateRow, isCustomSetCellValue) {\n      var that = this;\n\n      if (forceUpdateRow || !_isRowEditMode(that)) {\n        that._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\n\n        if (!forceUpdateRow) {\n          that._focusEditingCell();\n        }\n      } else {\n        var deferred = new _deferred.Deferred();\n        that.addDeferred(deferred);\n        setTimeout(function () {\n          var $focusedElement = (0, _renderer.default)(_dom_adapter.default.getActiveElement());\n\n          var columnIndex = that._rowsView.getCellIndex($focusedElement, row.rowIndex);\n\n          var focusedElement = $focusedElement.get(0);\n\n          var selectionRange = _uiGrid_core2.default.getSelectionRange(focusedElement);\n\n          that._updateEditRowCore(row, false, isCustomSetCellValue);\n\n          if (columnIndex >= 0) {\n            var $focusedItem = that._rowsView._getCellElement(row.rowIndex, columnIndex);\n\n            that._delayedInputFocus($focusedItem, function () {\n              setTimeout(function () {\n                focusedElement = _dom_adapter.default.getActiveElement();\n\n                if (selectionRange.selectionStart >= 0) {\n                  _uiGrid_core2.default.setSelectionRange(focusedElement, selectionRange);\n                }\n              });\n            });\n          }\n\n          deferred.resolve();\n        });\n      }\n    },\n    _addChange: function (options, row) {\n      var changes = _toConsumableArray(this.getChanges());\n\n      var index = _uiGrid_core2.default.getIndexByKey(options.key, changes);\n\n      if (index < 0) {\n        index = changes.length;\n\n        this._addInternalData({\n          key: options.key,\n          oldData: options.oldData\n        });\n\n        delete options.oldData;\n        changes.push(options);\n      }\n\n      var change = _objectSpread({}, changes[index]);\n\n      if (change) {\n        if (options.data) {\n          change.data = (0, _array_utils.createObjectWithChanges)(change.data, options.data);\n        }\n\n        if ((!change.type || !options.data) && options.type) {\n          change.type = options.type;\n        }\n\n        if (row) {\n          row.oldData = this._getOldData(row.key);\n          row.data = (0, _array_utils.createObjectWithChanges)(row.data, options.data);\n        }\n      }\n\n      changes[index] = change;\n\n      this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\n\n      return index;\n    },\n    _getFormEditItemTemplate: function (cellOptions, column) {\n      return column.editCellTemplate || getDefaultEditorTemplate(this);\n    },\n    renderFormEditTemplate: function (detailCellOptions, item, form, container, isReadOnly) {\n      var that = this;\n      var $container = (0, _renderer.default)(container);\n      var column = item.column;\n      var editorType = getEditorType(item);\n      var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\n      var cellOptions = (0, _extend.extend)({}, detailCellOptions, {\n        data: rowData,\n        cellElement: null,\n        isOnForm: true,\n        item: item,\n        column: (0, _extend.extend)({}, column, {\n          editorType: editorType,\n          editorOptions: item.editorOptions\n        }),\n        id: form.getItemID(item.name || item.dataField),\n        columnIndex: column.index,\n        setValue: !isReadOnly && column.allowEditing && function (value) {\n          that.updateFieldValue(cellOptions, value);\n        }\n      });\n      cellOptions.value = column.calculateCellValue(rowData);\n\n      var template = that._getFormEditItemTemplate.bind(that)(cellOptions, column);\n\n      that._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest((0, _window.getWindow)().document).length).done(function () {\n        that._rowsView._updateCell($container, cellOptions);\n      });\n\n      return cellOptions;\n    },\n    getFormEditorTemplate: function (cellOptions, item) {\n      var that = this;\n      var column = this.component.columnOption(item.dataField);\n      return function (options, container) {\n        var $container = (0, _renderer.default)(container);\n        cellOptions.row.watch && cellOptions.row.watch(function () {\n          return column.selector(cellOptions.row.data);\n        }, function () {\n          var _validator;\n\n          var $editorElement = $container.find(\".dx-widget\").first();\n          var validator = $editorElement.data(\"dxValidator\");\n          var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n          $container.contents().remove();\n          cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n          $editorElement = $container.find(\".dx-widget\").first();\n          validator = $editorElement.data(\"dxValidator\");\n\n          if (validatorOptions && !validator) {\n            $editorElement.dxValidator({\n              validationRules: validatorOptions.validationRules,\n              validationGroup: validatorOptions.validationGroup,\n              dataGetter: validatorOptions.dataGetter\n            });\n          }\n        });\n        cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\n      };\n    },\n    getEditFormOptions: function (detailOptions) {\n      var userCustomizeItem = this.option(\"editing.form.customizeItem\");\n      var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n      var items = this.option(\"editing.form.items\");\n      var isCustomEditorType = {};\n      var that = this;\n\n      if (!items) {\n        var columns = this.getController(\"columns\").getColumns();\n        items = [];\n        (0, _iterator.each)(columns, function (_, column) {\n          if (!column.isBand && !column.type) {\n            items.push({\n              column: column,\n              name: column.name,\n              dataField: column.dataField\n            });\n          }\n        });\n      } else {\n        forEachFormItems(items, function (item) {\n          var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n\n          if (itemId) {\n            isCustomEditorType[itemId] = !!item.editorType;\n          }\n        });\n      }\n\n      return {\n        items: items,\n        formID: \"dx-\" + new _guid.default(),\n        customizeItem: function (item) {\n          var column;\n          var itemId = item.name || item.dataField;\n\n          if (item.column || itemId) {\n            column = item.column || that._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n          }\n\n          if (column) {\n            item.label = item.label || {};\n            item.label.text = item.label.text || column.caption;\n            item.template = item.template || that.getFormEditorTemplate(detailOptions, item);\n            item.column = column;\n            item.isCustomEditorType = isCustomEditorType[itemId];\n\n            if (column.formItem) {\n              (0, _extend.extend)(item, column.formItem);\n            }\n\n            if (void 0 === item.isRequired && column.validationRules) {\n              item.isRequired = column.validationRules.some(function (rule) {\n                return \"required\" === rule.type;\n              });\n              item.validationRules = [];\n            }\n\n            var itemVisible = (0, _type.isDefined)(item.visible) ? item.visible : true;\n\n            if (!that._firstFormItem && itemVisible) {\n              that._firstFormItem = item;\n            }\n          }\n\n          userCustomizeItem && userCustomizeItem.call(this, item);\n          item.cssClass = (0, _type.isString)(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n        }\n      };\n    },\n    getEditFormTemplate: function () {\n      var that = this;\n      return function ($container, detailOptions, renderFormOnly) {\n        var editFormOptions = that.option(\"editing.form\");\n        var baseEditFormOptions = that.getEditFormOptions(detailOptions);\n        that._firstFormItem = void 0;\n        that._editForm = that._createComponent((0, _renderer.default)(\"<div>\").appendTo($container), _form.default, (0, _extend.extend)({}, editFormOptions, baseEditFormOptions));\n\n        if (!renderFormOnly) {\n          var $buttonsContainer = (0, _renderer.default)(\"<div>\").addClass(that.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n\n          that._createComponent((0, _renderer.default)(\"<div>\").appendTo($buttonsContainer), _button.default, that._getSaveButtonConfig());\n\n          that._createComponent((0, _renderer.default)(\"<div>\").appendTo($buttonsContainer), _button.default, that._getCancelButtonConfig());\n        }\n\n        that._editForm.on(\"contentReady\", function () {\n          that._editPopup && that._editPopup.repaint();\n        });\n      };\n    },\n    getColumnTemplate: function (options) {\n      var that = this;\n      var column = options.column;\n      var rowIndex = options.row && options.row.rowIndex;\n      var template;\n\n      var isRowMode = _isRowEditMode(that);\n\n      var isRowEditing = that.isEditRow(rowIndex);\n      var isCellEditing = that.isEditCell(rowIndex, options.columnIndex);\n      var editingStartOptions;\n\n      if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\n        var allowUpdating = that.allowUpdating(options);\n\n        if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowMode && isRowEditing || !isRowMode)) {\n          if (column.showEditorAlways && !isRowMode) {\n            editingStartOptions = {\n              cancel: false,\n              key: options.row.isNewRow ? void 0 : options.row.key,\n              data: options.row.data,\n              column: column\n            };\n\n            that._isEditingStart(editingStartOptions);\n          }\n\n          if (!editingStartOptions || !editingStartOptions.cancel) {\n            options.setValue = function (value, text) {\n              that.updateFieldValue(options, value, text);\n            };\n          }\n        }\n\n        template = column.editCellTemplate || getDefaultEditorTemplate(that);\n      } else {\n        if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\n          template = that.getEditFormTemplate(options);\n        }\n      }\n\n      return template;\n    },\n    _createButton: function ($container, button, options) {\n      var that = this;\n      var icon = EDIT_ICON_CLASS[button.name];\n      var useIcons = that.option(\"editing.useIcons\");\n      var $button = (0, _renderer.default)(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\n\n      if (button.template) {\n        that._rowsView.renderTemplate($container, button.template, options, true);\n      } else {\n        if (useIcons && icon || button.icon) {\n          icon = button.icon || icon;\n          var iconType = iconUtils.getImageSourceType(icon);\n\n          if (\"image\" === iconType || \"svg\" === iconType) {\n            $button = iconUtils.getImageContainer(icon).addClass(button.cssClass);\n          } else {\n            $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text);\n          }\n\n          $button.addClass(\"dx-link-icon\");\n          $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\n          var localizationName = this.getButtonLocalizationNames()[button.name];\n          localizationName && $button.attr(\"aria-label\", _message.default.format(localizationName));\n        } else {\n          $button.text(button.text);\n        }\n\n        if ((0, _type.isDefined)(button.hint)) {\n          $button.attr(\"title\", button.hint);\n        }\n\n        _events_engine.default.on($button, (0, _index.addNamespace)(\"click\", EDITING_NAMESPACE), that.createAction(function (e) {\n          button.onClick.call(button, (0, _extend.extend)({}, e, {\n            row: options.row,\n            column: options.column\n          }));\n          e.event.preventDefault();\n          e.event.stopPropagation();\n        }));\n\n        $container.append($button, \"&nbsp;\");\n      }\n    },\n    getButtonLocalizationNames: function () {\n      return {\n        edit: \"dxDataGrid-editingEditRow\",\n        save: \"dxDataGrid-editingSaveRowChanges\",\n        \"delete\": \"dxDataGrid-editingDeleteRow\",\n        undelete: \"dxDataGrid-editingUndeleteRow\",\n        cancel: \"dxDataGrid-editingCancelRowChanges\"\n      };\n    },\n    prepareEditButtons: function (headerPanel) {\n      var that = this;\n      var editingOptions = that.option(\"editing\") || {};\n      var editingTexts = that.option(\"editing.texts\") || {};\n      var titleButtonTextByClassNames = {\n        revert: editingTexts.cancelAllChanges,\n        save: editingTexts.saveAllChanges,\n        addRow: editingTexts.addRow\n      };\n      var classNameButtonByNames = {\n        revert: \"cancel\",\n        save: \"save\",\n        addRow: \"addrow\"\n      };\n      var buttonItems = [];\n\n      var prepareButtonItem = function (name, methodName, sortIndex) {\n        var className = classNameButtonByNames[name];\n\n        var onInitialized = function (e) {\n          (0, _renderer.default)(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + that.addWidgetPrefix(className) + \"-button\"));\n        };\n\n        var hintText = titleButtonTextByClassNames[name];\n        var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && !that.hasChanges();\n        return {\n          widget: \"dxButton\",\n          options: {\n            onInitialized: onInitialized,\n            icon: \"edit-button-\" + className,\n            disabled: isButtonDisabled,\n            onClick: function () {\n              setTimeout(function () {\n                that[methodName]();\n              });\n            },\n            text: hintText,\n            hint: hintText\n          },\n          showText: \"inMenu\",\n          name: name + \"Button\",\n          location: \"after\",\n          locateInMenu: \"auto\",\n          sortIndex: sortIndex\n        };\n      };\n\n      if (editingOptions.allowAdding) {\n        buttonItems.push(prepareButtonItem(\"addRow\", \"addRow\", 20));\n      }\n\n      if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && _getEditMode(that) === EDIT_MODE_BATCH) {\n        buttonItems.push(prepareButtonItem(\"save\", \"saveEditData\", 21));\n        buttonItems.push(prepareButtonItem(\"revert\", \"cancelEditData\", 22));\n      }\n\n      return buttonItems;\n    },\n    highlightDataCell: function ($cell, parameters) {\n      var cellModified = this.isCellModified(parameters);\n      cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED);\n    },\n    _afterInsertRow: function () {},\n    _beforeSaveEditData: function (change) {\n      if (change && !(0, _type.isDefined)(change.key) && (0, _type.isDefined)(change.type)) {\n        return true;\n      }\n    },\n    _afterSaveEditData: function () {},\n    _beforeCancelEditData: function () {},\n    _allowEditAction: function (actionName, options) {\n      var allowEditAction = this.option(\"editing.\" + actionName);\n\n      if ((0, _type.isFunction)(allowEditAction)) {\n        allowEditAction = allowEditAction({\n          component: this.component,\n          row: options.row\n        });\n      }\n\n      return allowEditAction;\n    },\n    allowUpdating: function (options, eventName) {\n      var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\n      var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\n      return needCallback && this._allowEditAction(\"allowUpdating\", options);\n    },\n    allowDeleting: function (options) {\n      return this._allowEditAction(\"allowDeleting\", options);\n    },\n    isCellModified: function (parameters) {\n      var columnIndex = parameters.columnIndex;\n      var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\n      return !!modifiedValues && void 0 !== modifiedValues[columnIndex];\n    }\n  };\n}());\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      editing: {\n        mode: \"row\",\n        refreshMode: \"full\",\n        allowAdding: false,\n        allowUpdating: false,\n        allowDeleting: false,\n        useIcons: false,\n        selectTextOnEditStart: false,\n        confirmDelete: true,\n        texts: {\n          editRow: _message.default.format(\"dxDataGrid-editingEditRow\"),\n          saveAllChanges: _message.default.format(\"dxDataGrid-editingSaveAllChanges\"),\n          saveRowChanges: _message.default.format(\"dxDataGrid-editingSaveRowChanges\"),\n          cancelAllChanges: _message.default.format(\"dxDataGrid-editingCancelAllChanges\"),\n          cancelRowChanges: _message.default.format(\"dxDataGrid-editingCancelRowChanges\"),\n          addRow: _message.default.format(\"dxDataGrid-editingAddRow\"),\n          deleteRow: _message.default.format(\"dxDataGrid-editingDeleteRow\"),\n          undeleteRow: _message.default.format(\"dxDataGrid-editingUndeleteRow\"),\n          confirmDeleteMessage: _message.default.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\n          confirmDeleteTitle: \"\"\n        },\n        form: {\n          colCount: 2\n        },\n        popup: {},\n        startEditAction: \"click\",\n        editRowKey: null,\n        editColumnName: null,\n        changes: []\n      }\n    };\n  },\n  controllers: {\n    editing: EditingController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          this._editingController = this.getController(\"editing\");\n          this.callBase();\n        },\n        reload: function (full, repaintChangesOnly) {\n          !repaintChangesOnly && this._editingController.refresh();\n          return this.callBase.apply(this, arguments);\n        },\n        repaintRows: function () {\n          if (this.getController(\"editing\").isSaving()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _updateEditRow: function (items) {\n          var editingController = this._editingController;\n          var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n\n          var editRowIndex = _uiGrid_core2.default.getIndexByKey(editRowKey, items);\n\n          var editItem = items[editRowIndex];\n\n          if (editItem) {\n            editItem.isEditing = true;\n\n            if (editingController.getEditMode() === EDIT_MODE_FORM) {\n              editItem.rowType = \"detail\";\n            }\n          }\n        },\n        _updateItemsCore: function (change) {\n          this.callBase(change);\n\n          this._updateEditRow(this.items());\n        },\n        _applyChangeUpdate: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _applyChangesOnly: function (change) {\n          this._updateEditRow(change.items);\n\n          this.callBase(change);\n        },\n        _processItems: function (items, change) {\n          items = this._editingController.processItems(items, change);\n          return this.callBase(items, change);\n        },\n        _processDataItem: function (dataItem, options) {\n          this._editingController.processDataItem(dataItem, options, this.generateDataValues);\n\n          return this.callBase(dataItem, options);\n        },\n        _processItem: function (item, options) {\n          item = this.callBase(item, options);\n\n          if (item.isNewRow) {\n            options.dataIndex--;\n            delete item.dataIndex;\n          }\n\n          return item;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var isRowEditMode = editingController.isRowEditMode();\n\n          if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed || isRowEditMode && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n          var cell = oldRow.cells && oldRow.cells[columnIndex];\n          var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\n\n          if (isLiveUpdate && isEditing) {\n            return false;\n          }\n\n          if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\n            return true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        init: function () {\n          this.callBase();\n          this._editingController = this.getController(\"editing\");\n        },\n        getCellElements: function (rowIndex) {\n          var $cellElements = this.callBase(rowIndex);\n          var editingController = this._editingController;\n          var editForm = editingController.getEditForm();\n          var editFormRowIndex = editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n\n          return $cellElements;\n        },\n        getCellIndex: function ($cell, rowIndex) {\n          if (!$cell.is(\"td\") && rowIndex >= 0) {\n            var $cellElements = this.getCellElements(rowIndex);\n            var cellIndex = -1;\n            (0, _iterator.each)($cellElements, function (index, cellElement) {\n              if ((0, _renderer.default)(cellElement).find($cell).length) {\n                cellIndex = index;\n              }\n            });\n            return cellIndex;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getVisibleColumnIndex: function ($cells, rowIndex, columnIdentifier) {\n          var editFormRowIndex = this._editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && (0, _type.isString)(columnIdentifier)) {\n            var column = this._columnsController.columnOption(columnIdentifier);\n\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function ($cells, column) {\n          var visibleIndex = -1;\n          (0, _iterator.each)($cells, function (index, cellElement) {\n            var item = (0, _renderer.default)(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n\n            if (item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        publicMethods: function () {\n          return this.callBase().concat([\"cellValue\"]);\n        },\n        _getCellTemplate: function (options) {\n          var that = this;\n\n          var template = that._editingController.getColumnTemplate(options);\n\n          return template || that.callBase(options);\n        },\n        _isNativeClick: function () {\n          return (_devices.default.real().ios || _devices.default.real().android) && this.option(\"editing.allowUpdating\");\n        },\n        _createTable: function () {\n          var that = this;\n          var $table = that.callBase.apply(that, arguments);\n\n          if (!_isRowEditMode(that) && that.option(\"editing.allowUpdating\")) {\n            _events_engine.default.on($table, (0, _index.addNamespace)(_hold.default.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", that.createAction(function () {\n              var editingController = that._editingController;\n\n              if (editingController.isEditing()) {\n                editingController.closeEditCell();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isEditRow = editingController.isEditRow(row.rowIndex);\n            var isRowRemoved = !!row.removed;\n            var isRowInserted = !!row.isNewRow;\n            var isRowModified = !!row.modified;\n\n            if (_getEditMode(this) === EDIT_MODE_BATCH) {\n              isRowRemoved && $row.addClass(ROW_REMOVED);\n            } else {\n              isEditRow && $row.addClass(EDIT_ROW);\n            }\n\n            isRowInserted && $row.addClass(ROW_INSERTED);\n            isRowModified && $row.addClass(ROW_MODIFIED);\n\n            if (isEditRow || isRowInserted || isRowRemoved) {\n              $row.removeClass(ROW_SELECTED);\n            }\n\n            if (isEditRow && \"detail\" === row.rowType) {\n              $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n            }\n          }\n\n          return $row;\n        },\n        _getColumnIndexByElement: function ($element) {\n          var $tableElement = $element.closest(\"table\");\n          var $tableElements = this.getTableElements();\n\n          while ($tableElement.length && !$tableElements.filter($tableElement).length) {\n            $element = $tableElement.closest(\"td\");\n            $tableElement = $element.closest(\"table\");\n          }\n\n          return this._getColumnIndexByElementCore($element);\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\n          return this.getCellIndex($targetElement);\n        },\n        _editCellByClick: function (e, eventName) {\n          var that = this;\n          var editingController = that._editingController;\n          var $targetElement = (0, _renderer.default)(e.event.target);\n\n          var columnIndex = that._getColumnIndexByElement($targetElement);\n\n          var row = that._dataController.items()[e.rowIndex];\n\n          var allowUpdating = editingController.allowUpdating({\n            row: row\n          }, eventName) || row && row.isNewRow;\n\n          var column = that._columnsController.getVisibleColumns()[columnIndex];\n\n          var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\n          var startEditAction = that.option(\"editing.startEditAction\") || \"click\";\n\n          if (\"down\" === eventName) {\n            return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex);\n          }\n\n          if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\n            editingController.closeEditCell();\n          }\n\n          if (allowEditing && eventName === startEditAction) {\n            return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex);\n          }\n        },\n        _rowPointerDown: function (e) {\n          var _this24 = this;\n\n          this._pointerDownTimeout = setTimeout(function () {\n            _this24._editCellByClick(e, \"down\");\n          });\n        },\n        _rowClick: function (e) {\n          var isEditForm = (0, _renderer.default)(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n          e.event[TARGET_COMPONENT_NAME] = this.component;\n\n          if (!this._editCellByClick(e, \"click\") && !isEditForm) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _rowDblClick: function (e) {\n          if (!this._editCellByClick(e, \"dblClick\")) {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cellPrepared: function ($cell, parameters) {\n          var editingController = this._editingController;\n          var isCommandCell = !!parameters.column.command;\n          var isEditableCell = parameters.setValue;\n          var isEditRow = editingController.isEditRow(parameters.rowIndex);\n          var isEditing = isEditingCell(isEditRow, parameters);\n\n          if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\n            var alignment = parameters.column.alignment;\n            $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\n\n            if (alignment) {\n              $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment);\n            }\n          }\n\n          if (isEditing) {\n            this._editCellPrepared($cell);\n          }\n\n          if (parameters.column && !isCommandCell) {\n            editingController.highlightDataCell($cell, parameters);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editCellPrepared: function ($cell) {},\n        _formItemPrepared: function () {},\n        _isFormItem: function (parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n\n          var isPopupEditing = \"data\" === parameters.rowType && \"popup\" === _getEditMode(this);\n\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function ($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        },\n        _update: function (change) {\n          this.callBase(change);\n\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED);\n          }\n        },\n        _getCellOptions: function (options) {\n          var cellOptions = this.callBase(options);\n          cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\n          return cellOptions;\n        },\n        _createCell: function (options) {\n          var $cell = this.callBase(options);\n\n          var isEditRow = this._editingController.isEditRow(options.rowIndex);\n\n          isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\n          return $cell;\n        },\n        _renderCellContent: function ($cell, options) {\n          if (\"data\" === options.rowType && _getEditMode(this) === EDIT_MODE_POPUP && false === options.row.visible) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        cellValue: function (rowIndex, columnIdentifier, value, text) {\n          var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\n\n          if (cellOptions) {\n            if (void 0 === value) {\n              return cellOptions.value;\n            } else {\n              this._editingController.updateFieldValue(cellOptions, value, text, true);\n            }\n          }\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._pointerDownTimeout);\n        },\n        _renderCore: function () {\n          this.callBase.apply(this, arguments);\n\n          this._editingController._focusEditorIfNeed();\n        }\n      },\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n          var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\n          return editButtonItems.concat(items);\n        },\n        optionChanged: function (args) {\n          var fullName = args.fullName;\n\n          switch (args.name) {\n            case \"editing\":\n              var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\n              var shouldInvalidate = fullName && !excludedOptions.some(function (optionName) {\n                return optionName === fullName;\n              });\n              shouldInvalidate && this._invalidate();\n              this.callBase(args);\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        isVisible: function () {\n          var that = this;\n          var editingOptions = that.getController(\"editing\").option(\"editing\");\n          return that.callBase() || editingOptions && (editingOptions.allowAdding || (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH);\n        }\n      }\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.editing.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","exports","default","_renderer","_interopRequireDefault","require","_dom_adapter","_window","_events_engine","_guid","_type","_iterator","_extend","_uiGrid_core","_click","_double_click","_pointer","_uiGrid_core2","_array_utils","_index","_dialog","_message","_button","_popup","_devices","_form","_hold","_deferred","_common","iconUtils","_interopRequireWildcard","_ui","_getRequireWildcardCache","WeakMap","cache","__esModule","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","configurable","writable","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","name","Array","from","test","iter","isArray","len","arr2","EDIT_FORM_CLASS","EDIT_FORM_ITEM_CLASS","FOCUS_OVERLAY_CLASS","READONLY_CLASS","EDIT_POPUP_CLASS","FORM_BUTTONS_CONTAINER_CLASS","ADD_ROW_BUTTON_CLASS","DROPDOWN_EDITOR_OVERLAY_CLASS","LINK_CLASS","EDITOR_CELL_CLASS","ROW_SELECTED","EDIT_ROW","EDIT_BUTTON_CLASS","COMMAND_EDIT_CLASS","COMMAND_EDIT_WITH_ICONS_CLASS","SCROLLABLE_CONTAINER_CLASS","BUTTON_CLASS","INSERT_INDEX","ROW_CLASS","ROW_REMOVED","ROW_INSERTED","ROW_MODIFIED","CELL_MODIFIED","EDITING_NAMESPACE","DATA_ROW_CLASS","CELL_FOCUS_DISABLED_CLASS","EDITORS_INPUT_SELECTOR","FOCUSABLE_ELEMENT_SELECTOR","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_CELL","EDIT_MODE_FORM","EDIT_MODE_POPUP","DATA_EDIT_DATA_INSERT_TYPE","DATA_EDIT_DATA_UPDATE_TYPE","DATA_EDIT_DATA_REMOVE_TYPE","DEFAULT_START_EDIT_ACTION","EDIT_MODES","ROW_BASED_MODES","CELL_BASED_MODES","FORM_BASED_MODES","MODES_WITH_DELAYED_FOCUS","TARGET_COMPONENT_NAME","EDIT_LINK_CLASS","save","cancel","edit","undelete","add","EDIT_ICON_CLASS","METHOD_NAMES","ACTION_OPTION_NAMES","BUTTON_NAMES","EDITING_POPUP_OPTION_NAME","EDITING_CHANGES_OPTION_NAME","EDITING_EDITROWKEY_OPTION_NAME","EDITING_EDITCOLUMNNAME_OPTION_NAME","createFailureHandler","deferred","arg","error","Error","String","reject","_getEditMode","that","editMode","option","indexOf","_isRowEditMode","isEditingCell","isEditRow","cellOptions","isEditing","column","allowEditing","isEditingOrShowEditorAlwaysDataCell","isCommandCell","command","isEditorCell","showEditorAlways","rowType","EditingController","ViewController","inherit","getDefaultEditorTemplate","container","options","$editor","appendTo","getController","createEditor","extend","setValue","row","parentType","width","readOnly","isOnForm","id","getEditingTexts","editingTexts","component","saveRowChanges","cancelRowChanges","editRow","undeleteRow","deleteRow","addRowToNode","getButtonIndex","buttons","result","some","button","index","getButtonName","isObject","getEditorType","item","isCustomEditorType","editorType","formItem","forEachFormItems","items","callBack","tabs","init","_columnsController","_dataController","_rowsView","getView","_editForm","_updateEditFormDeferred","_lastOperation","_deferreds","d","_dataChangedHandler","_handleDataChanged","bind","changed","_saveEditorHandler","createAction","excludeValidators","$pointerDownTarget","isResizing","_pointerUpEditorHandler","_that$getController","_pointerDownEditorHandler","e","event","$target","targetComponent","is","checkEditorPopup","$element","closest","concat","_editCellInProgress","isEditorPopup","isDomElement","getWindow","document","isAnotherComponent","_disposed","isAddRowButton","addWidgetPrefix","isFocusOverlay","hasClass","isCellEditMode","_closeEditItem","on","getDocument","up","down","_updateEditColumn","_updateEditButtons","_internalState","_optionsByReference","getChanges","resetChanges","changes","needReset","_silentOption","_getInternalData","_addInternalData","params","internalData","_getOldData","_this$_getInternalDat","oldData","getUpdatedData","data","keyOf","editIndex","getIndexByKey","createObjectWithChanges","getInsertedData","change","type","map","getRemovedData","_this","_fireDataErrorOccurred","$popupContent","getPopupContent","dataErrorOccurred","fire","_needToCloseEditableCell","$targetElement","isCurrentComponentElement","isDataRow","rowsView","$targetCell","rowIndex","getRowIndex","parent","columnIndex","getCellElements","visibleColumns","getVisibleColumns","isEditCell","closeEditCell","args","editForm","changeType","_repaintEditPopup","_isDefaultButtonVisible","isRowMode","isBatchMode","_getVisibleEditRowIndex","allowUpdating","allowDeleting","removed","_isButtonVisible","visible","isDefined","isFunction","_getButtonConfig","_this2","config","buttonName","methodName","editingOptions","actionName","allowAction","text","cssClass","onClick","stopPropagation","preventDefault","setTimeout","_getEditingButtons","_this3","buttonIndex","haveCustomButtons","splice","_renderEditingButtons","$container","_this4","_createButton","_getEditCommandCellTemplate","_this5","watch","empty","setEmptyText","isRowEditMode","isFormEditMode","isCellOrBatchEditMode","getEditMode","getFirstEditableColumnIndex","columnsController","firstFormItem","_firstFormItem","editRowKey","editRowIndex","getRowIndexByKey","$editFormElements","_getEditFormEditorVisibleIndex","each","getFirstEditableCellInRow","_getCellElement","getFocusedCellInRow","hasChanges","dispose","callBase","clearTimeout","_inputFocusTimeoutID","off","optionChanged","fullName","editPopup","_editPopup","popupOptionName","_handleEditRowKeyChange","_handleEditColumnNameChange","_handleChangesChange","_resetEditColumnName","_resetEditRowKey","handled","oldRowIndexCorrection","_getEditRowIndexCorrection","oldRowIndex","previousValue","_getVisibleEditColumnIndex","_editRowFromOptionChanged","cancelEditData","_editCellFromOptionChanged","getVisibleColumnIndex","oldColumnIndex","dataController","updateItems","repaintChangesOnly","_this6","columns","deferRender","_repaintEditCell","publicMethods","refresh","isPageChanged","needResetIndexes","_pageIndex","isEditRowKeyDefined","isEditColumnNameDefined","_setEditRowKey","silent","_setEditRowKeyByIndex","getKeyByRowIndex","fireError","getEditRowIndex","getEditFormRowIndex","visibleRowIndex","popupVisible","_$popupContent","getEditForm","_needInsertItem","dataSource","scrollingMode","pageIndex","beginPageIndex","endPageIndex","dataRowIndex","_generateNewItem","_getLoadedRowIndexByInsertKey","loadedRowIndexOffset","getRowIndexOffset","loadedRowIndex","removeCount","processItems","_this7","update","processDataItem","generateDataValues","_changes$editIndex","isNewRow","modified","modifiedValues","_initNewRow","_this8","executeAction","promise","Deferred","when","fromPromise","done","resolve","fail","_getInsertKey","parentKey","rows","insertKey","_getInsertRowIndex","_getInsertIndex","parentRowIndex","getTopVisibleItemIndex","maxInsertIndex","editItem","addRow","store","param","oldEditRowIndex","NAME","saveEditData","_allowRowAdding","__KEY__","_addRowCore","insertIndex","initialOldEditRowIndex","_addChange","rowIndices","_showEditPopup","_focusFirstEditableCellInRow","_afterInsertRow","$firstCell","_delayedInputFocus","$cell","eventToTrigger","trigger","_isEditingStart","_beforeEditCell","always","_beforeUpdateItems","editColumnName","_setEditColumnNameByIndex","_visibleColumns$index","_setEditColumnName","_getEditColumn","_getColumnByName","editColumn","columnName","isColumnHidden","visibleWidth","_resetEditIndices","_needFocusEditor","_focusEditorIfNeed","_this9","$editingCell","focus","_this$_rowsView","editColumnIndex","find","_focusEditingCell","repaintForm","isMobileDevice","current","deviceType","popupOptions","showTitle","fullScreen","toolbarItems","toolbar","location","widget","_getSaveButtonConfig","_getCancelButtonConfig","contentTemplate","_getPopupEditFormTemplate","$popupContainer","addClass","_createComponent","_getEditPopupHiddenHandler","$content","not","first","repaint","show","defaultAnimation","getVisibleRows","templateOptions","formTemplate","getEditFormTemplate","scrollable","_removeInternalData","_removeChange","equalByValue","executeOperation","func","_this10","waitForDeferredOperations","state","editCell","_editCell","_this11","coreResult","_editCellCore","_getNormalizedEditCellOptions","_ref","oldColumn","isString","columnOption","getVisibleIndex","_this12","isEditByOptionChanged","_this$_getNormalizedE","_prepareEditCell","_processCanceledEditingCell","loseFocus","beforeFocusCallback","callBeforeFocusCallbackAlways","inputFocus","$focusableElement","focusAndSelectElement","_beforeFocusCallback","real","ios","android","$editCell","_this13","rowKey","_checkAndDeleteRow","texts","mode","confirmDelete","confirmDeleteMessage","_deleteRowCore","confirmDeleteTitle","showDialogTitle","confirm","confirmResult","isEmptyObject","_fireOnSaving","_this14","onSavingParams","_executeEditingAction","_processChanges","deferreds","results","dataChanges","_this15","changeCopy","_beforeSaveEditData","remove","insert","newData","doneDeferred","_processSaveEditDataResult","hasSavedData","changesLength","isError","_fireSaveEditDataEvents","_","_ref2","_this16","isSaving","_resolveAfterSave","_saving","_saveEditDataInner","_ref3","_afterSaveEditData","_this17","_ref4","beginLoading","_endSaving","endLoading","_cancelSaving","_resetModifiedClassCells","_this18","columnsCount","_ref5","removeClass","_changes$","hide","_refreshDataAfterSave","_cancelEditDataCore","_this19","refreshMode","isFullRefresh","selection","reload","load","changesOnly","isEditColumnVisible","_isEditColumnVisible","useIcons","addCommandColumn","alignment","cellTemplate","fixedPosition","isVisibleWithCurrentEditMode","allowAdding","headerPanel","setToolbarItemDisabled","_applyModified","_beforeCloseEditCellInBatchMode","_beforeCancelEditData","_hideEditPopup","hasEditData","withoutSaveEditData","_this20","_closeEditCellCore","_this21","_getRowIndicesForCascadeUpdating","skipCurrentRow","addDeferred","_this22","_prepareChange","_options$row","$cellElement","cellElement","setCellValueResult","setCellValue","displayValueMap","_updateRowValues","values","updateFieldValue","forceUpdateRow","_this23","_applyChange","_focusPreviousEditingCellIfNeed","_updateEditRow","_needUpdateRow","isCustomSetCellValue","defaultSetCellValue","isCustomCalculateCellValue","visibleColumn","calculateCellValue","defaultCalculateCellValue","isUpdateInCellMode","focusPreviousEditingCell","_updateEditRowCore","_updateLockCount","_endUpdateCore","$focusedElement","getActiveElement","getCellIndex","focusedElement","selectionRange","getSelectionRange","$focusedItem","selectionStart","setSelectionRange","_getFormEditItemTemplate","editCellTemplate","renderFormEditTemplate","detailCellOptions","form","isReadOnly","rowData","editorOptions","getItemID","dataField","template","renderTemplate","_updateCell","getFormEditorTemplate","selector","_validator","$editorElement","validator","validatorOptions","contents","dxValidator","validationRules","validationGroup","dataGetter","getEditFormOptions","detailOptions","userCustomizeItem","editFormItemClass","getColumns","isBand","itemId","formID","customizeItem","label","caption","isRequired","rule","itemVisible","renderFormOnly","editFormOptions","baseEditFormOptions","$buttonsContainer","getColumnTemplate","isRowEditing","isCellEditing","editingStartOptions","icon","$button","attr","iconType","getImageSourceType","getImageContainer","localizationName","getButtonLocalizationNames","format","hint","addNamespace","append","prepareEditButtons","titleButtonTextByClassNames","revert","cancelAllChanges","saveAllChanges","classNameButtonByNames","buttonItems","prepareButtonItem","sortIndex","className","onInitialized","element","_getToolbarButtonClass","hintText","isButtonDisabled","disabled","showText","locateInMenu","highlightDataCell","parameters","cellModified","isCellModified","_allowEditAction","allowEditAction","eventName","startEditAction","needCallback","_default","defaultOptions","editing","selectTextOnEditStart","colCount","popup","controllers","extenders","_editingController","full","repaintRows","editingController","_updateItemsCore","_applyChangeUpdate","_applyChangesOnly","_processItems","_processDataItem","dataItem","_processItem","dataIndex","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","_isCellChanged","oldRow","newRow","cell","cells","views","$cellElements","editFormRowIndex","cellIndex","_getVisibleColumnIndex","$cells","columnIdentifier","visibleIndex","_getCellTemplate","_isNativeClick","_createTable","$table","_createRow","$row","isRowRemoved","isRowInserted","isRowModified","_getColumnIndexByElement","$tableElement","$tableElements","getTableElements","_getColumnIndexByElementCore","_editCellByClick","_rowPointerDown","_this24","_pointerDownTimeout","_rowClick","isEditForm","rowElement","_rowDblClick","_cellPrepared","isEditableCell","toggleClass","css","_editCellPrepared","_formItemPrepared","_isFormItem","isDetailRow","isPopupEditing","_update","children","_getCellOptions","_createCell","_renderCellContent","cellValue","getCellOptions","_renderCore","_getToolbarItems","editButtonItems","excludedOptions","shouldInvalidate","optionName","_invalidate","isVisible","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.editing.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\n\r\nfunction _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n    if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\r\n        _typeof = function(obj) {\r\n            return typeof obj\r\n        }\r\n    } else {\r\n        _typeof = function(obj) {\r\n            return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj\r\n        }\r\n    }\r\n    return _typeof(obj)\r\n}\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _dom_adapter = _interopRequireDefault(require(\"../../core/dom_adapter\"));\r\nvar _window = require(\"../../core/utils/window\");\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _guid = _interopRequireDefault(require(\"../../core/guid\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _click = require(\"../../events/click\");\r\nvar _double_click = require(\"../../events/double_click\");\r\nvar _pointer = _interopRequireDefault(require(\"../../events/pointer\"));\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _array_utils = require(\"../../data/array_utils\");\r\nvar _index = require(\"../../events/utils/index\");\r\nvar _dialog = require(\"../dialog\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _button = _interopRequireDefault(require(\"../button\"));\r\nvar _popup = _interopRequireDefault(require(\"../popup\"));\r\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\r\nvar _form = _interopRequireDefault(require(\"../form\"));\r\nvar _hold = _interopRequireDefault(require(\"../../events/hold\"));\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar iconUtils = _interopRequireWildcard(require(\"../../core/utils/icon\"));\r\nvar _ui = _interopRequireDefault(require(\"../scroll_view/ui.scrollable\"));\r\n\r\nfunction _getRequireWildcardCache() {\r\n    if (\"function\" !== typeof WeakMap) {\r\n        return null\r\n    }\r\n    var cache = new WeakMap;\r\n    _getRequireWildcardCache = function() {\r\n        return cache\r\n    };\r\n    return cache\r\n}\r\n\r\nfunction _interopRequireWildcard(obj) {\r\n    if (obj && obj.__esModule) {\r\n        return obj\r\n    }\r\n    if (null === obj || \"object\" !== _typeof(obj) && \"function\" !== typeof obj) {\r\n        return {\r\n            \"default\": obj\r\n        }\r\n    }\r\n    var cache = _getRequireWildcardCache();\r\n    if (cache && cache.has(obj)) {\r\n        return cache.get(obj)\r\n    }\r\n    var newObj = {};\r\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\r\n    for (var key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\r\n            if (desc && (desc.get || desc.set)) {\r\n                Object.defineProperty(newObj, key, desc)\r\n            } else {\r\n                newObj[key] = obj[key]\r\n            }\r\n        }\r\n    }\r\n    newObj.default = obj;\r\n    if (cache) {\r\n        cache.set(obj, newObj)\r\n    }\r\n    return newObj\r\n}\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction ownKeys(object, enumerableOnly) {\r\n    var keys = Object.keys(object);\r\n    if (Object.getOwnPropertySymbols) {\r\n        var symbols = Object.getOwnPropertySymbols(object);\r\n        if (enumerableOnly) {\r\n            symbols = symbols.filter(function(sym) {\r\n                return Object.getOwnPropertyDescriptor(object, sym).enumerable\r\n            })\r\n        }\r\n        keys.push.apply(keys, symbols)\r\n    }\r\n    return keys\r\n}\r\n\r\nfunction _objectSpread(target) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n        var source = null != arguments[i] ? arguments[i] : {};\r\n        if (i % 2) {\r\n            ownKeys(Object(source), true).forEach(function(key) {\r\n                _defineProperty(target, key, source[key])\r\n            })\r\n        } else {\r\n            if (Object.getOwnPropertyDescriptors) {\r\n                Object.defineProperties(target, Object.getOwnPropertyDescriptors(source))\r\n            } else {\r\n                ownKeys(Object(source)).forEach(function(key) {\r\n                    Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key))\r\n                })\r\n            }\r\n        }\r\n    }\r\n    return target\r\n}\r\n\r\nfunction _defineProperty(obj, key, value) {\r\n    if (key in obj) {\r\n        Object.defineProperty(obj, key, {\r\n            value: value,\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true\r\n        })\r\n    } else {\r\n        obj[key] = value\r\n    }\r\n    return obj\r\n}\r\n\r\nfunction _toConsumableArray(arr) {\r\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread()\r\n}\r\n\r\nfunction _nonIterableSpread() {\r\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")\r\n}\r\n\r\nfunction _unsupportedIterableToArray(o, minLen) {\r\n    if (!o) {\r\n        return\r\n    }\r\n    if (\"string\" === typeof o) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n    var n = Object.prototype.toString.call(o).slice(8, -1);\r\n    if (\"Object\" === n && o.constructor) {\r\n        n = o.constructor.name\r\n    }\r\n    if (\"Map\" === n || \"Set\" === n) {\r\n        return Array.from(o)\r\n    }\r\n    if (\"Arguments\" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) {\r\n        return _arrayLikeToArray(o, minLen)\r\n    }\r\n}\r\n\r\nfunction _iterableToArray(iter) {\r\n    if (\"undefined\" !== typeof Symbol && Symbol.iterator in Object(iter)) {\r\n        return Array.from(iter)\r\n    }\r\n}\r\n\r\nfunction _arrayWithoutHoles(arr) {\r\n    if (Array.isArray(arr)) {\r\n        return _arrayLikeToArray(arr)\r\n    }\r\n}\r\n\r\nfunction _arrayLikeToArray(arr, len) {\r\n    if (null == len || len > arr.length) {\r\n        len = arr.length\r\n    }\r\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\r\n        arr2[i] = arr[i]\r\n    }\r\n    return arr2\r\n}\r\nvar EDIT_FORM_CLASS = \"edit-form\";\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar FOCUS_OVERLAY_CLASS = \"focus-overlay\";\r\nvar READONLY_CLASS = \"readonly\";\r\nvar EDIT_POPUP_CLASS = \"edit-popup\";\r\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\r\nvar ADD_ROW_BUTTON_CLASS = \"addrow-button\";\r\nvar DROPDOWN_EDITOR_OVERLAY_CLASS = \"dx-dropdowneditor-overlay\";\r\nvar LINK_CLASS = \"dx-link\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_SELECTED = \"dx-selection\";\r\nvar EDIT_ROW = \"dx-edit-row\";\r\nvar EDIT_BUTTON_CLASS = \"dx-edit-button\";\r\nvar COMMAND_EDIT_CLASS = \"dx-command-edit\";\r\nvar COMMAND_EDIT_WITH_ICONS_CLASS = COMMAND_EDIT_CLASS + \"-with-icons\";\r\nvar SCROLLABLE_CONTAINER_CLASS = \"dx-scrollable-container\";\r\nvar BUTTON_CLASS = \"dx-button\";\r\nvar INSERT_INDEX = \"__DX_INSERT_INDEX__\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_REMOVED = \"dx-row-removed\";\r\nvar ROW_INSERTED = \"dx-row-inserted\";\r\nvar ROW_MODIFIED = \"dx-row-modified\";\r\nvar CELL_MODIFIED = \"dx-cell-modified\";\r\nvar EDITING_NAMESPACE = \"dxDataGridEditing\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nvar FOCUSABLE_ELEMENT_SELECTOR = \"[tabindex], \" + EDITORS_INPUT_SELECTOR;\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_CELL = \"cell\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar DATA_EDIT_DATA_INSERT_TYPE = \"insert\";\r\nvar DATA_EDIT_DATA_UPDATE_TYPE = \"update\";\r\nvar DATA_EDIT_DATA_REMOVE_TYPE = \"remove\";\r\nvar DEFAULT_START_EDIT_ACTION = \"click\";\r\nvar EDIT_MODES = [EDIT_MODE_BATCH, EDIT_MODE_ROW, EDIT_MODE_CELL, EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar ROW_BASED_MODES = [EDIT_MODE_ROW, EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar CELL_BASED_MODES = [EDIT_MODE_BATCH, EDIT_MODE_CELL];\r\nvar FORM_BASED_MODES = [EDIT_MODE_FORM, EDIT_MODE_POPUP];\r\nvar MODES_WITH_DELAYED_FOCUS = [EDIT_MODE_ROW, EDIT_MODE_FORM];\r\nvar TARGET_COMPONENT_NAME = \"targetComponent\";\r\nvar EDIT_LINK_CLASS = {\r\n    save: \"dx-link-save\",\r\n    cancel: \"dx-link-cancel\",\r\n    edit: \"dx-link-edit\",\r\n    undelete: \"dx-link-undelete\",\r\n    \"delete\": \"dx-link-delete\",\r\n    add: \"dx-link-add\"\r\n};\r\nvar EDIT_ICON_CLASS = {\r\n    save: \"save\",\r\n    cancel: \"revert\",\r\n    edit: \"edit\",\r\n    undelete: \"revert\",\r\n    \"delete\": \"trash\",\r\n    add: \"add\"\r\n};\r\nvar METHOD_NAMES = {\r\n    edit: \"editRow\",\r\n    \"delete\": \"deleteRow\",\r\n    undelete: \"undeleteRow\",\r\n    save: \"saveEditData\",\r\n    cancel: \"cancelEditData\",\r\n    add: \"addRowByRowIndex\"\r\n};\r\nvar ACTION_OPTION_NAMES = {\r\n    add: \"allowAdding\",\r\n    edit: \"allowUpdating\",\r\n    \"delete\": \"allowDeleting\"\r\n};\r\nvar BUTTON_NAMES = [\"edit\", \"save\", \"cancel\", \"delete\", \"undelete\"];\r\nvar EDITING_POPUP_OPTION_NAME = \"editing.popup\";\r\nvar EDITING_CHANGES_OPTION_NAME = \"editing.changes\";\r\nvar EDITING_EDITROWKEY_OPTION_NAME = \"editing.editRowKey\";\r\nvar EDITING_EDITCOLUMNNAME_OPTION_NAME = \"editing.editColumnName\";\r\nvar createFailureHandler = function(deferred) {\r\n    return function(arg) {\r\n        var error = arg instanceof Error ? arg : new Error(arg && String(arg) || \"Unknown error\");\r\n        deferred.reject(error)\r\n    }\r\n};\r\nvar _getEditMode = function(that) {\r\n    var editMode = that.option(\"editing.mode\");\r\n    if (EDIT_MODES.indexOf(editMode) !== -1) {\r\n        return editMode\r\n    }\r\n    return EDIT_MODE_ROW\r\n};\r\nvar _isRowEditMode = function(that) {\r\n    var editMode = _getEditMode(that);\r\n    return ROW_BASED_MODES.indexOf(editMode) !== -1\r\n};\r\nvar isEditingCell = function(isEditRow, cellOptions) {\r\n    return cellOptions.isEditing || isEditRow && cellOptions.column.allowEditing\r\n};\r\nvar isEditingOrShowEditorAlwaysDataCell = function(isEditRow, cellOptions) {\r\n    var isCommandCell = !!cellOptions.column.command;\r\n    var isEditing = isEditingCell(isEditRow, cellOptions);\r\n    var isEditorCell = !isCommandCell && (isEditing || cellOptions.column.showEditorAlways);\r\n    return \"data\" === cellOptions.rowType && isEditorCell\r\n};\r\nvar EditingController = _uiGrid_core.default.ViewController.inherit(function() {\r\n    var getDefaultEditorTemplate = function(that) {\r\n        return function(container, options) {\r\n            var $editor = (0, _renderer.default)(\"<div>\").appendTo(container);\r\n            that.getController(\"editorFactory\").createEditor($editor, (0, _extend.extend)({}, options.column, {\r\n                value: options.value,\r\n                setValue: options.setValue,\r\n                row: options.row,\r\n                parentType: \"dataRow\",\r\n                width: null,\r\n                readOnly: !options.setValue,\r\n                isOnForm: options.isOnForm,\r\n                id: options.id\r\n            }))\r\n        }\r\n    };\r\n    var getEditingTexts = function(options) {\r\n        var editingTexts = options.component.option(\"editing.texts\") || {};\r\n        return {\r\n            save: editingTexts.saveRowChanges,\r\n            cancel: editingTexts.cancelRowChanges,\r\n            edit: editingTexts.editRow,\r\n            undelete: editingTexts.undeleteRow,\r\n            \"delete\": editingTexts.deleteRow,\r\n            add: editingTexts.addRowToNode\r\n        }\r\n    };\r\n    var getButtonIndex = function(buttons, name) {\r\n        var result = -1;\r\n        buttons.some(function(button, index) {\r\n            if (getButtonName(button) === name) {\r\n                result = index;\r\n                return true\r\n            }\r\n        });\r\n        return result\r\n    };\r\n\r\n    function getButtonName(button) {\r\n        return (0, _type.isObject)(button) ? button.name : button\r\n    }\r\n    var getEditorType = function(item) {\r\n        var column = item.column;\r\n        return item.isCustomEditorType ? item.editorType : column.formItem && column.formItem.editorType\r\n    };\r\n    var forEachFormItems = function forEachFormItems(items, callBack) {\r\n        items.forEach(function(item) {\r\n            if (item.items || item.tabs) {\r\n                forEachFormItems(item.items || item.tabs, callBack)\r\n            } else {\r\n                callBack(item)\r\n            }\r\n        })\r\n    };\r\n    return {\r\n        init: function() {\r\n            var that = this;\r\n            that._columnsController = that.getController(\"columns\");\r\n            that._dataController = that.getController(\"data\");\r\n            that._rowsView = that.getView(\"rowsView\");\r\n            that._editForm = null;\r\n            that._updateEditFormDeferred = null;\r\n            that._lastOperation = null;\r\n            if (that._deferreds) {\r\n                that._deferreds.forEach(function(d) {\r\n                    return d.reject(\"cancel\")\r\n                })\r\n            }\r\n            that._deferreds = [];\r\n            if (!that._dataChangedHandler) {\r\n                that._dataChangedHandler = that._handleDataChanged.bind(that);\r\n                that._dataController.changed.add(that._dataChangedHandler)\r\n            }\r\n            if (!that._saveEditorHandler) {\r\n                that.createAction(\"onInitNewRow\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowInserting\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowInserted\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onEditingStart\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowUpdating\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowUpdated\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowRemoving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onRowRemoved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onSaved\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onSaving\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onEditCanceling\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                that.createAction(\"onEditCanceled\", {\r\n                    excludeValidators: [\"disabled\", \"readOnly\"]\r\n                });\r\n                var $pointerDownTarget;\r\n                var isResizing;\r\n                that._pointerUpEditorHandler = function() {\r\n                    var _that$getController;\r\n                    isResizing = null === (_that$getController = that.getController(\"columnsResizer\")) || void 0 === _that$getController ? void 0 : _that$getController.isResizing()\r\n                };\r\n                that._pointerDownEditorHandler = function(e) {\r\n                    return $pointerDownTarget = (0, _renderer.default)(e.target)\r\n                };\r\n                that._saveEditorHandler = that.createAction(function(e) {\r\n                    var event = e.event;\r\n                    var $target = (0, _renderer.default)(event.target);\r\n                    var targetComponent = event[TARGET_COMPONENT_NAME];\r\n                    if ($pointerDownTarget && $pointerDownTarget.is(\"input\") && !$pointerDownTarget.is($target)) {\r\n                        return\r\n                    }\r\n\r\n                    function checkEditorPopup($element) {\r\n                        return $element && !!$element.closest(\".\".concat(DROPDOWN_EDITOR_OVERLAY_CLASS)).length\r\n                    }\r\n                    if (!_isRowEditMode(that) && !that._editCellInProgress) {\r\n                        var isEditorPopup = checkEditorPopup($target) || checkEditorPopup(null === targetComponent || void 0 === targetComponent ? void 0 : targetComponent.$element());\r\n                        var isDomElement = !!$target.closest((0, _window.getWindow)().document).length;\r\n                        var isAnotherComponent = targetComponent && !targetComponent._disposed && targetComponent !== that.component;\r\n                        var isAddRowButton = !!$target.closest(\".\".concat(that.addWidgetPrefix(ADD_ROW_BUTTON_CLASS))).length;\r\n                        var isFocusOverlay = $target.hasClass(that.addWidgetPrefix(FOCUS_OVERLAY_CLASS));\r\n                        var isCellEditMode = _getEditMode(that) === EDIT_MODE_CELL;\r\n                        if (!isResizing && !isEditorPopup && !isFocusOverlay && !(isAddRowButton && isCellEditMode && that.isEditing()) && (isDomElement || isAnotherComponent)) {\r\n                            that._closeEditItem.bind(that)($target)\r\n                        }\r\n                    }\r\n                });\r\n                _events_engine.default.on(_dom_adapter.default.getDocument(), _pointer.default.up, that._pointerUpEditorHandler);\r\n                _events_engine.default.on(_dom_adapter.default.getDocument(), _pointer.default.down, that._pointerDownEditorHandler);\r\n                _events_engine.default.on(_dom_adapter.default.getDocument(), _click.name, that._saveEditorHandler)\r\n            }\r\n            that._updateEditColumn();\r\n            that._updateEditButtons();\r\n            if (!this._internalState) {\r\n                this._internalState = []\r\n            }\r\n            this.component._optionsByReference[EDITING_EDITROWKEY_OPTION_NAME] = true;\r\n            this.component._optionsByReference[EDITING_CHANGES_OPTION_NAME] = true\r\n        },\r\n        getChanges: function() {\r\n            return this.option(EDITING_CHANGES_OPTION_NAME)\r\n        },\r\n        resetChanges: function() {\r\n            var changes = this.getChanges();\r\n            var needReset = null === changes || void 0 === changes ? void 0 : changes.length;\r\n            if (needReset) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, [])\r\n            }\r\n        },\r\n        _getInternalData: function(key) {\r\n            return this._internalState.filter(function(item) {\r\n                return item.key === key\r\n            })[0]\r\n        },\r\n        _addInternalData: function(params) {\r\n            var internalData = this._getInternalData(params.key);\r\n            if (internalData) {\r\n                return (0, _extend.extend)(internalData, params)\r\n            }\r\n            this._internalState.push(params);\r\n            return params\r\n        },\r\n        _getOldData: function(key) {\r\n            var _this$_getInternalDat;\r\n            return null === (_this$_getInternalDat = this._getInternalData(key)) || void 0 === _this$_getInternalDat ? void 0 : _this$_getInternalDat.oldData\r\n        },\r\n        getUpdatedData: function(data) {\r\n            var key = this._dataController.keyOf(data);\r\n            var changes = this.getChanges();\r\n            var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\r\n            if (changes[editIndex]) {\r\n                return (0, _array_utils.createObjectWithChanges)(data, changes[editIndex].data)\r\n            }\r\n            return data\r\n        },\r\n        getInsertedData: function() {\r\n            return this.getChanges().filter(function(change) {\r\n                return change.data && change.type === DATA_EDIT_DATA_INSERT_TYPE\r\n            }).map(function(change) {\r\n                return change.data\r\n            })\r\n        },\r\n        getRemovedData: function() {\r\n            var _this = this;\r\n            return this.getChanges().filter(function(change) {\r\n                return _this._getOldData(change.key) && change.type === DATA_EDIT_DATA_REMOVE_TYPE\r\n            }).map(function(change) {\r\n                return _this._getOldData(change.key)\r\n            })\r\n        },\r\n        _fireDataErrorOccurred: function(arg) {\r\n            if (\"cancel\" === arg) {\r\n                return\r\n            }\r\n            var $popupContent = this.getPopupContent();\r\n            this._dataController.dataErrorOccurred.fire(arg, $popupContent)\r\n        },\r\n        _needToCloseEditableCell: function($targetElement) {\r\n            var $element = this.component.$element();\r\n            var result = this.isEditing();\r\n            var isCurrentComponentElement = !$element || !!$targetElement.closest($element).length;\r\n            if (isCurrentComponentElement) {\r\n                var isDataRow = $targetElement.closest(\".\" + DATA_ROW_CLASS).length;\r\n                if (isDataRow) {\r\n                    var rowsView = this.getView(\"rowsView\");\r\n                    var $targetCell = $targetElement.closest(\".\" + ROW_CLASS + \"> td\");\r\n                    var rowIndex = rowsView.getRowIndex($targetCell.parent());\r\n                    var columnIndex = rowsView.getCellElements(rowIndex).index($targetCell);\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var allowEditing = visibleColumns[columnIndex] && visibleColumns[columnIndex].allowEditing;\r\n                    result = result && !allowEditing && !this.isEditCell(rowIndex, columnIndex)\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        _closeEditItem: function($targetElement) {\r\n            if (this._needToCloseEditableCell($targetElement)) {\r\n                this.closeEditCell()\r\n            }\r\n        },\r\n        _handleDataChanged: function(args) {\r\n            var editForm = this._editForm;\r\n            if (\"refresh\" === args.changeType && _getEditMode(this) === EDIT_MODE_POPUP && editForm && editForm.option(\"visible\")) {\r\n                this._repaintEditPopup()\r\n            }\r\n        },\r\n        _isDefaultButtonVisible: function(button, options) {\r\n            var result = true;\r\n            var isRowMode = _isRowEditMode(this);\r\n            var isBatchMode = _getEditMode(this) === EDIT_MODE_BATCH;\r\n            var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex() && isRowMode;\r\n            switch (button.name) {\r\n                case \"edit\":\r\n                    result = !isEditRow && this.allowUpdating(options) && isRowMode;\r\n                    break;\r\n                case \"save\":\r\n                case \"cancel\":\r\n                    result = isEditRow;\r\n                    break;\r\n                case \"delete\":\r\n                    result = !isEditRow && this.allowDeleting(options) && (!isBatchMode || !options.row.removed);\r\n                    break;\r\n                case \"undelete\":\r\n                    result = isBatchMode && this.allowDeleting(options) && options.row.removed\r\n            }\r\n            return result\r\n        },\r\n        _isButtonVisible: function(button, options) {\r\n            var visible = button.visible;\r\n            if (!(0, _type.isDefined)(visible)) {\r\n                return this._isDefaultButtonVisible(button, options)\r\n            }\r\n            return (0, _type.isFunction)(visible) ? visible.call(button, {\r\n                component: options.component,\r\n                row: options.row,\r\n                column: options.column\r\n            }) : visible\r\n        },\r\n        _getButtonConfig: function(button, options) {\r\n            var _this2 = this;\r\n            var config = (0, _type.isObject)(button) ? button : {};\r\n            var buttonName = getButtonName(button);\r\n            var editingTexts = getEditingTexts(options);\r\n            var methodName = METHOD_NAMES[buttonName];\r\n            var editingOptions = this.option(\"editing\");\r\n            var actionName = ACTION_OPTION_NAMES[buttonName];\r\n            var allowAction = actionName ? editingOptions[actionName] : true;\r\n            return (0, _extend.extend)({\r\n                name: buttonName,\r\n                text: editingTexts[buttonName],\r\n                cssClass: EDIT_LINK_CLASS[buttonName],\r\n                onClick: function(e) {\r\n                    var event = e.event;\r\n                    event.stopPropagation();\r\n                    event.preventDefault();\r\n                    setTimeout(function() {\r\n                        options.row && allowAction && _this2[methodName] && _this2[methodName](options.row.rowIndex)\r\n                    })\r\n                }\r\n            }, config)\r\n        },\r\n        _getEditingButtons: function(options) {\r\n            var _this3 = this;\r\n            var buttonIndex;\r\n            var haveCustomButtons = !!options.column.buttons;\r\n            var buttons = (options.column.buttons || []).slice();\r\n            if (haveCustomButtons) {\r\n                buttonIndex = getButtonIndex(buttons, \"edit\");\r\n                if (buttonIndex >= 0) {\r\n                    if (getButtonIndex(buttons, \"save\") < 0) {\r\n                        buttons.splice(buttonIndex + 1, 0, \"save\")\r\n                    }\r\n                    if (getButtonIndex(buttons, \"cancel\") < 0) {\r\n                        buttons.splice(getButtonIndex(buttons, \"save\") + 1, 0, \"cancel\")\r\n                    }\r\n                }\r\n                buttonIndex = getButtonIndex(buttons, \"delete\");\r\n                if (buttonIndex >= 0 && getButtonIndex(buttons, \"undelete\") < 0) {\r\n                    buttons.splice(buttonIndex + 1, 0, \"undelete\")\r\n                }\r\n            } else {\r\n                buttons = BUTTON_NAMES.slice()\r\n            }\r\n            return buttons.map(function(button) {\r\n                return _this3._getButtonConfig(button, options)\r\n            })\r\n        },\r\n        _renderEditingButtons: function($container, buttons, options) {\r\n            var _this4 = this;\r\n            buttons.forEach(function(button) {\r\n                if (_this4._isButtonVisible(button, options)) {\r\n                    _this4._createButton($container, button, options)\r\n                }\r\n            })\r\n        },\r\n        _getEditCommandCellTemplate: function() {\r\n            var _this5 = this;\r\n            return function(container, options) {\r\n                var $container = (0, _renderer.default)(container);\r\n                if (\"data\" === options.rowType) {\r\n                    var buttons = _this5._getEditingButtons(options);\r\n                    _this5._renderEditingButtons($container, buttons, options);\r\n                    options.watch && options.watch(function() {\r\n                        return buttons.map(function(button) {\r\n                            return _this5._isButtonVisible(button, options)\r\n                        })\r\n                    }, function() {\r\n                        $container.empty();\r\n                        _this5._renderEditingButtons($container, buttons, options)\r\n                    })\r\n                } else {\r\n                    _uiGrid_core2.default.setEmptyText($container)\r\n                }\r\n            }\r\n        },\r\n        isRowEditMode: function() {\r\n            return _isRowEditMode(this)\r\n        },\r\n        isFormEditMode: function() {\r\n            var editMode = _getEditMode(this);\r\n            return FORM_BASED_MODES.indexOf(editMode) !== -1\r\n        },\r\n        isCellOrBatchEditMode: function() {\r\n            var editMode = this.getEditMode();\r\n            return CELL_BASED_MODES.indexOf(editMode) !== -1\r\n        },\r\n        getEditMode: function() {\r\n            return _getEditMode(this)\r\n        },\r\n        getFirstEditableColumnIndex: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var firstFormItem = this._firstFormItem;\r\n            var columnIndex;\r\n            if (_getEditMode(this) === EDIT_MODE_FORM && firstFormItem) {\r\n                var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\r\n                var $editFormElements = this._rowsView.getCellElements(editRowIndex);\r\n                columnIndex = this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)\r\n            } else {\r\n                var visibleColumns = columnsController.getVisibleColumns();\r\n                (0, _iterator.each)(visibleColumns, function(index, column) {\r\n                    if (column.allowEditing) {\r\n                        columnIndex = index;\r\n                        return false\r\n                    }\r\n                })\r\n            }\r\n            return columnIndex\r\n        },\r\n        getFirstEditableCellInRow: function(rowIndex) {\r\n            var rowsView = this.getView(\"rowsView\");\r\n            return rowsView && rowsView._getCellElement(rowIndex ? rowIndex : 0, this.getFirstEditableColumnIndex())\r\n        },\r\n        getFocusedCellInRow: function(rowIndex) {\r\n            return this.getFirstEditableCellInRow(rowIndex)\r\n        },\r\n        getIndexByKey: function(key, items) {\r\n            return _uiGrid_core2.default.getIndexByKey(key, items)\r\n        },\r\n        hasChanges: function(rowIndex) {\r\n            var changes = this.getChanges();\r\n            var result = false;\r\n            for (var i = 0; i < (null === changes || void 0 === changes ? void 0 : changes.length); i++) {\r\n                if (changes[i].type && (!(0, _type.isDefined)(rowIndex) || this._dataController.getRowIndexByKey(changes[i].key) === rowIndex)) {\r\n                    result = true;\r\n                    break\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        dispose: function() {\r\n            this.callBase();\r\n            clearTimeout(this._inputFocusTimeoutID);\r\n            _events_engine.default.off(_dom_adapter.default.getDocument(), _pointer.default.up, this._pointerUpEditorHandler);\r\n            _events_engine.default.off(_dom_adapter.default.getDocument(), _pointer.default.down, this._pointerDownEditorHandler);\r\n            _events_engine.default.off(_dom_adapter.default.getDocument(), _click.name, this._saveEditorHandler)\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"editing\" === args.name) {\r\n                var fullName = args.fullName;\r\n                var editPopup = this._editPopup;\r\n                if (fullName && 0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\r\n                    if (editPopup) {\r\n                        var popupOptionName = fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\r\n                        if (popupOptionName) {\r\n                            editPopup.option(popupOptionName, args.value)\r\n                        } else {\r\n                            editPopup.option(args.value)\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (editPopup && editPopup.option(\"visible\") && 0 === fullName.indexOf(\"editing.form\")) {\r\n                        this._repaintEditPopup()\r\n                    } else {\r\n                        if (fullName === EDITING_EDITROWKEY_OPTION_NAME) {\r\n                            this._handleEditRowKeyChange(args)\r\n                        } else {\r\n                            if (fullName === EDITING_EDITCOLUMNNAME_OPTION_NAME) {\r\n                                this._handleEditColumnNameChange(args)\r\n                            } else {\r\n                                if (fullName === EDITING_CHANGES_OPTION_NAME) {\r\n                                    this._handleChangesChange(args)\r\n                                } else {\r\n                                    this.init();\r\n                                    this.resetChanges();\r\n                                    this._resetEditColumnName();\r\n                                    this._resetEditRowKey()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        },\r\n        _handleEditRowKeyChange: function(args) {\r\n            var rowIndex = this._dataController.getRowIndexByKey(args.value);\r\n            var oldRowIndexCorrection = this._getEditRowIndexCorrection();\r\n            var oldRowIndex = this._dataController.getRowIndexByKey(args.previousValue) + oldRowIndexCorrection;\r\n            var columnIndex = this._getVisibleEditColumnIndex();\r\n            if (!this.isCellOrBatchEditMode()) {\r\n                if ((0, _type.isDefined)(args.value)) {\r\n                    if (args.value !== args.previousValue) {\r\n                        this._editRowFromOptionChanged(rowIndex, oldRowIndex)\r\n                    }\r\n                } else {\r\n                    this.cancelEditData()\r\n                }\r\n            } else {\r\n                if ((0, _type.isDefined)(args.value) && args.value !== args.previousValue) {\r\n                    this._editCellFromOptionChanged(columnIndex, columnIndex, oldRowIndex)\r\n                }\r\n            }\r\n        },\r\n        _handleEditColumnNameChange: function(args) {\r\n            var oldRowIndex = this._getVisibleEditRowIndex(args.previousValue);\r\n            if (this.isCellOrBatchEditMode() && oldRowIndex !== -1 && (0, _type.isDefined)(args.value) && args.value !== args.previousValue) {\r\n                var columnIndex = this._columnsController.getVisibleColumnIndex(args.value);\r\n                var oldColumnIndex = this._columnsController.getVisibleColumnIndex(args.previousValue);\r\n                this._editCellFromOptionChanged(columnIndex, oldColumnIndex, oldRowIndex)\r\n            }\r\n        },\r\n        _handleChangesChange: function(args) {\r\n            var dataController = this._dataController;\r\n            if (!args.value.length && !args.previousValue.length) {\r\n                return\r\n            }\r\n            dataController.updateItems({\r\n                repaintChangesOnly: true\r\n            })\r\n        },\r\n        _editCellFromOptionChanged: function(columnIndex, oldColumnIndex, oldRowIndex) {\r\n            var _this6 = this;\r\n            var columns = this._columnsController.getVisibleColumns();\r\n            if (columnIndex > -1) {\r\n                (0, _common.deferRender)(function() {\r\n                    _this6._repaintEditCell(columns[columnIndex], columns[oldColumnIndex], oldRowIndex)\r\n                })\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"addRow\", \"deleteRow\", \"undeleteRow\", \"editRow\", \"editCell\", \"closeEditCell\", \"saveEditData\", \"cancelEditData\", \"hasEditData\"]\r\n        },\r\n        refresh: function(isPageChanged) {\r\n            var editMode = _getEditMode(this);\r\n            var needResetIndexes = editMode === EDIT_MODE_BATCH || isPageChanged && \"virtual\" !== this.option(\"scrolling.mode\");\r\n            if (!(0, _type.isDefined)(this._pageIndex)) {\r\n                return\r\n            }\r\n            if (!this.isCellOrBatchEditMode()) {\r\n                this.resetChanges();\r\n                this.init();\r\n                if ((0, _type.isDefined)(this.option(EDITING_EDITROWKEY_OPTION_NAME))) {\r\n                    this._resetEditRowKey()\r\n                }\r\n            } else {\r\n                if (needResetIndexes) {\r\n                    this._resetEditColumnName();\r\n                    this._resetEditRowKey()\r\n                }\r\n            }\r\n        },\r\n        isEditing: function() {\r\n            var isEditRowKeyDefined = (0, _type.isDefined)(this.option(EDITING_EDITROWKEY_OPTION_NAME));\r\n            var isEditColumnNameDefined = (0, _type.isDefined)(this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME));\r\n            if (this.isCellOrBatchEditMode()) {\r\n                return isEditRowKeyDefined && isEditColumnNameDefined\r\n            }\r\n            return isEditRowKeyDefined\r\n        },\r\n        isEditRow: function(rowIndex) {\r\n            var editMode = _getEditMode(this);\r\n            return this._getVisibleEditRowIndex() === rowIndex && ROW_BASED_MODES.indexOf(editMode) !== -1\r\n        },\r\n        _setEditRowKey: function(value, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            } else {\r\n                this.option(EDITING_EDITROWKEY_OPTION_NAME, value)\r\n            }\r\n        },\r\n        _setEditRowKeyByIndex: function(rowIndex, silent) {\r\n            var key = this._dataController.getKeyByRowIndex(rowIndex);\r\n            if (void 0 === key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            this._setEditRowKey(key, silent)\r\n        },\r\n        getEditRowIndex: function() {\r\n            return this._getVisibleEditRowIndex()\r\n        },\r\n        getEditFormRowIndex: function() {\r\n            var editMode = _getEditMode(this);\r\n            return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP ? this._getVisibleEditRowIndex() : -1\r\n        },\r\n        isEditCell: function(visibleRowIndex, columnIndex) {\r\n            return this._getVisibleEditRowIndex() === visibleRowIndex && this._getVisibleEditColumnIndex() === columnIndex\r\n        },\r\n        getPopupContent: function() {\r\n            var editMode = _getEditMode(this);\r\n            var popupVisible = this._editPopup && this._editPopup.option(\"visible\");\r\n            if (editMode === EDIT_MODE_POPUP && popupVisible) {\r\n                return this._$popupContent\r\n            }\r\n        },\r\n        getEditForm: function() {\r\n            return this._editForm\r\n        },\r\n        _needInsertItem: function(change, changeType) {\r\n            var that = this;\r\n            var dataSource = that._dataController.dataSource();\r\n            var scrollingMode = that.option(\"scrolling.mode\");\r\n            var pageIndex = dataSource.pageIndex();\r\n            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : pageIndex;\r\n            var endPageIndex = dataSource.endPageIndex ? dataSource.endPageIndex() : pageIndex;\r\n            if (\"standard\" !== scrollingMode) {\r\n                switch (changeType) {\r\n                    case \"append\":\r\n                        return change.key.pageIndex === endPageIndex;\r\n                    case \"prepend\":\r\n                        return change.key.pageIndex === beginPageIndex;\r\n                    case \"refresh\":\r\n                        change.key.rowIndex = 0;\r\n                        change.key.dataRowIndex = 0;\r\n                        change.key.pageIndex = 0;\r\n                        break;\r\n                    default:\r\n                        return change.key.pageIndex >= beginPageIndex && change.key.pageIndex <= endPageIndex\r\n                }\r\n            }\r\n            return change.key.pageIndex === pageIndex\r\n        },\r\n        _generateNewItem: function(key) {\r\n            var item = {\r\n                key: key\r\n            };\r\n            if (key && key[INSERT_INDEX]) {\r\n                item[INSERT_INDEX] = key[INSERT_INDEX]\r\n            }\r\n            return item\r\n        },\r\n        _getLoadedRowIndexByInsertKey: function(items, change, key) {\r\n            var dataController = this._dataController;\r\n            var loadedRowIndexOffset = dataController.getRowIndexOffset(true);\r\n            var loadedRowIndex = key.dataRowIndex - loadedRowIndexOffset;\r\n            if (\"append\" === change.changeType) {\r\n                loadedRowIndex -= dataController.items(true).length;\r\n                if (change.removeCount) {\r\n                    loadedRowIndex += change.removeCount\r\n                }\r\n            }\r\n            for (var i = 0; i < loadedRowIndex; i++) {\r\n                if (items[i] && items[i][INSERT_INDEX]) {\r\n                    loadedRowIndex++\r\n                }\r\n            }\r\n            return loadedRowIndex\r\n        },\r\n        processItems: function(items, e) {\r\n            var _this7 = this;\r\n            var changeType = e.changeType;\r\n            this.update(changeType);\r\n            var changes = this.getChanges();\r\n            changes.forEach(function(change) {\r\n                var key = change.key;\r\n                if ((0, _type.isDefined)(key) && change.type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    var loadedRowIndex = _this7._getLoadedRowIndexByInsertKey(items, e, key);\r\n                    var item = _this7._generateNewItem(key);\r\n                    if (loadedRowIndex >= 0 && _this7._needInsertItem(change, changeType, items, item)) {\r\n                        items.splice(key.dataRowIndex ? loadedRowIndex : 0, 0, item)\r\n                    }\r\n                }\r\n            });\r\n            return items\r\n        },\r\n        processDataItem: function(item, options, generateDataValues) {\r\n            var columns = options.visibleColumns;\r\n            var key = item.data[INSERT_INDEX] ? item.data.key : item.key;\r\n            var changes = this.getChanges();\r\n            var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\r\n            item.isEditing = false;\r\n            if (editIndex >= 0) {\r\n                var editMode = _getEditMode(this);\r\n                var _changes$editIndex = changes[editIndex],\r\n                    data = _changes$editIndex.data,\r\n                    type = _changes$editIndex.type;\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        if (editMode === EDIT_MODE_POPUP) {\r\n                            item.visible = false\r\n                        }\r\n                        item.isNewRow = true;\r\n                        item.key = key;\r\n                        item.data = data;\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        item.modified = true;\r\n                        item.oldData = item.data;\r\n                        item.data = (0, _array_utils.createObjectWithChanges)(item.data, data);\r\n                        item.modifiedValues = generateDataValues(data, columns, true);\r\n                        break;\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        if (editMode === EDIT_MODE_BATCH) {\r\n                            item.data = (0, _array_utils.createObjectWithChanges)(item.data, data)\r\n                        }\r\n                        item.removed = true\r\n                }\r\n            }\r\n        },\r\n        _initNewRow: function(options) {\r\n            var _this8 = this;\r\n            this.executeAction(\"onInitNewRow\", options);\r\n            if (options.promise) {\r\n                var deferred = new _deferred.Deferred;\r\n                (0, _deferred.when)((0, _deferred.fromPromise)(options.promise)).done(deferred.resolve).fail(createFailureHandler(deferred)).fail(function(arg) {\r\n                    return _this8._fireDataErrorOccurred(arg)\r\n                });\r\n                return deferred\r\n            }\r\n        },\r\n        _getInsertKey: function(parentKey) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var rows = dataController.items();\r\n            var editMode = _getEditMode(that);\r\n            var insertKey = {\r\n                parentKey: parentKey,\r\n                pageIndex: dataController.pageIndex(),\r\n                rowIndex: that._getInsertRowIndex(parentKey)\r\n            };\r\n            var row = rows[insertKey.rowIndex];\r\n            if (row && (!row.isEditing && \"detail\" === row.rowType || \"detailAdaptive\" === row.rowType)) {\r\n                insertKey.rowIndex++\r\n            }\r\n            insertKey.dataRowIndex = dataController.getRowIndexOffset() + rows.filter(function(row, index) {\r\n                return index < insertKey.rowIndex && (\"data\" === row.rowType && !row.isNewRow || \"group\" === row.rowType)\r\n            }).length;\r\n            if (editMode !== EDIT_MODE_BATCH) {\r\n                this._setEditRowKey(insertKey, true)\r\n            }\r\n            insertKey[INSERT_INDEX] = that._getInsertIndex();\r\n            return insertKey\r\n        },\r\n        _getInsertRowIndex: function(parentKey) {\r\n            var that = this;\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var parentRowIndex = that._dataController.getRowIndexByKey(parentKey);\r\n            if (parentRowIndex >= 0) {\r\n                return parentRowIndex + 1\r\n            }\r\n            if (rowsView) {\r\n                return rowsView.getTopVisibleItemIndex(true)\r\n            }\r\n            return 0\r\n        },\r\n        _getInsertIndex: function() {\r\n            var maxInsertIndex = 0;\r\n            this.getChanges().forEach(function(editItem) {\r\n                if (editItem.type === DATA_EDIT_DATA_INSERT_TYPE && editItem.key[INSERT_INDEX] > maxInsertIndex) {\r\n                    maxInsertIndex = editItem.key[INSERT_INDEX]\r\n                }\r\n            });\r\n            return maxInsertIndex + 1\r\n        },\r\n        addRow: function(parentKey) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var store = dataController.store();\r\n            var key = store && store.key();\r\n            var param = {\r\n                data: {}\r\n            };\r\n            var editMode = _getEditMode(that);\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var deferred = new _deferred.Deferred;\r\n            if (!store) {\r\n                dataController.fireError(\"E1052\", this.component.NAME);\r\n                return deferred.reject()\r\n            }\r\n            if (editMode === EDIT_MODE_CELL && that.hasChanges()) {\r\n                that.saveEditData().done(function() {\r\n                    if (!that.hasChanges()) {\r\n                        that.addRow(parentKey).done(deferred.resolve).fail(deferred.reject)\r\n                    } else {\r\n                        deferred.reject(\"cancel\")\r\n                    }\r\n                });\r\n                return deferred.promise()\r\n            }\r\n            that.refresh();\r\n            if (!that._allowRowAdding()) {\r\n                return deferred.reject(\"cancel\")\r\n            }\r\n            if (!key) {\r\n                param.data.__KEY__ = String(new _guid.default)\r\n            }(0, _deferred.when)(that._initNewRow(param, parentKey)).done(function() {\r\n                if (that._allowRowAdding()) {\r\n                    that._addRowCore(param.data, parentKey, oldEditRowIndex);\r\n                    deferred.resolve()\r\n                } else {\r\n                    deferred.reject(\"cancel\")\r\n                }\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _allowRowAdding: function() {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var insertIndex = that._getInsertIndex();\r\n            if (editMode !== EDIT_MODE_BATCH && insertIndex > 1) {\r\n                return false\r\n            }\r\n            return true\r\n        },\r\n        _addRowCore: function(data, parentKey, initialOldEditRowIndex) {\r\n            var that = this;\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var insertKey = that._getInsertKey(parentKey);\r\n            var editMode = _getEditMode(that);\r\n            that._addChange({\r\n                key: insertKey,\r\n                data: data,\r\n                type: DATA_EDIT_DATA_INSERT_TYPE\r\n            });\r\n            that._dataController.updateItems({\r\n                changeType: \"update\",\r\n                rowIndices: [initialOldEditRowIndex, oldEditRowIndex, insertKey.rowIndex]\r\n            });\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                that._showEditPopup(insertKey.rowIndex)\r\n            } else {\r\n                that._focusFirstEditableCellInRow(insertKey.rowIndex)\r\n            }\r\n            that._afterInsertRow({\r\n                key: insertKey,\r\n                data: data\r\n            })\r\n        },\r\n        _focusFirstEditableCellInRow: function(rowIndex) {\r\n            var that = this;\r\n            var $firstCell = that.getFirstEditableCellInRow(rowIndex);\r\n            that._editCellInProgress = true;\r\n            that._delayedInputFocus($firstCell, function() {\r\n                that._editCellInProgress = false;\r\n                var $cell = that.getFirstEditableCellInRow(rowIndex);\r\n                var eventToTrigger = \"dblClick\" === that.option(\"editing.startEditAction\") ? _double_click.name : _click.name;\r\n                $cell && _events_engine.default.trigger($cell, eventToTrigger)\r\n            })\r\n        },\r\n        _isEditingStart: function(options) {\r\n            this.executeAction(\"onEditingStart\", options);\r\n            return options.cancel\r\n        },\r\n        _beforeEditCell: function(rowIndex, columnIndex, item) {\r\n            var that = this;\r\n            if (_getEditMode(that) === EDIT_MODE_CELL && !item.isNewRow && that.hasChanges()) {\r\n                var d = new _deferred.Deferred;\r\n                that.saveEditData().always(function() {\r\n                    d.resolve(that.hasChanges())\r\n                });\r\n                return d\r\n            }\r\n        },\r\n        _beforeUpdateItems: function() {},\r\n        _getVisibleEditColumnIndex: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            if (!(0, _type.isDefined)(editColumnName)) {\r\n                return -1\r\n            }\r\n            return this._columnsController.getVisibleColumnIndex(editColumnName)\r\n        },\r\n        _setEditColumnNameByIndex: function(index, silent) {\r\n            var _visibleColumns$index;\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            this._setEditColumnName(null === (_visibleColumns$index = visibleColumns[index]) || void 0 === _visibleColumns$index ? void 0 : _visibleColumns$index.name, silent)\r\n        },\r\n        _setEditColumnName: function(name, silent) {\r\n            if (silent) {\r\n                this._silentOption(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            } else {\r\n                this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME, name)\r\n            }\r\n        },\r\n        _resetEditColumnName: function() {\r\n            this._setEditColumnName(null, true)\r\n        },\r\n        _getEditColumn: function() {\r\n            var editColumnName = this.option(EDITING_EDITCOLUMNNAME_OPTION_NAME);\r\n            return this._getColumnByName(editColumnName)\r\n        },\r\n        _getColumnByName: function(name) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            var editColumn;\r\n            (0, _type.isDefined)(name) && visibleColumns.some(function(column) {\r\n                if (column.name === name) {\r\n                    editColumn = column;\r\n                    return true\r\n                }\r\n            });\r\n            return editColumn\r\n        },\r\n        _getVisibleEditRowIndex: function(columnName) {\r\n            var dataController = this._dataController;\r\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n            var rowIndex = dataController.getRowIndexByKey(editRowKey);\r\n            if (rowIndex === -1) {\r\n                return rowIndex\r\n            }\r\n            return rowIndex + this._getEditRowIndexCorrection(columnName)\r\n        },\r\n        _getEditRowIndexCorrection: function(columnName) {\r\n            var editColumn = columnName ? this._getColumnByName(columnName) : this._getEditColumn();\r\n            var isColumnHidden = \"adaptiveHidden\" === (null === editColumn || void 0 === editColumn ? void 0 : editColumn.visibleWidth);\r\n            return isColumnHidden ? 1 : 0\r\n        },\r\n        _resetEditRowKey: function() {\r\n            this._setEditRowKey(null, true)\r\n        },\r\n        _resetEditIndices: function() {\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey()\r\n        },\r\n        editRow: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var items = dataController.items();\r\n            var item = items[rowIndex];\r\n            var params = {\r\n                data: item && item.data,\r\n                cancel: false\r\n            };\r\n            var oldRowIndex = this._getVisibleEditRowIndex();\r\n            if (!item) {\r\n                return\r\n            }\r\n            if (rowIndex === oldRowIndex) {\r\n                return true\r\n            }\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return\r\n            }\r\n            this.resetChanges();\r\n            this.init();\r\n            this._resetEditColumnName();\r\n            this._pageIndex = dataController.pageIndex();\r\n            this._addInternalData({\r\n                key: item.key,\r\n                oldData: item.data\r\n            });\r\n            this._setEditRowKey(item.key)\r\n        },\r\n        _editRowFromOptionChanged: function(rowIndex, oldRowIndex) {\r\n            var rowIndices = [oldRowIndex, rowIndex];\r\n            var editMode = _getEditMode(this);\r\n            this._beforeUpdateItems(rowIndices, rowIndex, oldRowIndex);\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                this._showEditPopup(rowIndex)\r\n            } else {\r\n                this._needFocusEditor = true;\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: rowIndices\r\n                })\r\n            }\r\n        },\r\n        _focusEditorIfNeed: function() {\r\n            var _this9 = this;\r\n            var editMode = _getEditMode(this);\r\n            if (this._needFocusEditor) {\r\n                if (MODES_WITH_DELAYED_FOCUS.indexOf(editMode) !== -1) {\r\n                    var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\r\n                    this._delayedInputFocus($editingCell, function() {\r\n                        $editingCell && _this9.component.focus($editingCell)\r\n                    })\r\n                } else {\r\n                    if (CELL_BASED_MODES.indexOf(editMode) !== -1) {\r\n                        var _this$_rowsView;\r\n                        var editColumnIndex = this._getVisibleEditColumnIndex();\r\n                        var $cell = null === (_this$_rowsView = this._rowsView) || void 0 === _this$_rowsView ? void 0 : _this$_rowsView._getCellElement(this._getVisibleEditRowIndex(), editColumnIndex);\r\n                        if ($cell && !$cell.find(\":focus\").length) {\r\n                            this._focusEditingCell(function() {\r\n                                _this9._editCellInProgress = false\r\n                            }, $cell, true)\r\n                        } else {\r\n                            this._editCellInProgress = false\r\n                        }\r\n                    }\r\n                }\r\n                this._needFocusEditor = false\r\n            }\r\n        },\r\n        _showEditPopup: function(rowIndex, repaintForm) {\r\n            var that = this;\r\n            var isMobileDevice = \"desktop\" !== _devices.default.current().deviceType;\r\n            var popupOptions = (0, _extend.extend)({\r\n                showTitle: false,\r\n                fullScreen: isMobileDevice,\r\n                toolbarItems: [{\r\n                    toolbar: \"bottom\",\r\n                    location: \"after\",\r\n                    widget: \"dxButton\",\r\n                    options: that._getSaveButtonConfig()\r\n                }, {\r\n                    toolbar: \"bottom\",\r\n                    location: \"after\",\r\n                    widget: \"dxButton\",\r\n                    options: that._getCancelButtonConfig()\r\n                }],\r\n                contentTemplate: that._getPopupEditFormTemplate(rowIndex)\r\n            }, that.option(EDITING_POPUP_OPTION_NAME));\r\n            if (!that._editPopup) {\r\n                var $popupContainer = (0, _renderer.default)(\"<div>\").appendTo(that.component.$element()).addClass(that.addWidgetPrefix(EDIT_POPUP_CLASS));\r\n                that._editPopup = that._createComponent($popupContainer, _popup.default, {});\r\n                that._editPopup.on(\"hiding\", that._getEditPopupHiddenHandler());\r\n                that._editPopup.on(\"shown\", function(e) {\r\n                    _events_engine.default.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\" + SCROLLABLE_CONTAINER_CLASS).first(), \"focus\");\r\n                    if (repaintForm) {\r\n                        that._editForm && that._editForm.repaint()\r\n                    }\r\n                })\r\n            }\r\n            that._editPopup.option(popupOptions);\r\n            that._editPopup.show()\r\n        },\r\n        _repaintEditPopup: function() {\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            if (this._editPopup && this._editPopup.option(\"visible\") && rowIndex >= 0) {\r\n                var defaultAnimation = this._editPopup.option(\"animation\");\r\n                this._editPopup.option(\"animation\", null);\r\n                this._showEditPopup(rowIndex, true);\r\n                this._editPopup.option(\"animation\", defaultAnimation)\r\n            }\r\n        },\r\n        _getEditPopupHiddenHandler: function() {\r\n            var that = this;\r\n            return function(e) {\r\n                if (that.isEditing()) {\r\n                    that.cancelEditData()\r\n                }\r\n            }\r\n        },\r\n        _getPopupEditFormTemplate: function(rowIndex) {\r\n            var that = this;\r\n            var row = that.component.getVisibleRows()[rowIndex];\r\n            var templateOptions = {\r\n                row: row,\r\n                rowType: row.rowType,\r\n                key: row.key\r\n            };\r\n            return function(container) {\r\n                var formTemplate = that.getEditFormTemplate();\r\n                var scrollable = that._createComponent((0, _renderer.default)(\"<div>\").appendTo(container), _ui.default);\r\n                that._$popupContent = scrollable.$content();\r\n                formTemplate(that._$popupContent, templateOptions, true)\r\n            }\r\n        },\r\n        _getSaveButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.saveRowChanges\"),\r\n                onClick: this.saveEditData.bind(this)\r\n            }\r\n        },\r\n        _getCancelButtonConfig: function() {\r\n            return {\r\n                text: this.option(\"editing.texts.cancelRowChanges\"),\r\n                onClick: this.cancelEditData.bind(this)\r\n            }\r\n        },\r\n        _removeInternalData: function(key) {\r\n            var internalData = this._getInternalData(key);\r\n            var index = this._internalState.indexOf(internalData);\r\n            if (index > -1) {\r\n                this._internalState.splice(index, 1)\r\n            }\r\n        },\r\n        _removeChange: function(index) {\r\n            if (index >= 0) {\r\n                var changes = _toConsumableArray(this.getChanges());\r\n                var key = changes[index].key;\r\n                this._removeInternalData(key);\r\n                changes.splice(index, 1);\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n                if ((0, _common.equalByValue)(this.option(EDITING_EDITROWKEY_OPTION_NAME), key)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n        },\r\n        executeOperation: function(deferred, func) {\r\n            var _this10 = this;\r\n            this._lastOperation && this._lastOperation.reject();\r\n            this._lastOperation = deferred;\r\n            this.waitForDeferredOperations().done(function() {\r\n                if (\"rejected\" === deferred.state()) {\r\n                    return\r\n                }\r\n                func();\r\n                _this10._lastOperation = null\r\n            }).fail(function() {\r\n                deferred.reject();\r\n                _this10._lastOperation = null\r\n            })\r\n        },\r\n        waitForDeferredOperations: function() {\r\n            return _deferred.when.apply(void 0, _toConsumableArray(this._deferreds))\r\n        },\r\n        editCell: function(rowIndex, columnIndex) {\r\n            return this._editCell({\r\n                rowIndex: rowIndex,\r\n                columnIndex: columnIndex\r\n            })\r\n        },\r\n        _editCell: function(options) {\r\n            var _this11 = this;\r\n            var d = new _deferred.Deferred;\r\n            var coreResult;\r\n            this.executeOperation(d, function() {\r\n                coreResult = _this11._editCellCore(options);\r\n                (0, _deferred.when)(coreResult).done(d.resolve).fail(d.reject)\r\n            });\r\n            return void 0 !== coreResult ? coreResult : d.promise()\r\n        },\r\n        _getNormalizedEditCellOptions: function(_ref) {\r\n            var oldColumnIndex = _ref.oldColumnIndex,\r\n                oldRowIndex = _ref.oldRowIndex,\r\n                columnIndex = _ref.columnIndex,\r\n                rowIndex = _ref.rowIndex;\r\n            var columnsController = this._columnsController;\r\n            var visibleColumns = columnsController.getVisibleColumns();\r\n            var items = this._dataController.items();\r\n            var item = items[rowIndex];\r\n            var oldColumn;\r\n            if ((0, _type.isDefined)(oldColumnIndex)) {\r\n                oldColumn = visibleColumns[oldColumnIndex]\r\n            } else {\r\n                oldColumn = this._getEditColumn()\r\n            }\r\n            if (!(0, _type.isDefined)(oldRowIndex)) {\r\n                oldRowIndex = this._getVisibleEditRowIndex()\r\n            }\r\n            if ((0, _type.isString)(columnIndex)) {\r\n                columnIndex = columnsController.columnOption(columnIndex, \"index\");\r\n                columnIndex = columnsController.getVisibleIndex(columnIndex)\r\n            }\r\n            var column = visibleColumns[columnIndex];\r\n            return {\r\n                oldColumn: oldColumn,\r\n                columnIndex: columnIndex,\r\n                oldRowIndex: oldRowIndex,\r\n                rowIndex: rowIndex,\r\n                column: column,\r\n                item: item\r\n            }\r\n        },\r\n        _editCellCore: function(options) {\r\n            var _this12 = this;\r\n            var dataController = this._dataController;\r\n            var isEditByOptionChanged = (0, _type.isDefined)(options.oldColumnIndex) || (0, _type.isDefined)(options.oldRowIndex);\r\n            var _this$_getNormalizedE = this._getNormalizedEditCellOptions(options),\r\n                columnIndex = _this$_getNormalizedE.columnIndex,\r\n                rowIndex = _this$_getNormalizedE.rowIndex,\r\n                column = _this$_getNormalizedE.column,\r\n                item = _this$_getNormalizedE.item;\r\n            var params = {\r\n                data: null === item || void 0 === item ? void 0 : item.data,\r\n                cancel: false,\r\n                column: column\r\n            };\r\n            if (void 0 === item.key) {\r\n                this._dataController.fireError(\"E1043\");\r\n                return\r\n            }\r\n            if (column && item && (\"data\" === item.rowType || \"detailAdaptive\" === item.rowType) && !item.removed && !_isRowEditMode(this)) {\r\n                if (!isEditByOptionChanged && this.isEditCell(rowIndex, columnIndex)) {\r\n                    return true\r\n                }\r\n                var editRowIndex = rowIndex + dataController.getRowIndexOffset();\r\n                return (0, _deferred.when)(this._beforeEditCell(rowIndex, columnIndex, item)).done(function(cancel) {\r\n                    if (cancel) {\r\n                        return\r\n                    }\r\n                    if (!_this12._prepareEditCell(params, item, columnIndex, editRowIndex)) {\r\n                        _this12._processCanceledEditingCell()\r\n                    }\r\n                })\r\n            }\r\n            return false\r\n        },\r\n        _processCanceledEditingCell: function() {},\r\n        _prepareEditCell: function(params, item, editColumnIndex, editRowIndex) {\r\n            if (!item.isNewRow) {\r\n                params.key = item.key\r\n            }\r\n            if (this._isEditingStart(params)) {\r\n                return false\r\n            }\r\n            this._pageIndex = this._dataController.pageIndex();\r\n            this._setEditRowKey(item.key);\r\n            this._setEditColumnNameByIndex(editColumnIndex);\r\n            if (!params.column.showEditorAlways) {\r\n                this._addInternalData({\r\n                    key: item.key,\r\n                    oldData: item.data\r\n                })\r\n            }\r\n            return true\r\n        },\r\n        _repaintEditCell: function(column, oldColumn, oldEditRowIndex) {\r\n            this._needFocusEditor = true;\r\n            if (!column || !column.showEditorAlways || oldColumn && !oldColumn.showEditorAlways) {\r\n                this._editCellInProgress = true;\r\n                this.getController(\"editorFactory\").loseFocus();\r\n                this._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, this._getVisibleEditRowIndex()]\r\n                })\r\n            } else {\r\n                if (column !== oldColumn) {\r\n                    this._dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: []\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _delayedInputFocus: function($cell, beforeFocusCallback, callBeforeFocusCallbackAlways) {\r\n            var that = this;\r\n\r\n            function inputFocus() {\r\n                if (beforeFocusCallback) {\r\n                    beforeFocusCallback()\r\n                }\r\n                if ($cell) {\r\n                    var $focusableElement = $cell.find(FOCUSABLE_ELEMENT_SELECTOR).first();\r\n                    _uiGrid_core2.default.focusAndSelectElement(that, $focusableElement)\r\n                }\r\n                that._beforeFocusCallback = null\r\n            }\r\n            if (_devices.default.real().ios || _devices.default.real().android) {\r\n                inputFocus()\r\n            } else {\r\n                if (that._beforeFocusCallback) {\r\n                    that._beforeFocusCallback()\r\n                }\r\n                clearTimeout(that._inputFocusTimeoutID);\r\n                if (callBeforeFocusCallbackAlways) {\r\n                    that._beforeFocusCallback = beforeFocusCallback\r\n                }\r\n                that._inputFocusTimeoutID = setTimeout(inputFocus)\r\n            }\r\n        },\r\n        _focusEditingCell: function(beforeFocusCallback, $editCell, callBeforeFocusCallbackAlways) {\r\n            var that = this;\r\n            var rowsView = that.getView(\"rowsView\");\r\n            var editColumnIndex = this._getVisibleEditColumnIndex();\r\n            $editCell = $editCell || rowsView && rowsView._getCellElement(that._getVisibleEditRowIndex(), editColumnIndex);\r\n            that._delayedInputFocus($editCell, beforeFocusCallback, callBeforeFocusCallbackAlways)\r\n        },\r\n        deleteRow: function(rowIndex) {\r\n            var _this13 = this;\r\n            if (\"cell\" === this.option(\"editing.mode\") && this.isEditing()) {\r\n                var isNewRow = this._dataController.items()[rowIndex].isNewRow;\r\n                var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                this.closeEditCell(null, isNewRow).always(function() {\r\n                    rowIndex = _this13._dataController.getRowIndexByKey(rowKey);\r\n                    _this13._checkAndDeleteRow(rowIndex)\r\n                })\r\n            } else {\r\n                this._checkAndDeleteRow(rowIndex)\r\n            }\r\n        },\r\n        _checkAndDeleteRow: function(rowIndex) {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\");\r\n            var editingTexts = editingOptions && editingOptions.texts;\r\n            var isBatchMode = editingOptions && editingOptions.mode === EDIT_MODE_BATCH;\r\n            var confirmDelete = editingOptions && editingOptions.confirmDelete;\r\n            var confirmDeleteMessage = editingTexts && editingTexts.confirmDeleteMessage;\r\n            var item = that._dataController.items()[rowIndex];\r\n            var allowDeleting = isBatchMode || !that.isEditing() || item.isNewRow;\r\n            if (item && allowDeleting) {\r\n                if (isBatchMode || !confirmDelete || !confirmDeleteMessage) {\r\n                    that._deleteRowCore(rowIndex)\r\n                } else {\r\n                    var confirmDeleteTitle = editingTexts && editingTexts.confirmDeleteTitle;\r\n                    var showDialogTitle = (0, _type.isDefined)(confirmDeleteTitle) && confirmDeleteTitle.length > 0;\r\n                    (0, _dialog.confirm)(confirmDeleteMessage, confirmDeleteTitle, showDialogTitle).done(function(confirmResult) {\r\n                        if (confirmResult) {\r\n                            that._deleteRowCore(rowIndex)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _deleteRowCore: function(rowIndex) {\r\n            var dataController = this._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var key = item && item.key;\r\n            var oldEditRowIndex = this._getVisibleEditRowIndex();\r\n            var isBatchMode = this.option(\"editing.mode\") === EDIT_MODE_BATCH;\r\n            this.refresh();\r\n            var changes = this.getChanges();\r\n            var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\r\n            if (editIndex >= 0) {\r\n                if (changes[editIndex].type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                    this._removeChange(editIndex)\r\n                } else {\r\n                    this._addChange({\r\n                        key: key,\r\n                        type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                    })\r\n                }\r\n            } else {\r\n                this._addChange({\r\n                    key: key,\r\n                    oldData: item.data,\r\n                    type: DATA_EDIT_DATA_REMOVE_TYPE\r\n                })\r\n            }\r\n            if (isBatchMode) {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [oldEditRowIndex, rowIndex]\r\n                })\r\n            } else {\r\n                this.saveEditData()\r\n            }\r\n        },\r\n        undeleteRow: function(rowIndex) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            var item = dataController.items()[rowIndex];\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            var key = item && item.key;\r\n            var changes = this.getChanges();\r\n            if (item) {\r\n                var editIndex = _uiGrid_core2.default.getIndexByKey(key, changes);\r\n                if (editIndex >= 0) {\r\n                    var data = changes[editIndex].data;\r\n                    if ((0, _type.isEmptyObject)(data)) {\r\n                        that._removeChange(editIndex)\r\n                    } else {\r\n                        that._addChange({\r\n                            key: key,\r\n                            type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                        })\r\n                    }\r\n                    dataController.updateItems({\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldEditRowIndex, rowIndex]\r\n                    })\r\n                }\r\n            }\r\n        },\r\n        _fireOnSaving: function() {\r\n            var _this14 = this;\r\n            var onSavingParams = {\r\n                cancel: false,\r\n                promise: null,\r\n                changes: _toConsumableArray(this.getChanges())\r\n            };\r\n            this.executeAction(\"onSaving\", onSavingParams);\r\n            var d = new _deferred.Deferred;\r\n            (0, _deferred.when)((0, _deferred.fromPromise)(onSavingParams.promise)).done(function() {\r\n                d.resolve(onSavingParams)\r\n            }).fail(function(arg) {\r\n                createFailureHandler(d);\r\n                _this14._fireDataErrorOccurred(arg);\r\n                d.resolve({\r\n                    cancel: true\r\n                })\r\n            });\r\n            return d\r\n        },\r\n        _executeEditingAction: function(actionName, params, func) {\r\n            if (this.component._disposed) {\r\n                return null\r\n            }\r\n            var deferred = new _deferred.Deferred;\r\n            this.executeAction(actionName, params);\r\n            (0, _deferred.when)((0, _deferred.fromPromise)(params.cancel)).done(function(cancel) {\r\n                if (cancel) {\r\n                    setTimeout(function() {\r\n                        deferred.resolve(\"cancel\")\r\n                    })\r\n                } else {\r\n                    func(params).done(deferred.resolve).fail(createFailureHandler(deferred))\r\n                }\r\n            }).fail(createFailureHandler(deferred));\r\n            return deferred\r\n        },\r\n        _processChanges: function(deferreds, results, dataChanges, changes) {\r\n            var _this15 = this;\r\n            var store = this._dataController.store();\r\n            (0, _iterator.each)(changes, function(index, change) {\r\n                var oldData = _this15._getOldData(change.key);\r\n                var data = change.data,\r\n                    type = change.type;\r\n                var changeCopy = _objectSpread({}, change);\r\n                var deferred;\r\n                var params;\r\n                if (_this15._beforeSaveEditData(change, index)) {\r\n                    return\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        params = {\r\n                            data: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = _this15._executeEditingAction(\"onRowRemoving\", params, function() {\r\n                            return store.remove(change.key).done(function(key) {\r\n                                dataChanges.push({\r\n                                    type: \"remove\",\r\n                                    key: key\r\n                                })\r\n                            })\r\n                        });\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        params = {\r\n                            data: data,\r\n                            cancel: false\r\n                        };\r\n                        deferred = _this15._executeEditingAction(\"onRowInserting\", params, function() {\r\n                            return store.insert(params.data).done(function(data, key) {\r\n                                if ((0, _type.isDefined)(key)) {\r\n                                    changeCopy.key = key\r\n                                }\r\n                                if (data && (0, _type.isObject)(data) && data !== params.data) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"insert\",\r\n                                    data: data,\r\n                                    index: 0\r\n                                })\r\n                            })\r\n                        });\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        params = {\r\n                            newData: data,\r\n                            oldData: oldData,\r\n                            key: change.key,\r\n                            cancel: false\r\n                        };\r\n                        deferred = _this15._executeEditingAction(\"onRowUpdating\", params, function() {\r\n                            return store.update(change.key, params.newData).done(function(data, key) {\r\n                                if (data && (0, _type.isObject)(data) && data !== params.newData) {\r\n                                    changeCopy.data = data\r\n                                }\r\n                                dataChanges.push({\r\n                                    type: \"update\",\r\n                                    key: key,\r\n                                    data: data\r\n                                })\r\n                            })\r\n                        })\r\n                }\r\n                changes[index] = changeCopy;\r\n                if (deferred) {\r\n                    var doneDeferred = new _deferred.Deferred;\r\n                    deferred.always(function(data) {\r\n                        results.push({\r\n                            key: change.key,\r\n                            result: data\r\n                        })\r\n                    }).always(doneDeferred.resolve);\r\n                    deferreds.push(doneDeferred.promise())\r\n                }\r\n            })\r\n        },\r\n        _processSaveEditDataResult: function(results) {\r\n            var that = this;\r\n            var hasSavedData = false;\r\n            var editMode = _getEditMode(that);\r\n            var changes = _toConsumableArray(this.getChanges());\r\n            var changesLength = changes.length;\r\n            for (var i = 0; i < results.length; i++) {\r\n                var arg = results[i].result;\r\n                var cancel = \"cancel\" === arg;\r\n                var editIndex = _uiGrid_core2.default.getIndexByKey(results[i].key, changes);\r\n                var change = changes[editIndex];\r\n                var isError = arg && arg instanceof Error;\r\n                if (isError) {\r\n                    if (change) {\r\n                        this._addInternalData({\r\n                            key: change.key,\r\n                            error: arg\r\n                        })\r\n                    }\r\n                    that._fireDataErrorOccurred(arg);\r\n                    if (editMode !== EDIT_MODE_BATCH) {\r\n                        if ((null === change || void 0 === change ? void 0 : change.type) === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                            if (editIndex >= 0) {\r\n                                changes.splice(editIndex, 1)\r\n                            }\r\n                        }\r\n                        break\r\n                    }\r\n                } else {\r\n                    if (!cancel || !change || editMode !== EDIT_MODE_BATCH && change.type === DATA_EDIT_DATA_REMOVE_TYPE) {\r\n                        if (editIndex >= 0) {\r\n                            changes.splice(editIndex, 1)\r\n                        }\r\n                        hasSavedData = !cancel\r\n                    }\r\n                }\r\n            }\r\n            if (changes.length < changesLength) {\r\n                this._silentOption(EDITING_CHANGES_OPTION_NAME, changes)\r\n            }\r\n            return hasSavedData\r\n        },\r\n        _fireSaveEditDataEvents: function(changes) {\r\n            var that = this;\r\n            (0, _iterator.each)(changes, function(_, _ref2) {\r\n                var data = _ref2.data,\r\n                    key = _ref2.key,\r\n                    type = _ref2.type;\r\n                var internalData = that._addInternalData({\r\n                    key: key\r\n                });\r\n                var params = {\r\n                    key: key,\r\n                    data: data\r\n                };\r\n                if (internalData.error) {\r\n                    params.error = internalData.error\r\n                }\r\n                switch (type) {\r\n                    case DATA_EDIT_DATA_REMOVE_TYPE:\r\n                        that.executeAction(\"onRowRemoved\", (0, _extend.extend)({}, params, {\r\n                            data: internalData.oldData\r\n                        }));\r\n                        break;\r\n                    case DATA_EDIT_DATA_INSERT_TYPE:\r\n                        that.executeAction(\"onRowInserted\", params);\r\n                        break;\r\n                    case DATA_EDIT_DATA_UPDATE_TYPE:\r\n                        that.executeAction(\"onRowUpdated\", params)\r\n                }\r\n            });\r\n            this.executeAction(\"onSaved\", {\r\n                changes: changes\r\n            })\r\n        },\r\n        saveEditData: function() {\r\n            var _this16 = this;\r\n            var deferred = new _deferred.Deferred;\r\n            this.waitForDeferredOperations().done(function() {\r\n                if (_this16.isSaving()) {\r\n                    _this16._resolveAfterSave(deferred);\r\n                    return\r\n                }(0, _deferred.when)(_this16._beforeSaveEditData()).done(function(cancel) {\r\n                    if (cancel) {\r\n                        _this16._resolveAfterSave(deferred, {\r\n                            cancel: cancel\r\n                        });\r\n                        return\r\n                    }\r\n                    _this16._saving = true;\r\n                    _this16._saveEditDataInner().always(function() {\r\n                        _this16._saving = false\r\n                    }).done(deferred.resolve).fail(deferred.reject)\r\n                }).fail(deferred.reject)\r\n            }).fail(deferred.reject);\r\n            return deferred.promise()\r\n        },\r\n        _resolveAfterSave: function(deferred) {\r\n            var _ref3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},\r\n                cancel = _ref3.cancel,\r\n                error = _ref3.error;\r\n            (0, _deferred.when)(this._afterSaveEditData(cancel)).done(function() {\r\n                deferred.resolve(error)\r\n            }).fail(deferred.reject)\r\n        },\r\n        _saveEditDataInner: function() {\r\n            var _this17 = this;\r\n            var results = [];\r\n            var deferreds = [];\r\n            var dataChanges = [];\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController.dataSource();\r\n            var result = new _deferred.Deferred;\r\n            (0, _deferred.when)(this._fireOnSaving()).done(function(_ref4) {\r\n                var cancel = _ref4.cancel,\r\n                    changes = _ref4.changes;\r\n                if (cancel) {\r\n                    return result.resolve().promise()\r\n                }\r\n                _this17._processChanges(deferreds, results, dataChanges, changes);\r\n                if (deferreds.length) {\r\n                    null === dataSource || void 0 === dataSource ? void 0 : dataSource.beginLoading();\r\n                    _deferred.when.apply(void 0, deferreds).done(function() {\r\n                        if (_this17._processSaveEditDataResult(results)) {\r\n                            _this17._endSaving(dataChanges, changes, result)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                            result.resolve()\r\n                        }\r\n                    }).fail(function(error) {\r\n                        null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n                        result.resolve(error)\r\n                    });\r\n                    return result.always(function() {\r\n                        _this17._focusEditingCell()\r\n                    }).promise()\r\n                }\r\n                _this17._cancelSaving(result)\r\n            }).fail(result.reject);\r\n            return result.promise()\r\n        },\r\n        _resetModifiedClassCells: function(changes) {\r\n            var _this18 = this;\r\n            var editMode = _getEditMode(this);\r\n            if (editMode === EDIT_MODE_BATCH) {\r\n                var columnsCount = this._columnsController.getVisibleColumns().length;\r\n                changes.forEach(function(_ref5) {\r\n                    var key = _ref5.key;\r\n                    var rowIndex = _this18._dataController.getRowIndexByKey(key);\r\n                    if (rowIndex !== -1) {\r\n                        for (var columnIndex = 0; columnIndex < columnsCount; columnIndex++) {\r\n                            _this18._rowsView._getCellElement(rowIndex, columnIndex).removeClass(CELL_MODIFIED)\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _endSaving: function(dataChanges, changes, deferred) {\r\n            var _changes$;\r\n            var editMode = _getEditMode(this);\r\n            var dataSource = this._dataController.dataSource();\r\n            if (editMode !== EDIT_MODE_CELL) {\r\n                this._resetModifiedClassCells(changes);\r\n                this._resetEditIndices()\r\n            } else {\r\n                if (\"update\" !== (null === (_changes$ = changes[0]) || void 0 === _changes$ ? void 0 : _changes$.type)) {\r\n                    this._resetEditIndices()\r\n                }\r\n            }\r\n            if (editMode === EDIT_MODE_POPUP && this._editPopup) {\r\n                this._editPopup.hide()\r\n            }\r\n            null === dataSource || void 0 === dataSource ? void 0 : dataSource.endLoading();\r\n            this._refreshDataAfterSave(dataChanges, changes, deferred)\r\n        },\r\n        _cancelSaving: function(result) {\r\n            var editMode = _getEditMode(this);\r\n            var dataController = this._dataController;\r\n            if (_isRowEditMode(this)) {\r\n                if (!this.hasChanges()) {\r\n                    this._cancelEditDataCore()\r\n                }\r\n            } else {\r\n                if (this.isCellOrBatchEditMode()) {\r\n                    if (editMode !== EDIT_MODE_CELL) {\r\n                        this._resetEditIndices()\r\n                    }\r\n                    dataController.updateItems()\r\n                } else {\r\n                    this._focusEditingCell()\r\n                }\r\n            }\r\n            this.executeAction(\"onSaved\", {\r\n                changes: []\r\n            });\r\n            this._resolveAfterSave(result)\r\n        },\r\n        _refreshDataAfterSave: function(dataChanges, changes, deferred) {\r\n            var _this19 = this;\r\n            var dataController = this._dataController;\r\n            var refreshMode = this.option(\"editing.refreshMode\");\r\n            var isFullRefresh = \"reshape\" !== refreshMode && \"repaint\" !== refreshMode;\r\n            if (!isFullRefresh) {\r\n                dataController.push(dataChanges)\r\n            }(0, _deferred.when)(dataController.refresh({\r\n                selection: isFullRefresh,\r\n                reload: isFullRefresh,\r\n                load: \"reshape\" === refreshMode,\r\n                changesOnly: this.option(\"repaintChangesOnly\")\r\n            })).always(function() {\r\n                _this19._fireSaveEditDataEvents(changes)\r\n            }).done(function() {\r\n                _this19._resolveAfterSave(deferred)\r\n            }).fail(function(error) {\r\n                _this19._resolveAfterSave(deferred, {\r\n                    error: error\r\n                })\r\n            })\r\n        },\r\n        isSaving: function() {\r\n            return this._saving\r\n        },\r\n        _updateEditColumn: function() {\r\n            var that = this;\r\n            var isEditColumnVisible = that._isEditColumnVisible();\r\n            var useIcons = that.option(\"editing.useIcons\");\r\n            var cssClass = COMMAND_EDIT_CLASS + (useIcons ? \" \" + COMMAND_EDIT_WITH_ICONS_CLASS : \"\");\r\n            that._columnsController.addCommandColumn({\r\n                type: \"buttons\",\r\n                command: \"edit\",\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass,\r\n                width: \"auto\",\r\n                alignment: \"center\",\r\n                cellTemplate: that._getEditCommandCellTemplate(),\r\n                fixedPosition: \"right\"\r\n            });\r\n            that._columnsController.columnOption(\"command:edit\", {\r\n                visible: isEditColumnVisible,\r\n                cssClass: cssClass\r\n            })\r\n        },\r\n        _isEditColumnVisible: function() {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\");\r\n            if (editingOptions) {\r\n                var editMode = _getEditMode(that);\r\n                var isVisibleWithCurrentEditMode = false;\r\n                switch (editMode) {\r\n                    case EDIT_MODE_ROW:\r\n                        isVisibleWithCurrentEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\r\n                        break;\r\n                    case EDIT_MODE_FORM:\r\n                    case EDIT_MODE_POPUP:\r\n                        isVisibleWithCurrentEditMode = editingOptions.allowUpdating\r\n                }\r\n                return editingOptions.allowDeleting || isVisibleWithCurrentEditMode\r\n            }\r\n        },\r\n        _updateEditButtons: function() {\r\n            var that = this;\r\n            var headerPanel = that.getView(\"headerPanel\");\r\n            var hasChanges = that.hasChanges();\r\n            if (headerPanel) {\r\n                headerPanel.setToolbarItemDisabled(\"saveButton\", !hasChanges);\r\n                headerPanel.setToolbarItemDisabled(\"revertButton\", !hasChanges)\r\n            }\r\n        },\r\n        _applyModified: function($element) {\r\n            $element && $element.addClass(CELL_MODIFIED)\r\n        },\r\n        _beforeCloseEditCellInBatchMode: function() {},\r\n        cancelEditData: function() {\r\n            var changes = this.getChanges();\r\n            var params = {\r\n                cancel: false,\r\n                changes: changes\r\n            };\r\n            this.executeAction(\"onEditCanceling\", params);\r\n            if (!params.cancel) {\r\n                this._cancelEditDataCore();\r\n                this.executeAction(\"onEditCanceled\", {\r\n                    changes: changes\r\n                })\r\n            }\r\n        },\r\n        _cancelEditDataCore: function() {\r\n            var editMode = _getEditMode(this);\r\n            var rowIndex = this._getVisibleEditRowIndex();\r\n            var dataController = this._dataController;\r\n            this._beforeCancelEditData();\r\n            this.init();\r\n            this.resetChanges();\r\n            this._resetEditColumnName();\r\n            this._resetEditRowKey();\r\n            if (ROW_BASED_MODES.indexOf(editMode) !== -1 && rowIndex >= 0) {\r\n                dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: [rowIndex, rowIndex + 1]\r\n                })\r\n            } else {\r\n                dataController.updateItems({\r\n                    repaintChangesOnly: this.option(\"repaintChangesOnly\")\r\n                })\r\n            }\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                this._hideEditPopup()\r\n            }\r\n        },\r\n        _hideEditPopup: function() {\r\n            this._editPopup && this._editPopup.option(\"visible\", false)\r\n        },\r\n        hasEditData: function() {\r\n            return this.hasChanges()\r\n        },\r\n        closeEditCell: function(isError, withoutSaveEditData) {\r\n            var _this20 = this;\r\n            var that = this;\r\n            var result = (0, _deferred.when)();\r\n            var oldEditRowIndex = that._getVisibleEditRowIndex();\r\n            if (!_isRowEditMode(that)) {\r\n                var deferred = new _deferred.Deferred;\r\n                result = new _deferred.Deferred;\r\n                this.executeOperation(deferred, function() {\r\n                    _this20._closeEditCellCore(isError, oldEditRowIndex, withoutSaveEditData).always(result.resolve)\r\n                })\r\n            }\r\n            return result.promise()\r\n        },\r\n        _closeEditCellCore: function(isError, oldEditRowIndex, withoutSaveEditData) {\r\n            var _this21 = this;\r\n            var editMode = _getEditMode(this);\r\n            var dataController = this._dataController;\r\n            var deferred = new _deferred.Deferred;\r\n            var promise = deferred.promise();\r\n            if (editMode === EDIT_MODE_CELL && this.hasChanges()) {\r\n                if (!withoutSaveEditData) {\r\n                    this.saveEditData().done(function(error) {\r\n                        if (!_this21.hasChanges()) {\r\n                            _this21.closeEditCell(!!error).always(deferred.resolve);\r\n                            return\r\n                        }\r\n                        deferred.resolve()\r\n                    });\r\n                    return promise\r\n                }\r\n            } else {\r\n                if (oldEditRowIndex >= 0) {\r\n                    var rowIndices = [oldEditRowIndex];\r\n                    this._resetEditRowKey();\r\n                    this._resetEditColumnName();\r\n                    this._beforeCloseEditCellInBatchMode(rowIndices);\r\n                    if (!isError) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndices\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            deferred.resolve();\r\n            return promise\r\n        },\r\n        update: function(changeType) {\r\n            var that = this;\r\n            var dataController = that._dataController;\r\n            if (dataController && that._pageIndex !== dataController.pageIndex()) {\r\n                if (\"refresh\" === changeType) {\r\n                    that.refresh(true)\r\n                }\r\n                that._pageIndex = dataController.pageIndex()\r\n            }\r\n            that._updateEditButtons()\r\n        },\r\n        _getRowIndicesForCascadeUpdating: function(row, skipCurrentRow) {\r\n            return skipCurrentRow ? [] : [row.rowIndex]\r\n        },\r\n        addDeferred: function(deferred) {\r\n            var _this22 = this;\r\n            if (this._deferreds.indexOf(deferred) < 0) {\r\n                this._deferreds.push(deferred);\r\n                deferred.always(function() {\r\n                    var index = _this22._deferreds.indexOf(deferred);\r\n                    if (index >= 0) {\r\n                        _this22._deferreds.splice(index, 1)\r\n                    }\r\n                })\r\n            }\r\n        },\r\n        _prepareChange: function(options, value, text) {\r\n            var _options$row;\r\n            var that = this;\r\n            var newData = {};\r\n            var oldData = null === (_options$row = options.row) || void 0 === _options$row ? void 0 : _options$row.data;\r\n            var rowKey = options.key;\r\n            var $cellElement = (0, _renderer.default)(options.cellElement);\r\n            var editMode = _getEditMode(that);\r\n            var deferred = new _deferred.Deferred;\r\n            if (void 0 !== rowKey) {\r\n                if (editMode === EDIT_MODE_BATCH) {\r\n                    that._applyModified($cellElement, options)\r\n                }\r\n                options.value = value;\r\n                var setCellValueResult = (0, _deferred.fromPromise)(options.column.setCellValue(newData, value, (0, _extend.extend)(true, {}, oldData), text));\r\n                setCellValueResult.done(function() {\r\n                    deferred.resolve({\r\n                        data: newData,\r\n                        key: rowKey,\r\n                        oldData: oldData,\r\n                        type: DATA_EDIT_DATA_UPDATE_TYPE\r\n                    })\r\n                }).fail(createFailureHandler(deferred)).fail(function(arg) {\r\n                    return that._fireDataErrorOccurred(arg)\r\n                });\r\n                if ((0, _type.isDefined)(text) && options.column.displayValueMap) {\r\n                    options.column.displayValueMap[value] = text\r\n                }\r\n                that._updateRowValues(options);\r\n                that.addDeferred(deferred)\r\n            }\r\n            return deferred\r\n        },\r\n        _updateRowValues: function(options) {\r\n            if (options.values) {\r\n                var dataController = this._dataController;\r\n                var rowIndex = dataController.getRowIndexByKey(options.key);\r\n                var row = dataController.getVisibleRows()[rowIndex];\r\n                if (row) {\r\n                    options.values = row.values\r\n                }\r\n                options.values[options.columnIndex] = options.value\r\n            }\r\n        },\r\n        updateFieldValue: function(options, value, text, forceUpdateRow) {\r\n            var _this23 = this;\r\n            var rowKey = options.key;\r\n            var deferred = new _deferred.Deferred;\r\n            if (void 0 === rowKey) {\r\n                this._dataController.fireError(\"E1043\")\r\n            }\r\n            if (options.column.setCellValue) {\r\n                this._prepareChange(options, value, text).done(function(params) {\r\n                    (0, _deferred.when)(_this23._applyChange(options, params, forceUpdateRow)).always(function() {\r\n                        deferred.resolve()\r\n                    })\r\n                })\r\n            } else {\r\n                deferred.resolve()\r\n            }\r\n            return deferred.promise()\r\n        },\r\n        _focusPreviousEditingCellIfNeed: function(options) {\r\n            var that = this;\r\n            if (that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex)) {\r\n                that._focusEditingCell();\r\n                that._updateEditRow(options.row, true);\r\n                return true\r\n            }\r\n        },\r\n        _needUpdateRow: function(column) {\r\n            var visibleColumns = this._columnsController.getVisibleColumns();\r\n            if (!column) {\r\n                column = this._getEditColumn()\r\n            }\r\n            var isCustomSetCellValue = column && column.setCellValue !== column.defaultSetCellValue;\r\n            var isCustomCalculateCellValue = visibleColumns.some(function(visibleColumn) {\r\n                return visibleColumn.calculateCellValue !== visibleColumn.defaultCalculateCellValue\r\n            });\r\n            return isCustomSetCellValue || isCustomCalculateCellValue\r\n        },\r\n        _applyChange: function(options, params, forceUpdateRow) {\r\n            var that = this;\r\n            var editMode = _getEditMode(that);\r\n            var isCustomSetCellValue = options.column.setCellValue !== options.column.defaultSetCellValue;\r\n            var showEditorAlways = options.column.showEditorAlways;\r\n            var isUpdateInCellMode = editMode === EDIT_MODE_CELL && options.row && !options.row.isNewRow;\r\n            var focusPreviousEditingCell = showEditorAlways && !forceUpdateRow && isUpdateInCellMode && that.hasEditData() && !that.isEditCell(options.rowIndex, options.columnIndex);\r\n            if (focusPreviousEditingCell) {\r\n                that._focusEditingCell();\r\n                that._updateEditRow(options.row, true, isCustomSetCellValue);\r\n                return\r\n            }\r\n            that._addChange(params, options.row);\r\n            that._updateEditButtons();\r\n            if (showEditorAlways && !forceUpdateRow) {\r\n                if (isUpdateInCellMode) {\r\n                    that._setEditRowKey(options.row.key, true);\r\n                    that._setEditColumnNameByIndex(options.columnIndex, true);\r\n                    return that.saveEditData()\r\n                } else {\r\n                    if (editMode === EDIT_MODE_BATCH) {\r\n                        forceUpdateRow = that._needUpdateRow(options.column)\r\n                    }\r\n                }\r\n            }\r\n            var row = options.row;\r\n            if (row) {\r\n                if (forceUpdateRow || isCustomSetCellValue) {\r\n                    that._updateEditRow(row, forceUpdateRow, isCustomSetCellValue)\r\n                } else {\r\n                    if (row.update) {\r\n                        row.update()\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n            var that = this;\r\n            var editForm = that._editForm;\r\n            var editMode = _getEditMode(that);\r\n            if (editMode === EDIT_MODE_POPUP) {\r\n                if (that.option(\"repaintChangesOnly\")) {\r\n                    row.update && row.update(row)\r\n                } else {\r\n                    if (editForm) {\r\n                        that._updateEditFormDeferred = (new _deferred.Deferred).done(function() {\r\n                            return editForm.repaint()\r\n                        });\r\n                        if (!that._updateLockCount) {\r\n                            that._updateEditFormDeferred.resolve()\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                that._dataController.updateItems({\r\n                    changeType: \"update\",\r\n                    rowIndices: that._getRowIndicesForCascadeUpdating(row, skipCurrentRow)\r\n                })\r\n            }\r\n        },\r\n        _endUpdateCore: function() {\r\n            this._updateEditFormDeferred && this._updateEditFormDeferred.resolve()\r\n        },\r\n        _updateEditRow: function(row, forceUpdateRow, isCustomSetCellValue) {\r\n            var that = this;\r\n            if (forceUpdateRow || !_isRowEditMode(that)) {\r\n                that._updateEditRowCore(row, !forceUpdateRow, isCustomSetCellValue);\r\n                if (!forceUpdateRow) {\r\n                    that._focusEditingCell()\r\n                }\r\n            } else {\r\n                var deferred = new _deferred.Deferred;\r\n                that.addDeferred(deferred);\r\n                setTimeout(function() {\r\n                    var $focusedElement = (0, _renderer.default)(_dom_adapter.default.getActiveElement());\r\n                    var columnIndex = that._rowsView.getCellIndex($focusedElement, row.rowIndex);\r\n                    var focusedElement = $focusedElement.get(0);\r\n                    var selectionRange = _uiGrid_core2.default.getSelectionRange(focusedElement);\r\n                    that._updateEditRowCore(row, false, isCustomSetCellValue);\r\n                    if (columnIndex >= 0) {\r\n                        var $focusedItem = that._rowsView._getCellElement(row.rowIndex, columnIndex);\r\n                        that._delayedInputFocus($focusedItem, function() {\r\n                            setTimeout(function() {\r\n                                focusedElement = _dom_adapter.default.getActiveElement();\r\n                                if (selectionRange.selectionStart >= 0) {\r\n                                    _uiGrid_core2.default.setSelectionRange(focusedElement, selectionRange)\r\n                                }\r\n                            })\r\n                        })\r\n                    }\r\n                    deferred.resolve()\r\n                })\r\n            }\r\n        },\r\n        _addChange: function(options, row) {\r\n            var changes = _toConsumableArray(this.getChanges());\r\n            var index = _uiGrid_core2.default.getIndexByKey(options.key, changes);\r\n            if (index < 0) {\r\n                index = changes.length;\r\n                this._addInternalData({\r\n                    key: options.key,\r\n                    oldData: options.oldData\r\n                });\r\n                delete options.oldData;\r\n                changes.push(options)\r\n            }\r\n            var change = _objectSpread({}, changes[index]);\r\n            if (change) {\r\n                if (options.data) {\r\n                    change.data = (0, _array_utils.createObjectWithChanges)(change.data, options.data)\r\n                }\r\n                if ((!change.type || !options.data) && options.type) {\r\n                    change.type = options.type;\r\n                }\r\n                if (row) {\r\n                    row.oldData = this._getOldData(row.key);\r\n                    row.data = (0, _array_utils.createObjectWithChanges)(row.data, options.data)\r\n                }\r\n            }\r\n            changes[index] = change;\r\n            this._silentOption(EDITING_CHANGES_OPTION_NAME, changes);\r\n            return index\r\n        },\r\n        _getFormEditItemTemplate: function(cellOptions, column) {\r\n            return column.editCellTemplate || getDefaultEditorTemplate(this)\r\n        },\r\n        renderFormEditTemplate: function(detailCellOptions, item, form, container, isReadOnly) {\r\n            var that = this;\r\n            var $container = (0, _renderer.default)(container);\r\n            var column = item.column;\r\n            var editorType = getEditorType(item);\r\n            var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\r\n            var cellOptions = (0, _extend.extend)({}, detailCellOptions, {\r\n                data: rowData,\r\n                cellElement: null,\r\n                isOnForm: true,\r\n                item: item,\r\n                column: (0, _extend.extend)({}, column, {\r\n                    editorType: editorType,\r\n                    editorOptions: item.editorOptions\r\n                }),\r\n                id: form.getItemID(item.name || item.dataField),\r\n                columnIndex: column.index,\r\n                setValue: !isReadOnly && column.allowEditing && function(value) {\r\n                    that.updateFieldValue(cellOptions, value)\r\n                }\r\n            });\r\n            cellOptions.value = column.calculateCellValue(rowData);\r\n            var template = that._getFormEditItemTemplate.bind(that)(cellOptions, column);\r\n            that._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest((0, _window.getWindow)().document).length).done(function() {\r\n                that._rowsView._updateCell($container, cellOptions)\r\n            });\r\n            return cellOptions\r\n        },\r\n        getFormEditorTemplate: function(cellOptions, item) {\r\n            var that = this;\r\n            var column = this.component.columnOption(item.dataField);\r\n            return function(options, container) {\r\n                var $container = (0, _renderer.default)(container);\r\n                cellOptions.row.watch && cellOptions.row.watch(function() {\r\n                    return column.selector(cellOptions.row.data)\r\n                }, function() {\r\n                    var _validator;\r\n                    var $editorElement = $container.find(\".dx-widget\").first();\r\n                    var validator = $editorElement.data(\"dxValidator\");\r\n                    var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\r\n                    $container.contents().remove();\r\n                    cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container);\r\n                    $editorElement = $container.find(\".dx-widget\").first();\r\n                    validator = $editorElement.data(\"dxValidator\");\r\n                    if (validatorOptions && !validator) {\r\n                        $editorElement.dxValidator({\r\n                            validationRules: validatorOptions.validationRules,\r\n                            validationGroup: validatorOptions.validationGroup,\r\n                            dataGetter: validatorOptions.dataGetter\r\n                        })\r\n                    }\r\n                });\r\n                cellOptions = that.renderFormEditTemplate.bind(that)(cellOptions, item, options.component, $container)\r\n            }\r\n        },\r\n        getEditFormOptions: function(detailOptions) {\r\n            var userCustomizeItem = this.option(\"editing.form.customizeItem\");\r\n            var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\r\n            var items = this.option(\"editing.form.items\");\r\n            var isCustomEditorType = {};\r\n            var that = this;\r\n            if (!items) {\r\n                var columns = this.getController(\"columns\").getColumns();\r\n                items = [];\r\n                (0, _iterator.each)(columns, function(_, column) {\r\n                    if (!column.isBand && !column.type) {\r\n                        items.push({\r\n                            column: column,\r\n                            name: column.name,\r\n                            dataField: column.dataField\r\n                        })\r\n                    }\r\n                })\r\n            } else {\r\n                forEachFormItems(items, function(item) {\r\n                    var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\r\n                    if (itemId) {\r\n                        isCustomEditorType[itemId] = !!item.editorType\r\n                    }\r\n                })\r\n            }\r\n            return {\r\n                items: items,\r\n                formID: \"dx-\" + new _guid.default,\r\n                customizeItem: function(item) {\r\n                    var column;\r\n                    var itemId = item.name || item.dataField;\r\n                    if (item.column || itemId) {\r\n                        column = item.column || that._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField)\r\n                    }\r\n                    if (column) {\r\n                        item.label = item.label || {};\r\n                        item.label.text = item.label.text || column.caption;\r\n                        item.template = item.template || that.getFormEditorTemplate(detailOptions, item);\r\n                        item.column = column;\r\n                        item.isCustomEditorType = isCustomEditorType[itemId];\r\n                        if (column.formItem) {\r\n                            (0, _extend.extend)(item, column.formItem)\r\n                        }\r\n                        if (void 0 === item.isRequired && column.validationRules) {\r\n                            item.isRequired = column.validationRules.some(function(rule) {\r\n                                return \"required\" === rule.type\r\n                            });\r\n                            item.validationRules = []\r\n                        }\r\n                        var itemVisible = (0, _type.isDefined)(item.visible) ? item.visible : true;\r\n                        if (!that._firstFormItem && itemVisible) {\r\n                            that._firstFormItem = item\r\n                        }\r\n                    }\r\n                    userCustomizeItem && userCustomizeItem.call(this, item);\r\n                    item.cssClass = (0, _type.isString)(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass\r\n                }\r\n            }\r\n        },\r\n        getEditFormTemplate: function() {\r\n            var that = this;\r\n            return function($container, detailOptions, renderFormOnly) {\r\n                var editFormOptions = that.option(\"editing.form\");\r\n                var baseEditFormOptions = that.getEditFormOptions(detailOptions);\r\n                that._firstFormItem = void 0;\r\n                that._editForm = that._createComponent((0, _renderer.default)(\"<div>\").appendTo($container), _form.default, (0, _extend.extend)({}, editFormOptions, baseEditFormOptions));\r\n                if (!renderFormOnly) {\r\n                    var $buttonsContainer = (0, _renderer.default)(\"<div>\").addClass(that.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\r\n                    that._createComponent((0, _renderer.default)(\"<div>\").appendTo($buttonsContainer), _button.default, that._getSaveButtonConfig());\r\n                    that._createComponent((0, _renderer.default)(\"<div>\").appendTo($buttonsContainer), _button.default, that._getCancelButtonConfig())\r\n                }\r\n                that._editForm.on(\"contentReady\", function() {\r\n                    that._editPopup && that._editPopup.repaint()\r\n                })\r\n            }\r\n        },\r\n        getColumnTemplate: function(options) {\r\n            var that = this;\r\n            var column = options.column;\r\n            var rowIndex = options.row && options.row.rowIndex;\r\n            var template;\r\n            var isRowMode = _isRowEditMode(that);\r\n            var isRowEditing = that.isEditRow(rowIndex);\r\n            var isCellEditing = that.isEditCell(rowIndex, options.columnIndex);\r\n            var editingStartOptions;\r\n            if ((column.showEditorAlways || column.setCellValue && (isRowEditing && column.allowEditing || isCellEditing)) && (\"data\" === options.rowType || \"detailAdaptive\" === options.rowType) && !column.command) {\r\n                var allowUpdating = that.allowUpdating(options);\r\n                if (((allowUpdating || isRowEditing) && column.allowEditing || isCellEditing) && (isRowMode && isRowEditing || !isRowMode)) {\r\n                    if (column.showEditorAlways && !isRowMode) {\r\n                        editingStartOptions = {\r\n                            cancel: false,\r\n                            key: options.row.isNewRow ? void 0 : options.row.key,\r\n                            data: options.row.data,\r\n                            column: column\r\n                        };\r\n                        that._isEditingStart(editingStartOptions)\r\n                    }\r\n                    if (!editingStartOptions || !editingStartOptions.cancel) {\r\n                        options.setValue = function(value, text) {\r\n                            that.updateFieldValue(options, value, text)\r\n                        }\r\n                    }\r\n                }\r\n                template = column.editCellTemplate || getDefaultEditorTemplate(that)\r\n            } else {\r\n                if (\"detail\" === column.command && \"detail\" === options.rowType && isRowEditing) {\r\n                    template = that.getEditFormTemplate(options)\r\n                }\r\n            }\r\n            return template\r\n        },\r\n        _createButton: function($container, button, options) {\r\n            var that = this;\r\n            var icon = EDIT_ICON_CLASS[button.name];\r\n            var useIcons = that.option(\"editing.useIcons\");\r\n            var $button = (0, _renderer.default)(\"<a>\").attr(\"href\", \"#\").addClass(LINK_CLASS).addClass(button.cssClass);\r\n            if (button.template) {\r\n                that._rowsView.renderTemplate($container, button.template, options, true)\r\n            } else {\r\n                if (useIcons && icon || button.icon) {\r\n                    icon = button.icon || icon;\r\n                    var iconType = iconUtils.getImageSourceType(icon);\r\n                    if (\"image\" === iconType || \"svg\" === iconType) {\r\n                        $button = iconUtils.getImageContainer(icon).addClass(button.cssClass)\r\n                    } else {\r\n                        $button.addClass(\"dx-icon\" + (\"dxIcon\" === iconType ? \"-\" : \" \") + icon).attr(\"title\", button.text)\r\n                    }\r\n                    $button.addClass(\"dx-link-icon\");\r\n                    $container.addClass(COMMAND_EDIT_WITH_ICONS_CLASS);\r\n                    var localizationName = this.getButtonLocalizationNames()[button.name];\r\n                    localizationName && $button.attr(\"aria-label\", _message.default.format(localizationName))\r\n                } else {\r\n                    $button.text(button.text)\r\n                }\r\n                if ((0, _type.isDefined)(button.hint)) {\r\n                    $button.attr(\"title\", button.hint)\r\n                }\r\n                _events_engine.default.on($button, (0, _index.addNamespace)(\"click\", EDITING_NAMESPACE), that.createAction(function(e) {\r\n                    button.onClick.call(button, (0, _extend.extend)({}, e, {\r\n                        row: options.row,\r\n                        column: options.column\r\n                    }));\r\n                    e.event.preventDefault();\r\n                    e.event.stopPropagation()\r\n                }));\r\n                $container.append($button, \"&nbsp;\")\r\n            }\r\n        },\r\n        getButtonLocalizationNames: function() {\r\n            return {\r\n                edit: \"dxDataGrid-editingEditRow\",\r\n                save: \"dxDataGrid-editingSaveRowChanges\",\r\n                \"delete\": \"dxDataGrid-editingDeleteRow\",\r\n                undelete: \"dxDataGrid-editingUndeleteRow\",\r\n                cancel: \"dxDataGrid-editingCancelRowChanges\"\r\n            }\r\n        },\r\n        prepareEditButtons: function(headerPanel) {\r\n            var that = this;\r\n            var editingOptions = that.option(\"editing\") || {};\r\n            var editingTexts = that.option(\"editing.texts\") || {};\r\n            var titleButtonTextByClassNames = {\r\n                revert: editingTexts.cancelAllChanges,\r\n                save: editingTexts.saveAllChanges,\r\n                addRow: editingTexts.addRow\r\n            };\r\n            var classNameButtonByNames = {\r\n                revert: \"cancel\",\r\n                save: \"save\",\r\n                addRow: \"addrow\"\r\n            };\r\n            var buttonItems = [];\r\n            var prepareButtonItem = function(name, methodName, sortIndex) {\r\n                var className = classNameButtonByNames[name];\r\n                var onInitialized = function(e) {\r\n                    (0, _renderer.default)(e.element).addClass(headerPanel._getToolbarButtonClass(EDIT_BUTTON_CLASS + \" \" + that.addWidgetPrefix(className) + \"-button\"))\r\n                };\r\n                var hintText = titleButtonTextByClassNames[name];\r\n                var isButtonDisabled = (\"save\" === className || \"cancel\" === className) && !that.hasChanges();\r\n                return {\r\n                    widget: \"dxButton\",\r\n                    options: {\r\n                        onInitialized: onInitialized,\r\n                        icon: \"edit-button-\" + className,\r\n                        disabled: isButtonDisabled,\r\n                        onClick: function() {\r\n                            setTimeout(function() {\r\n                                that[methodName]()\r\n                            })\r\n                        },\r\n                        text: hintText,\r\n                        hint: hintText\r\n                    },\r\n                    showText: \"inMenu\",\r\n                    name: name + \"Button\",\r\n                    location: \"after\",\r\n                    locateInMenu: \"auto\",\r\n                    sortIndex: sortIndex\r\n                }\r\n            };\r\n            if (editingOptions.allowAdding) {\r\n                buttonItems.push(prepareButtonItem(\"addRow\", \"addRow\", 20))\r\n            }\r\n            if ((editingOptions.allowUpdating || editingOptions.allowAdding || editingOptions.allowDeleting) && _getEditMode(that) === EDIT_MODE_BATCH) {\r\n                buttonItems.push(prepareButtonItem(\"save\", \"saveEditData\", 21));\r\n                buttonItems.push(prepareButtonItem(\"revert\", \"cancelEditData\", 22))\r\n            }\r\n            return buttonItems\r\n        },\r\n        highlightDataCell: function($cell, parameters) {\r\n            var cellModified = this.isCellModified(parameters);\r\n            cellModified && parameters.column.setCellValue && $cell.addClass(CELL_MODIFIED)\r\n        },\r\n        _afterInsertRow: function() {},\r\n        _beforeSaveEditData: function(change) {\r\n            if (change && !(0, _type.isDefined)(change.key) && (0, _type.isDefined)(change.type)) {\r\n                return true\r\n            }\r\n        },\r\n        _afterSaveEditData: function() {},\r\n        _beforeCancelEditData: function() {},\r\n        _allowEditAction: function(actionName, options) {\r\n            var allowEditAction = this.option(\"editing.\" + actionName);\r\n            if ((0, _type.isFunction)(allowEditAction)) {\r\n                allowEditAction = allowEditAction({\r\n                    component: this.component,\r\n                    row: options.row\r\n                })\r\n            }\r\n            return allowEditAction\r\n        },\r\n        allowUpdating: function(options, eventName) {\r\n            var startEditAction = this.option(\"editing.startEditAction\") || DEFAULT_START_EDIT_ACTION;\r\n            var needCallback = arguments.length > 1 ? startEditAction === eventName || \"down\" === eventName : true;\r\n            return needCallback && this._allowEditAction(\"allowUpdating\", options)\r\n        },\r\n        allowDeleting: function(options) {\r\n            return this._allowEditAction(\"allowDeleting\", options)\r\n        },\r\n        isCellModified: function(parameters) {\r\n            var columnIndex = parameters.columnIndex;\r\n            var modifiedValues = parameters.row && (parameters.row.isNewRow ? parameters.row.values : parameters.row.modifiedValues);\r\n            return !!modifiedValues && void 0 !== modifiedValues[columnIndex]\r\n        }\r\n    }\r\n}());\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            editing: {\r\n                mode: \"row\",\r\n                refreshMode: \"full\",\r\n                allowAdding: false,\r\n                allowUpdating: false,\r\n                allowDeleting: false,\r\n                useIcons: false,\r\n                selectTextOnEditStart: false,\r\n                confirmDelete: true,\r\n                texts: {\r\n                    editRow: _message.default.format(\"dxDataGrid-editingEditRow\"),\r\n                    saveAllChanges: _message.default.format(\"dxDataGrid-editingSaveAllChanges\"),\r\n                    saveRowChanges: _message.default.format(\"dxDataGrid-editingSaveRowChanges\"),\r\n                    cancelAllChanges: _message.default.format(\"dxDataGrid-editingCancelAllChanges\"),\r\n                    cancelRowChanges: _message.default.format(\"dxDataGrid-editingCancelRowChanges\"),\r\n                    addRow: _message.default.format(\"dxDataGrid-editingAddRow\"),\r\n                    deleteRow: _message.default.format(\"dxDataGrid-editingDeleteRow\"),\r\n                    undeleteRow: _message.default.format(\"dxDataGrid-editingUndeleteRow\"),\r\n                    confirmDeleteMessage: _message.default.format(\"dxDataGrid-editingConfirmDeleteMessage\"),\r\n                    confirmDeleteTitle: \"\"\r\n                },\r\n                form: {\r\n                    colCount: 2\r\n                },\r\n                popup: {},\r\n                startEditAction: \"click\",\r\n                editRowKey: null,\r\n                editColumnName: null,\r\n                changes: []\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        editing: EditingController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this.callBase()\r\n                },\r\n                reload: function(full, repaintChangesOnly) {\r\n                    !repaintChangesOnly && this._editingController.refresh();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function() {\r\n                    if (this.getController(\"editing\").isSaving()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _updateEditRow: function(items) {\r\n                    var editingController = this._editingController;\r\n                    var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                    var editRowIndex = _uiGrid_core2.default.getIndexByKey(editRowKey, items);\r\n                    var editItem = items[editRowIndex];\r\n                    if (editItem) {\r\n                        editItem.isEditing = true;\r\n                        if (editingController.getEditMode() === EDIT_MODE_FORM) {\r\n                            editItem.rowType = \"detail\"\r\n                        }\r\n                    }\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateEditRow(this.items())\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    this._updateEditRow(change.items);\r\n                    this.callBase(change)\r\n                },\r\n                _processItems: function(items, change) {\r\n                    items = this._editingController.processItems(items, change);\r\n                    return this.callBase(items, change)\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    this._editingController.processDataItem(dataItem, options, this.generateDataValues);\r\n                    return this.callBase(dataItem, options)\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this.callBase(item, options);\r\n                    if (item.isNewRow) {\r\n                        options.dataIndex--;\r\n                        delete item.dataIndex\r\n                    }\r\n                    return item\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var isRowEditMode = editingController.isRowEditMode();\r\n                    if (oldItem.isNewRow !== newItem.isNewRow || oldItem.removed !== newItem.removed || isRowEditMode && oldItem.isEditing !== newItem.isEditing) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    var cell = oldRow.cells && oldRow.cells[columnIndex];\r\n                    var isEditing = editingController && editingController.isEditCell(visibleRowIndex, columnIndex);\r\n                    if (isLiveUpdate && isEditing) {\r\n                        return false\r\n                    }\r\n                    if (cell && cell.column && !cell.column.showEditorAlways && cell.isEditing !== isEditing) {\r\n                        return true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._editingController = this.getController(\"editing\")\r\n                },\r\n                getCellElements: function(rowIndex) {\r\n                    var $cellElements = this.callBase(rowIndex);\r\n                    var editingController = this._editingController;\r\n                    var editForm = editingController.getEditForm();\r\n                    var editFormRowIndex = editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && $cellElements && editForm) {\r\n                        return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS)\r\n                    }\r\n                    return $cellElements\r\n                },\r\n                getCellIndex: function($cell, rowIndex) {\r\n                    if (!$cell.is(\"td\") && rowIndex >= 0) {\r\n                        var $cellElements = this.getCellElements(rowIndex);\r\n                        var cellIndex = -1;\r\n                        (0, _iterator.each)($cellElements, function(index, cellElement) {\r\n                            if ((0, _renderer.default)(cellElement).find($cell).length) {\r\n                                cellIndex = index\r\n                            }\r\n                        });\r\n                        return cellIndex\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {\r\n                    var editFormRowIndex = this._editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && (0, _type.isString)(columnIdentifier)) {\r\n                        var column = this._columnsController.columnOption(columnIdentifier);\r\n                        return this._getEditFormEditorVisibleIndex($cells, column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getEditFormEditorVisibleIndex: function($cells, column) {\r\n                    var visibleIndex = -1;\r\n                    (0, _iterator.each)($cells, function(index, cellElement) {\r\n                        var item = (0, _renderer.default)(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\r\n                        if (item && item.column && column && item.column.index === column.index) {\r\n                            visibleIndex = index;\r\n                            return false\r\n                        }\r\n                    });\r\n                    return visibleIndex\r\n                },\r\n                publicMethods: function() {\r\n                    return this.callBase().concat([\"cellValue\"])\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var template = that._editingController.getColumnTemplate(options);\r\n                    return template || that.callBase(options)\r\n                },\r\n                _isNativeClick: function() {\r\n                    return (_devices.default.real().ios || _devices.default.real().android) && this.option(\"editing.allowUpdating\")\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (!_isRowEditMode(that) && that.option(\"editing.allowUpdating\")) {\r\n                        _events_engine.default.on($table, (0, _index.addNamespace)(_hold.default.name, \"dxDataGridRowsView\"), \"td:not(.\" + EDITOR_CELL_CLASS + \")\", that.createAction(function() {\r\n                            var editingController = that._editingController;\r\n                            if (editingController.isEditing()) {\r\n                                editingController.closeEditCell()\r\n                            }\r\n                        }))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isEditRow = editingController.isEditRow(row.rowIndex);\r\n                        var isRowRemoved = !!row.removed;\r\n                        var isRowInserted = !!row.isNewRow;\r\n                        var isRowModified = !!row.modified;\r\n                        if (_getEditMode(this) === EDIT_MODE_BATCH) {\r\n                            isRowRemoved && $row.addClass(ROW_REMOVED)\r\n                        } else {\r\n                            isEditRow && $row.addClass(EDIT_ROW)\r\n                        }\r\n                        isRowInserted && $row.addClass(ROW_INSERTED);\r\n                        isRowModified && $row.addClass(ROW_MODIFIED);\r\n                        if (isEditRow || isRowInserted || isRowRemoved) {\r\n                            $row.removeClass(ROW_SELECTED)\r\n                        }\r\n                        if (isEditRow && \"detail\" === row.rowType) {\r\n                            $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS))\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _getColumnIndexByElement: function($element) {\r\n                    var $tableElement = $element.closest(\"table\");\r\n                    var $tableElements = this.getTableElements();\r\n                    while ($tableElement.length && !$tableElements.filter($tableElement).length) {\r\n                        $element = $tableElement.closest(\"td\");\r\n                        $tableElement = $element.closest(\"table\")\r\n                    }\r\n                    return this._getColumnIndexByElementCore($element)\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $targetElement = $element.closest(\".\" + ROW_CLASS + \"> td:not(.dx-master-detail-cell)\");\r\n                    return this.getCellIndex($targetElement)\r\n                },\r\n                _editCellByClick: function(e, eventName) {\r\n                    var that = this;\r\n                    var editingController = that._editingController;\r\n                    var $targetElement = (0, _renderer.default)(e.event.target);\r\n                    var columnIndex = that._getColumnIndexByElement($targetElement);\r\n                    var row = that._dataController.items()[e.rowIndex];\r\n                    var allowUpdating = editingController.allowUpdating({\r\n                        row: row\r\n                    }, eventName) || row && row.isNewRow;\r\n                    var column = that._columnsController.getVisibleColumns()[columnIndex];\r\n                    var allowEditing = allowUpdating && column && (column.allowEditing || editingController.isEditCell(e.rowIndex, columnIndex));\r\n                    var startEditAction = that.option(\"editing.startEditAction\") || \"click\";\r\n                    if (\"down\" === eventName) {\r\n                        return column && column.showEditorAlways && allowEditing && editingController.editCell(e.rowIndex, columnIndex)\r\n                    }\r\n                    if (\"click\" === eventName && \"dblClick\" === startEditAction && !editingController.isEditCell(e.rowIndex, columnIndex)) {\r\n                        editingController.closeEditCell()\r\n                    }\r\n                    if (allowEditing && eventName === startEditAction) {\r\n                        return editingController.editCell(e.rowIndex, columnIndex) || editingController.isEditRow(e.rowIndex)\r\n                    }\r\n                },\r\n                _rowPointerDown: function(e) {\r\n                    var _this24 = this;\r\n                    this._pointerDownTimeout = setTimeout(function() {\r\n                        _this24._editCellByClick(e, \"down\")\r\n                    })\r\n                },\r\n                _rowClick: function(e) {\r\n                    var isEditForm = (0, _renderer.default)(e.rowElement).hasClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\r\n                    e.event[TARGET_COMPONENT_NAME] = this.component;\r\n                    if (!this._editCellByClick(e, \"click\") && !isEditForm) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _rowDblClick: function(e) {\r\n                    if (!this._editCellByClick(e, \"dblClick\")) {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, parameters) {\r\n                    var editingController = this._editingController;\r\n                    var isCommandCell = !!parameters.column.command;\r\n                    var isEditableCell = parameters.setValue;\r\n                    var isEditRow = editingController.isEditRow(parameters.rowIndex);\r\n                    var isEditing = isEditingCell(isEditRow, parameters);\r\n                    if (isEditingOrShowEditorAlwaysDataCell(isEditRow, parameters)) {\r\n                        var alignment = parameters.column.alignment;\r\n                        $cell.toggleClass(this.addWidgetPrefix(READONLY_CLASS), !isEditableCell).toggleClass(CELL_FOCUS_DISABLED_CLASS, !isEditableCell);\r\n                        if (alignment) {\r\n                            $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", alignment)\r\n                        }\r\n                    }\r\n                    if (isEditing) {\r\n                        this._editCellPrepared($cell)\r\n                    }\r\n                    if (parameters.column && !isCommandCell) {\r\n                        editingController.highlightDataCell($cell, parameters)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editCellPrepared: function($cell) {},\r\n                _formItemPrepared: function() {},\r\n                _isFormItem: function(parameters) {\r\n                    var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\r\n                    var isPopupEditing = \"data\" === parameters.rowType && \"popup\" === _getEditMode(this);\r\n                    return (isDetailRow || isPopupEditing) && parameters.item\r\n                },\r\n                _updateCell: function($cell, parameters) {\r\n                    if (this._isFormItem(parameters)) {\r\n                        this._formItemPrepared(parameters, $cell)\r\n                    } else {\r\n                        this.callBase($cell, parameters)\r\n                    }\r\n                },\r\n                _update: function(change) {\r\n                    this.callBase(change);\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED)\r\n                    }\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var cellOptions = this.callBase(options);\r\n                    cellOptions.isEditing = this._editingController.isEditCell(cellOptions.rowIndex, cellOptions.columnIndex);\r\n                    return cellOptions\r\n                },\r\n                _createCell: function(options) {\r\n                    var $cell = this.callBase(options);\r\n                    var isEditRow = this._editingController.isEditRow(options.rowIndex);\r\n                    isEditingOrShowEditorAlwaysDataCell(isEditRow, options) && $cell.addClass(EDITOR_CELL_CLASS);\r\n                    return $cell\r\n                },\r\n                _renderCellContent: function($cell, options) {\r\n                    if (\"data\" === options.rowType && _getEditMode(this) === EDIT_MODE_POPUP && false === options.row.visible) {\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                cellValue: function(rowIndex, columnIdentifier, value, text) {\r\n                    var cellOptions = this.getCellOptions(rowIndex, columnIdentifier);\r\n                    if (cellOptions) {\r\n                        if (void 0 === value) {\r\n                            return cellOptions.value\r\n                        } else {\r\n                            this._editingController.updateFieldValue(cellOptions, value, text, true)\r\n                        }\r\n                    }\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._pointerDownTimeout)\r\n                },\r\n                _renderCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._editingController._focusEditorIfNeed()\r\n                }\r\n            },\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var editButtonItems = this.getController(\"editing\").prepareEditButtons(this);\r\n                    return editButtonItems.concat(items)\r\n                },\r\n                optionChanged: function(args) {\r\n                    var fullName = args.fullName;\r\n                    switch (args.name) {\r\n                        case \"editing\":\r\n                            var excludedOptions = [EDITING_POPUP_OPTION_NAME, EDITING_CHANGES_OPTION_NAME, EDITING_EDITCOLUMNNAME_OPTION_NAME, EDITING_EDITROWKEY_OPTION_NAME];\r\n                            var shouldInvalidate = fullName && !excludedOptions.some(function(optionName) {\r\n                                return optionName === fullName\r\n                            });\r\n                            shouldInvalidate && this._invalidate();\r\n                            this.callBase(args);\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                isVisible: function() {\r\n                    var that = this;\r\n                    var editingOptions = that.getController(\"editing\").option(\"editing\");\r\n                    return that.callBase() || editingOptions && (editingOptions.allowAdding || (editingOptions.allowUpdating || editingOptions.allowDeleting) && editingOptions.mode === EDIT_MODE_BATCH)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}