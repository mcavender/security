{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/array_compare.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.findChanges = exports.isKeysEqual = void 0;\n\nvar _type = require(\"./type\");\n\nvar getKeyWrapper = function (item, getKey) {\n  var key = getKey(item);\n\n  if ((0, _type.isObject)(key)) {\n    try {\n      return JSON.stringify(key);\n    } catch (e) {\n      return key;\n    }\n  }\n\n  return key;\n};\n\nvar getSameNewByOld = function (oldItem, newItems, newIndexByKey, getKey) {\n  var key = getKeyWrapper(oldItem, getKey);\n  return newItems[newIndexByKey[key]];\n};\n\nvar isKeysEqual = function (oldKeys, newKeys) {\n  if (oldKeys.length !== newKeys.length) {\n    return false;\n  }\n\n  for (var i = 0; i < newKeys.length; i++) {\n    if (oldKeys[i] !== newKeys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexports.isKeysEqual = isKeysEqual;\n\nvar findChanges = function (oldItems, newItems, getKey, isItemEquals) {\n  var oldIndexByKey = {};\n  var newIndexByKey = {};\n  var addedCount = 0;\n  var removeCount = 0;\n  var result = [];\n  oldItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    oldIndexByKey[key] = index;\n  });\n  newItems.forEach(function (item, index) {\n    var key = getKeyWrapper(item, getKey);\n    newIndexByKey[key] = index;\n  });\n  var itemCount = Math.max(oldItems.length, newItems.length);\n\n  for (var index = 0; index < itemCount + addedCount; index++) {\n    var newItem = newItems[index];\n    var oldNextIndex = index - addedCount + removeCount;\n    var nextOldItem = oldItems[oldNextIndex];\n    var isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);\n\n    if (isRemoved) {\n      if (nextOldItem) {\n        result.push({\n          type: \"remove\",\n          key: getKey(nextOldItem),\n          index: index,\n          oldItem: nextOldItem\n        });\n        removeCount++;\n        index--;\n      }\n    } else {\n      var key = getKeyWrapper(newItem, getKey);\n      var oldIndex = oldIndexByKey[key];\n      var oldItem = oldItems[oldIndex];\n\n      if (!oldItem) {\n        addedCount++;\n        result.push({\n          type: \"insert\",\n          data: newItem,\n          index: index\n        });\n      } else {\n        if (oldIndex === oldNextIndex) {\n          if (!isItemEquals(oldItem, newItem)) {\n            result.push({\n              type: \"update\",\n              data: newItem,\n              key: getKey(newItem),\n              index: index,\n              oldItem: oldItem\n            });\n          }\n        } else {\n          return;\n        }\n      }\n    }\n  }\n\n  return result;\n};\n\nexports.findChanges = findChanges;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/core/utils/array_compare.js"],"names":["exports","findChanges","isKeysEqual","_type","require","getKeyWrapper","item","getKey","key","isObject","JSON","stringify","e","getSameNewByOld","oldItem","newItems","newIndexByKey","oldKeys","newKeys","length","i","oldItems","isItemEquals","oldIndexByKey","addedCount","removeCount","result","forEach","index","itemCount","Math","max","newItem","oldNextIndex","nextOldItem","isRemoved","push","type","oldIndex","data"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/array_compare.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.findChanges = exports.isKeysEqual = void 0;\r\nvar _type = require(\"./type\");\r\nvar getKeyWrapper = function(item, getKey) {\r\n    var key = getKey(item);\r\n    if ((0, _type.isObject)(key)) {\r\n        try {\r\n            return JSON.stringify(key)\r\n        } catch (e) {\r\n            return key\r\n        }\r\n    }\r\n    return key\r\n};\r\nvar getSameNewByOld = function(oldItem, newItems, newIndexByKey, getKey) {\r\n    var key = getKeyWrapper(oldItem, getKey);\r\n    return newItems[newIndexByKey[key]]\r\n};\r\nvar isKeysEqual = function(oldKeys, newKeys) {\r\n    if (oldKeys.length !== newKeys.length) {\r\n        return false\r\n    }\r\n    for (var i = 0; i < newKeys.length; i++) {\r\n        if (oldKeys[i] !== newKeys[i]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n};\r\nexports.isKeysEqual = isKeysEqual;\r\nvar findChanges = function(oldItems, newItems, getKey, isItemEquals) {\r\n    var oldIndexByKey = {};\r\n    var newIndexByKey = {};\r\n    var addedCount = 0;\r\n    var removeCount = 0;\r\n    var result = [];\r\n    oldItems.forEach(function(item, index) {\r\n        var key = getKeyWrapper(item, getKey);\r\n        oldIndexByKey[key] = index\r\n    });\r\n    newItems.forEach(function(item, index) {\r\n        var key = getKeyWrapper(item, getKey);\r\n        newIndexByKey[key] = index\r\n    });\r\n    var itemCount = Math.max(oldItems.length, newItems.length);\r\n    for (var index = 0; index < itemCount + addedCount; index++) {\r\n        var newItem = newItems[index];\r\n        var oldNextIndex = index - addedCount + removeCount;\r\n        var nextOldItem = oldItems[oldNextIndex];\r\n        var isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);\r\n        if (isRemoved) {\r\n            if (nextOldItem) {\r\n                result.push({\r\n                    type: \"remove\",\r\n                    key: getKey(nextOldItem),\r\n                    index: index,\r\n                    oldItem: nextOldItem\r\n                });\r\n                removeCount++;\r\n                index--\r\n            }\r\n        } else {\r\n            var key = getKeyWrapper(newItem, getKey);\r\n            var oldIndex = oldIndexByKey[key];\r\n            var oldItem = oldItems[oldIndex];\r\n            if (!oldItem) {\r\n                addedCount++;\r\n                result.push({\r\n                    type: \"insert\",\r\n                    data: newItem,\r\n                    index: index\r\n                })\r\n            } else {\r\n                if (oldIndex === oldNextIndex) {\r\n                    if (!isItemEquals(oldItem, newItem)) {\r\n                        result.push({\r\n                            type: \"update\",\r\n                            data: newItem,\r\n                            key: getKey(newItem),\r\n                            index: index,\r\n                            oldItem: oldItem\r\n                        })\r\n                    }\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nexports.findChanges = findChanges;\r\n"]},"metadata":{},"sourceType":"script"}