{"ast":null,"code":"/*\r\n\r\nThis is a wrapper around the axios library.  It creates\r\na CRUD RESTful interface for a resource.  In order to use\r\nit, you first instantiate it with the baseURL that you\r\nare using.  In our case, it will just be http://localhost:8080.\r\nWhen you want to use it to perform CRUD on an operation,\r\nyou call userApi = api.creteEntity(\"user\") to access calls on \r\nhttp://localhost:8080/user.  It can be reused by just  calling\r\ncreateEntity on another resource, such as \r\ncarApi = api.createEntity(\"car\") to get the car resource\r\nat http://localhost:8080/car.\r\n*/\nimport axios from 'axios';\nexport class API {\n  constructor(url) {\n    this.url = url;\n    this.endpoints = {};\n    this.headers = {\n      \"Content-type\": \"application/json\"\n    };\n  }\n\n  createEntity(entity) {\n    this.endpoints[entity.name] = this.createBasicCRUDEndpoints(entity);\n  }\n\n  createEntities(arrayOfEntity) {\n    arrayOfEntity.forEach(this.createEntity.bind(this));\n  }\n\n  createBasicCRUDEndpoints({\n    name\n  }) {\n    var endpoints = {};\n    const resourceURL = this.url + '/' + name;\n\n    endpoints.getAll = () => axios.get(resourceURL, this.headers);\n\n    endpoints.getOne = ({\n      id\n    }) => axios.get(`${resourceURL}/${id}`, this.headers);\n\n    endpoints.create = toCreate => axios.post(resourceURL, toCreate, this.headers);\n\n    endpoints.update = toUpdate => axios.put(`${resourceURL}/${toUpdate.id}`, toUpdate);\n\n    endpoints.delete = id => axios.delete(`${resourceURL}/${id}`, this.headers);\n\n    return endpoints;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/AdminApp/src/services/API.js"],"names":["axios","API","constructor","url","endpoints","headers","createEntity","entity","name","createBasicCRUDEndpoints","createEntities","arrayOfEntity","forEach","bind","resourceURL","getAll","get","getOne","id","create","toCreate","post","update","toUpdate","put","delete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,GAAN,CAAU;AAEbC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAc;AACV,sBAAgB;AADN,KAAd;AAGH;;AAEDC,EAAAA,YAAY,CAACC,MAAD,EAAS;AACjB,SAAKH,SAAL,CAAeG,MAAM,CAACC,IAAtB,IAA8B,KAAKC,wBAAL,CAA8BF,MAA9B,CAA9B;AACH;;AAEDG,EAAAA,cAAc,CAACC,aAAD,EAAgB;AAC1BA,IAAAA,aAAa,CAACC,OAAd,CAAsB,KAAKN,YAAL,CAAkBO,IAAlB,CAAuB,IAAvB,CAAtB;AACH;;AAEDJ,EAAAA,wBAAwB,CAAE;AAACD,IAAAA;AAAD,GAAF,EAAU;AAC9B,QAAIJ,SAAS,GAAG,EAAhB;AAEA,UAAMU,WAAW,GAAG,KAAKX,GAAL,GAAW,GAAX,GAAiBK,IAArC;;AAEAJ,IAAAA,SAAS,CAACW,MAAV,GAAmB,MAAMf,KAAK,CAACgB,GAAN,CAAUF,WAAV,EAAuB,KAAKT,OAA5B,CAAzB;;AAEAD,IAAAA,SAAS,CAACa,MAAV,GAAmB,CAAE;AAACC,MAAAA;AAAD,KAAF,KAAWlB,KAAK,CAACgB,GAAN,CAAW,GAAEF,WAAY,IAAGI,EAAG,EAA/B,EAAiC,KAAKb,OAAtC,CAA9B;;AAEAD,IAAAA,SAAS,CAACe,MAAV,GAAoBC,QAAD,IAAcpB,KAAK,CAACqB,IAAN,CAAWP,WAAX,EAAwBM,QAAxB,EAAkC,KAAKf,OAAvC,CAAjC;;AAEAD,IAAAA,SAAS,CAACkB,MAAV,GAAoBC,QAAD,IAAcvB,KAAK,CAACwB,GAAN,CAAW,GAAEV,WAAY,IAAGS,QAAQ,CAACL,EAAG,EAAxC,EAA0CK,QAA1C,CAAjC;;AAEAnB,IAAAA,SAAS,CAACqB,MAAV,GAAoBP,EAAD,IAAQlB,KAAK,CAACyB,MAAN,CAAc,GAAEX,WAAY,IAAGI,EAAG,EAAlC,EAAqC,KAAKb,OAA1C,CAA3B;;AAEA,WAAOD,SAAP;AACH;;AAlCY","sourcesContent":["/*\r\n\r\nThis is a wrapper around the axios library.  It creates\r\na CRUD RESTful interface for a resource.  In order to use\r\nit, you first instantiate it with the baseURL that you\r\nare using.  In our case, it will just be http://localhost:8080.\r\nWhen you want to use it to perform CRUD on an operation,\r\nyou call userApi = api.creteEntity(\"user\") to access calls on \r\nhttp://localhost:8080/user.  It can be reused by just  calling\r\ncreateEntity on another resource, such as \r\ncarApi = api.createEntity(\"car\") to get the car resource\r\nat http://localhost:8080/car.\r\n*/\r\n\r\nimport axios from 'axios';\r\n\r\nexport class API {\r\n\r\n    constructor(url) {\r\n        this.url = url;\r\n        this.endpoints = {};\r\n        this.headers= {\r\n            \"Content-type\": \"application/json\"\r\n          }\r\n    }\r\n\r\n    createEntity(entity) {\r\n        this.endpoints[entity.name] = this.createBasicCRUDEndpoints(entity)\r\n    }\r\n\r\n    createEntities(arrayOfEntity) {\r\n        arrayOfEntity.forEach(this.createEntity.bind(this))\r\n    }\r\n\r\n    createBasicCRUDEndpoints( {name}) {\r\n        var endpoints = {}\r\n\r\n        const resourceURL = this.url + '/' + name;\r\n\r\n        endpoints.getAll = () => axios.get(resourceURL, this.headers)\r\n\r\n        endpoints.getOne = ( {id}) => axios.get(`${resourceURL}/${id}`,this.headers)\r\n   \r\n        endpoints.create = (toCreate) => axios.post(resourceURL, toCreate, this.headers)\r\n\r\n        endpoints.update = (toUpdate) => axios.put(`${resourceURL}/${toUpdate.id}`,toUpdate)\r\n\r\n        endpoints.delete = (id) => axios.delete(`${resourceURL}/${id}`, this.headers)\r\n\r\n        return endpoints\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}