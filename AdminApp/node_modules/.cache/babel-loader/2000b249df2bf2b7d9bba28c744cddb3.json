{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _uiGrid_core2 = require(\"./ui.grid_core.accessibility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar CELL_CONTENT_CLASS = \"text-content\";\nvar HEADERS_CLASS = \"headers\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar ROW_CLASS_SELECTOR = \".dx-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nvar _default = {\n  defaultOptions: function () {\n    return {\n      showColumnHeaders: true,\n      cellHintEnabled: true\n    };\n  },\n  views: {\n    columnHeadersView: _uiGrid_core.ColumnsView.inherit(function () {\n      var createCellContent = function (that, $cell, options) {\n        var $cellContent = (0, _renderer.default)(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        that.setAria(\"role\", \"presentation\", $cellContent);\n        addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n        var showColumnLines = that.option(\"showColumnLines\");\n        var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\n        return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell);\n      };\n\n      function addCssClassesToCellContent(that, $cell, column, $cellContent) {\n        var $indicatorElements = that._getIndicatorElements($cell, true);\n\n        var $visibleIndicatorElements = that._getIndicatorElements($cell);\n\n        var indicatorCount = $indicatorElements && $indicatorElements.length;\n\n        var columnAlignment = that._getColumnAlignment(column.alignment);\n\n        var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\n        var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\n        var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\n        var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\n        $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length);\n      }\n\n      return {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n\n          _events_engine.default.on($table, \"mousedown selectstart\", this.createAction(function (e) {\n            var event = e.event;\n\n            if (event.shiftKey) {\n              event.preventDefault();\n            }\n          }));\n\n          return $table;\n        },\n        _isLegacyKeyboardNavigation: function () {\n          return this.option(\"useLegacyKeyboardNavigation\");\n        },\n        _getDefaultTemplate: function (column) {\n          var that = this;\n          return function ($container, options) {\n            var $content = column.command ? $container : createCellContent(that, $container, options);\n            var caption = \"expand\" !== column.command && column.caption;\n\n            if (caption) {\n              $content.text(caption);\n            } else {\n              if (column.command) {\n                $container.html(\"&nbsp;\");\n              }\n            }\n          };\n        },\n        _getHeaderTemplate: function (column) {\n          return column.headerCellTemplate || {\n            allowRenderToDetachedContainer: true,\n            render: this._getDefaultTemplate(column)\n          };\n        },\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var column = options.column;\n          var renderingTemplate = that.callBase(template);\n\n          if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n            resultTemplate = {\n              render: function (options) {\n                var $content = createCellContent(that, options.container, options.model);\n                renderingTemplate.render((0, _extend.extend)({}, options, {\n                  container: $content\n                }));\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n\n          return resultTemplate;\n        },\n        _handleDataChanged: function (e) {\n          if (\"refresh\" !== e.changeType) {\n            return;\n          }\n\n          if (this._isGroupingChanged || this._requireReady) {\n            this._isGroupingChanged = false;\n            this.render();\n          }\n        },\n        _renderCell: function ($row, options) {\n          var $cell = this.callBase($row, options);\n\n          if (\"header\" === options.row.rowType) {\n            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              if (options.column && !options.column.type) {\n                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n              }\n            }\n          }\n\n          return $cell;\n        },\n        _setCellAriaAttributes: function ($cell, cellOptions) {\n          this.callBase($cell, cellOptions);\n\n          if (\"header\" === cellOptions.rowType) {\n            this.setAria(\"role\", \"columnheader\", $cell);\n\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n              $cell.attr(\"id\", cellOptions.column.headerId);\n              this.setAria(\"label\", _message.default.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell);\n            }\n          }\n        },\n        _createRow: function (row) {\n          var $row = this.callBase(row).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          if (\"header\" === row.rowType) {\n            $row.addClass(HEADER_ROW_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              (0, _uiGrid_core2.registerKeyboardAction)(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n            }\n          }\n\n          return $row;\n        },\n        _handleActionKeyDown: function (args) {\n          var event = args.event;\n          var $target = (0, _renderer.default)(event.target);\n          this._lastActionElement = event.target;\n\n          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n            var headerFilterController = this.getController(\"headerFilter\");\n            var $column = $target.closest(\"td\");\n            var columnIndex = this.getColumnIndexByElement($column);\n\n            if (columnIndex >= 0) {\n              headerFilterController.showHeaderFilterMenu(columnIndex, false);\n            }\n          } else {\n            var $row = $target.closest(ROW_CLASS_SELECTOR);\n\n            this._processHeaderAction(event, $row);\n          }\n\n          event.preventDefault();\n        },\n        _renderCore: function () {\n          var that = this;\n          var $container = that.element();\n\n          if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\n            return;\n          }\n\n          $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\n          that.setAria(\"role\", \"presentation\", $container);\n\n          that._updateContent(that._renderTable());\n\n          if (that.getRowCount() > 1) {\n            $container.addClass(MULTI_ROW_HEADER_CLASS);\n          }\n\n          that.callBase.apply(that, arguments);\n        },\n        _renderRows: function () {\n          var that = this;\n\n          if (that._dataController.isLoaded() || that._hasRowElements) {\n            that.callBase.apply(that, arguments);\n            that._hasRowElements = true;\n          }\n        },\n        _getRowVisibleColumns: function (rowIndex) {\n          return this._columnsController.getVisibleColumns(rowIndex);\n        },\n        _renderRow: function ($table, options) {\n          options.columns = this._getRowVisibleColumns(options.row.rowIndex);\n          this.callBase($table, options);\n        },\n        _createCell: function (options) {\n          var column = options.column;\n          var $cellElement = this.callBase.apply(this, arguments);\n          column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n          return $cellElement;\n        },\n        _getRows: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n\n          if (this.option(\"showColumnHeaders\")) {\n            for (var i = 0; i < rowCount; i++) {\n              result.push({\n                rowType: \"header\",\n                rowIndex: i\n              });\n            }\n          }\n\n          return result;\n        },\n        _getCellTemplate: function (options) {\n          if (\"header\" === options.rowType) {\n            return this._getHeaderTemplate(options.column);\n          }\n        },\n        _columnOptionChanged: function (e) {\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n\n          if (changeTypes.grouping) {\n            this._isGroupingChanged = true;\n            return;\n          }\n\n          this.callBase(e);\n\n          if (optionNames.width || optionNames.visible) {\n            this.resizeCompleted.fire();\n          }\n        },\n        _isElementVisible: function (elementOptions) {\n          return elementOptions && elementOptions.visible;\n        },\n        _alignCaptionByCenter: function ($cell) {\n          var $indicatorsContainer = this._getIndicatorContainer($cell, true);\n\n          if ($indicatorsContainer && $indicatorsContainer.length) {\n            $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\n            $indicatorsContainer = this._getIndicatorContainer($cell);\n            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)));\n          }\n        },\n        _updateCell: function ($cell, options) {\n          if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _updateIndicator: function ($cell, column, indicatorName) {\n          var $indicatorElement = this.callBase.apply(this, arguments);\n\n          if (\"center\" === column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          addCssClassesToCellContent(this, $cell, column);\n          return $indicatorElement;\n        },\n        _getIndicatorContainer: function ($cell, returnAll) {\n          var $indicatorsContainer = this.callBase($cell);\n          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\");\n        },\n        _isSortableElement: function () {\n          return true;\n        },\n        getHeadersRowHeight: function () {\n          var $tableElement = this.getTableElement();\n          var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\n          return $headerRows && $headerRows.toArray().reduce(function (sum, headerRow) {\n            return sum + (0, _renderer.default)(headerRow).height();\n          }, 0) || 0;\n        },\n        getHeaderElement: function (index) {\n          var columnElements = this.getColumnElements();\n          return columnElements && columnElements.eq(index);\n        },\n        getColumnElements: function (index, bandColumnIndex) {\n          var that = this;\n          var $cellElement;\n          var columnsController = that._columnsController;\n          var rowCount = that.getRowCount();\n\n          if (that.option(\"showColumnHeaders\")) {\n            if (rowCount > 1 && (!(0, _type.isDefined)(index) || (0, _type.isDefined)(bandColumnIndex))) {\n              var result = [];\n              var visibleColumns = (0, _type.isDefined)(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n              (0, _iterator.each)(visibleColumns, function (_, column) {\n                var rowIndex = (0, _type.isDefined)(index) ? index : columnsController.getRowIndex(column.index);\n                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n                $cellElement && result.push($cellElement.get(0));\n              });\n              return (0, _renderer.default)(result);\n            } else {\n              if (!index || index < rowCount) {\n                return that.getCellElements(index || 0);\n              }\n            }\n          }\n        },\n        getColumnIndexByElement: function ($cell) {\n          var cellIndex = this.getCellIndex($cell);\n          var $row = $cell.closest(\".dx-row\");\n          var rowIndex = $row[0].rowIndex;\n          var column = this.getColumns(rowIndex)[cellIndex];\n          return column ? column.index : -1;\n        },\n        getVisibleColumnIndex: function (columnIndex, rowIndex) {\n          var column = this.getColumns()[columnIndex];\n          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n        },\n        getColumnWidths: function () {\n          var $columnElements = this.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            return this._getWidths($columnElements);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        allowDragging: function (column, sourceLocation, draggingPanels) {\n          var i;\n          var draggableColumnCount = 0;\n\n          var rowIndex = column && this._columnsController.getRowIndex(column.index);\n\n          var columns = this.getColumns(0 === rowIndex ? 0 : null);\n          var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\n\n          var allowDrag = function (column) {\n            return column.allowReordering || column.allowGrouping || column.allowHiding;\n          };\n\n          for (i = 0; i < columns.length; i++) {\n            if (allowDrag(columns[i])) {\n              draggableColumnCount++;\n            }\n          }\n\n          if (draggableColumnCount <= 1 && !canHideColumn) {\n            return false;\n          } else {\n            if (!draggingPanels) {\n              return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering;\n            }\n          }\n\n          for (i = 0; i < draggingPanels.length; i++) {\n            var draggingPanel = draggingPanels[i];\n\n            if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        getBoundingRect: function () {\n          var that = this;\n          var $columnElements = that.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            var offset = that.getTableElement().offset();\n            return {\n              top: offset.top\n            };\n          }\n\n          return null;\n        },\n        getName: function () {\n          return \"headers\";\n        },\n        getColumnCount: function () {\n          var $columnElements = this.getColumnElements();\n          return $columnElements ? $columnElements.length : 0;\n        },\n        isVisible: function () {\n          return this.option(\"showColumnHeaders\");\n        },\n        optionChanged: function (args) {\n          var that = this;\n\n          switch (args.name) {\n            case \"showColumnHeaders\":\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n              that._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        getHeight: function () {\n          return this.getElementHeight();\n        },\n        getContextMenuItems: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n            var sortingOptions = that.option(\"sorting\");\n\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n              var onItemClick = function (params) {\n                setTimeout(function () {\n                  that._columnsController.changeSortOrder(column.index, params.itemData.value);\n                });\n              };\n\n              return [{\n                text: sortingOptions.ascendingText,\n                value: \"asc\",\n                disabled: \"asc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_ASC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.descendingText,\n                value: \"desc\",\n                disabled: \"desc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_DESC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.clearText,\n                value: \"none\",\n                disabled: !column.sortOrder,\n                icon: CONTEXT_MENU_SORT_NONE_ICON,\n                onItemClick: onItemClick\n              }];\n            }\n          }\n        },\n        getRowCount: function () {\n          return this._columnsController && this._columnsController.getRowCount();\n        },\n        setRowsOpacity: function (columnIndex, value, rowIndex) {\n          var that = this;\n          var i;\n          var columnElements;\n          var rowCount = that.getRowCount();\n\n          var columns = that._columnsController.getColumns();\n\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n\n          var setColumnOpacity = function (index, column) {\n            if (column.ownerBand === columnID) {\n              columnElements.eq(index).css({\n                opacity: value\n              });\n\n              if (column.isBand) {\n                that.setRowsOpacity(column.index, value, i + 1);\n              }\n            }\n          };\n\n          if ((0, _type.isDefined)(columnID)) {\n            rowIndex = rowIndex || 0;\n\n            for (i = rowIndex; i < rowCount; i++) {\n              columnElements = that.getCellElements(i);\n              (0, _iterator.each)(that.getColumns(i), setColumnOpacity);\n            }\n          }\n        }\n      };\n    }())\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.column_headers.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_events_engine","_uiGrid_core","_message","_type","_iterator","_extend","_uiGrid_core2","obj","__esModule","CELL_CONTENT_CLASS","HEADERS_CLASS","NOWRAP_CLASS","ROW_CLASS_SELECTOR","HEADER_ROW_CLASS","COLUMN_LINES_CLASS","CONTEXT_MENU_SORT_ASC_ICON","CONTEXT_MENU_SORT_DESC_ICON","CONTEXT_MENU_SORT_NONE_ICON","CELL_FOCUS_DISABLED_CLASS","VISIBILITY_HIDDEN_CLASS","TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX","SORT_INDICATOR_CLASS","SORT_INDEX_INDICATOR_CLASS","HEADER_FILTER_CLASS_SELECTOR","HEADER_FILTER_INDICATOR_CLASS","MULTI_ROW_HEADER_CLASS","_default","defaultOptions","showColumnHeaders","cellHintEnabled","views","columnHeadersView","ColumnsView","inherit","createCellContent","that","$cell","options","$cellContent","addClass","addWidgetPrefix","setAria","addCssClassesToCellContent","column","showColumnLines","option","contentAlignment","getController","getHeaderContentAlignment","alignment","$indicatorElements","_getIndicatorElements","$visibleIndicatorElements","indicatorCount","length","columnAlignment","_getColumnAlignment","sortIndicatorClassName","concat","_getIndicatorClassName","sortIndexIndicatorClassName","$sortIndicator","filter","$sortIndexIndicator","children","toggleClass","_createTable","$table","callBase","apply","arguments","on","createAction","e","event","shiftKey","preventDefault","_isLegacyKeyboardNavigation","_getDefaultTemplate","$container","$content","command","caption","text","html","_getHeaderTemplate","headerCellTemplate","allowRenderToDetachedContainer","render","_processTemplate","template","resultTemplate","renderingTemplate","rowType","container","model","extend","_handleDataChanged","changeType","_isGroupingChanged","_requireReady","_renderCell","$row","row","type","attr","_setCellAriaAttributes","cellOptions","isBand","headerId","format","_createRow","registerKeyboardAction","_handleActionKeyDown","bind","args","$target","target","_lastActionElement","is","headerFilterController","$column","closest","columnIndex","getColumnIndexByElement","showHeaderFilterMenu","_processHeaderAction","_renderCore","element","_tableElement","_dataController","isLoaded","_hasRowElements","empty","_updateContent","_renderTable","getRowCount","_renderRows","_getRowVisibleColumns","rowIndex","_columnsController","getVisibleColumns","_renderRow","columns","_createCell","$cellElement","rowspan","_getRows","result","rowCount","i","push","_getCellTemplate","_columnOptionChanged","changeTypes","optionNames","grouping","width","visible","resizeCompleted","fire","_isElementVisible","elementOptions","_alignCaptionByCenter","$indicatorsContainer","_getIndicatorContainer","remove","clone","css","insertBefore","_updateCell","_updateIndicator","indicatorName","$indicatorElement","returnAll","_isSortableElement","getHeadersRowHeight","$tableElement","getTableElement","$headerRows","find","toArray","reduce","sum","headerRow","height","getHeaderElement","index","columnElements","getColumnElements","eq","bandColumnIndex","columnsController","isDefined","visibleColumns","getChildrenByBandColumn","each","_","getRowIndex","_getCellElement","getVisibleIndex","get","getCellElements","cellIndex","getCellIndex","getColumns","getVisibleColumnIndex","getColumnWidths","$columnElements","_getWidths","allowDragging","sourceLocation","draggingPanels","draggableColumnCount","canHideColumn","allowHiding","allowDrag","allowReordering","allowGrouping","isColumnOptionUsed","draggingPanel","getBoundingRect","offset","top","getName","getColumnCount","isVisible","optionChanged","name","_invalidate","handled","getHeight","getElementHeight","getContextMenuItems","sortingOptions","mode","allowSorting","onItemClick","params","setTimeout","changeSortOrder","itemData","value","ascendingText","disabled","sortOrder","icon","descendingText","clearText","setRowsOpacity","columnID","setColumnOpacity","ownerBand","opacity","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _uiGrid_core = require(\"./ui.grid_core.columns_view\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _uiGrid_core2 = require(\"./ui.grid_core.accessibility\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar CELL_CONTENT_CLASS = \"text-content\";\r\nvar HEADERS_CLASS = \"headers\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar ROW_CLASS_SELECTOR = \".dx-row\";\r\nvar HEADER_ROW_CLASS = \"dx-header-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\r\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\r\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\r\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\r\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\r\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\r\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\r\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showColumnHeaders: true,\r\n            cellHintEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        columnHeadersView: _uiGrid_core.ColumnsView.inherit(function() {\r\n            var createCellContent = function(that, $cell, options) {\r\n                var $cellContent = (0, _renderer.default)(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                that.setAria(\"role\", \"presentation\", $cellContent);\r\n                addCssClassesToCellContent(that, $cell, options.column, $cellContent);\r\n                var showColumnLines = that.option(\"showColumnLines\");\r\n                var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\r\n                return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell)\r\n            };\r\n\r\n            function addCssClassesToCellContent(that, $cell, column, $cellContent) {\r\n                var $indicatorElements = that._getIndicatorElements($cell, true);\r\n                var $visibleIndicatorElements = that._getIndicatorElements($cell);\r\n                var indicatorCount = $indicatorElements && $indicatorElements.length;\r\n                var columnAlignment = that._getColumnAlignment(column.alignment);\r\n                var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\r\n                var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\r\n                var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\r\n                var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\r\n                $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length)\r\n            }\r\n            return {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    _events_engine.default.on($table, \"mousedown selectstart\", this.createAction(function(e) {\r\n                        var event = e.event;\r\n                        if (event.shiftKey) {\r\n                            event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return $table\r\n                },\r\n                _isLegacyKeyboardNavigation: function() {\r\n                    return this.option(\"useLegacyKeyboardNavigation\")\r\n                },\r\n                _getDefaultTemplate: function(column) {\r\n                    var that = this;\r\n                    return function($container, options) {\r\n                        var $content = column.command ? $container : createCellContent(that, $container, options);\r\n                        var caption = \"expand\" !== column.command && column.caption;\r\n                        if (caption) {\r\n                            $content.text(caption)\r\n                        } else {\r\n                            if (column.command) {\r\n                                $container.html(\"&nbsp;\")\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _getHeaderTemplate: function(column) {\r\n                    return column.headerCellTemplate || {\r\n                        allowRenderToDetachedContainer: true,\r\n                        render: this._getDefaultTemplate(column)\r\n                    }\r\n                },\r\n                _processTemplate: function(template, options) {\r\n                    var that = this;\r\n                    var resultTemplate;\r\n                    var column = options.column;\r\n                    var renderingTemplate = that.callBase(template);\r\n                    if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\r\n                        resultTemplate = {\r\n                            render: function(options) {\r\n                                var $content = createCellContent(that, options.container, options.model);\r\n                                renderingTemplate.render((0, _extend.extend)({}, options, {\r\n                                    container: $content\r\n                                }))\r\n                            }\r\n                        }\r\n                    } else {\r\n                        resultTemplate = renderingTemplate\r\n                    }\r\n                    return resultTemplate\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    if (\"refresh\" !== e.changeType) {\r\n                        return\r\n                    }\r\n                    if (this._isGroupingChanged || this._requireReady) {\r\n                        this._isGroupingChanged = false;\r\n                        this.render()\r\n                    }\r\n                },\r\n                _renderCell: function($row, options) {\r\n                    var $cell = this.callBase($row, options);\r\n                    if (\"header\" === options.row.rowType) {\r\n                        $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            if (options.column && !options.column.type) {\r\n                                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0)\r\n                            }\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _setCellAriaAttributes: function($cell, cellOptions) {\r\n                    this.callBase($cell, cellOptions);\r\n                    if (\"header\" === cellOptions.rowType) {\r\n                        this.setAria(\"role\", \"columnheader\", $cell);\r\n                        if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\r\n                            $cell.attr(\"id\", cellOptions.column.headerId);\r\n                            this.setAria(\"label\", _message.default.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell)\r\n                        }\r\n                    }\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase(row).toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    if (\"header\" === row.rowType) {\r\n                        $row.addClass(HEADER_ROW_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            (0, _uiGrid_core2.registerKeyboardAction)(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this))\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _handleActionKeyDown: function(args) {\r\n                    var event = args.event;\r\n                    var $target = (0, _renderer.default)(event.target);\r\n                    this._lastActionElement = event.target;\r\n                    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\r\n                        var headerFilterController = this.getController(\"headerFilter\");\r\n                        var $column = $target.closest(\"td\");\r\n                        var columnIndex = this.getColumnIndexByElement($column);\r\n                        if (columnIndex >= 0) {\r\n                            headerFilterController.showHeaderFilterMenu(columnIndex, false)\r\n                        }\r\n                    } else {\r\n                        var $row = $target.closest(ROW_CLASS_SELECTOR);\r\n                        this._processHeaderAction(event, $row)\r\n                    }\r\n                    event.preventDefault()\r\n                },\r\n                _renderCore: function() {\r\n                    var that = this;\r\n                    var $container = that.element();\r\n                    if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\r\n                        return\r\n                    }\r\n                    $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\r\n                    that.setAria(\"role\", \"presentation\", $container);\r\n                    that._updateContent(that._renderTable());\r\n                    if (that.getRowCount() > 1) {\r\n                        $container.addClass(MULTI_ROW_HEADER_CLASS)\r\n                    }\r\n                    that.callBase.apply(that, arguments)\r\n                },\r\n                _renderRows: function() {\r\n                    var that = this;\r\n                    if (that._dataController.isLoaded() || that._hasRowElements) {\r\n                        that.callBase.apply(that, arguments);\r\n                        that._hasRowElements = true\r\n                    }\r\n                },\r\n                _getRowVisibleColumns: function(rowIndex) {\r\n                    return this._columnsController.getVisibleColumns(rowIndex)\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    options.columns = this._getRowVisibleColumns(options.row.rowIndex);\r\n                    this.callBase($table, options)\r\n                },\r\n                _createCell: function(options) {\r\n                    var column = options.column;\r\n                    var $cellElement = this.callBase.apply(this, arguments);\r\n                    column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\r\n                    return $cellElement\r\n                },\r\n                _getRows: function() {\r\n                    var result = [];\r\n                    var rowCount = this.getRowCount();\r\n                    if (this.option(\"showColumnHeaders\")) {\r\n                        for (var i = 0; i < rowCount; i++) {\r\n                            result.push({\r\n                                rowType: \"header\",\r\n                                rowIndex: i\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    if (\"header\" === options.rowType) {\r\n                        return this._getHeaderTemplate(options.column)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    if (changeTypes.grouping) {\r\n                        this._isGroupingChanged = true;\r\n                        return\r\n                    }\r\n                    this.callBase(e);\r\n                    if (optionNames.width || optionNames.visible) {\r\n                        this.resizeCompleted.fire()\r\n                    }\r\n                },\r\n                _isElementVisible: function(elementOptions) {\r\n                    return elementOptions && elementOptions.visible\r\n                },\r\n                _alignCaptionByCenter: function($cell) {\r\n                    var $indicatorsContainer = this._getIndicatorContainer($cell, true);\r\n                    if ($indicatorsContainer && $indicatorsContainer.length) {\r\n                        $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\r\n                        $indicatorsContainer = this._getIndicatorContainer($cell);\r\n                        $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)))\r\n                    }\r\n                },\r\n                _updateCell: function($cell, options) {\r\n                    if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _updateIndicator: function($cell, column, indicatorName) {\r\n                    var $indicatorElement = this.callBase.apply(this, arguments);\r\n                    if (\"center\" === column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    addCssClassesToCellContent(this, $cell, column);\r\n                    return $indicatorElement\r\n                },\r\n                _getIndicatorContainer: function($cell, returnAll) {\r\n                    var $indicatorsContainer = this.callBase($cell);\r\n                    return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\")\r\n                },\r\n                _isSortableElement: function() {\r\n                    return true\r\n                },\r\n                getHeadersRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\r\n                    return $headerRows && $headerRows.toArray().reduce(function(sum, headerRow) {\r\n                        return sum + (0, _renderer.default)(headerRow).height()\r\n                    }, 0) || 0\r\n                },\r\n                getHeaderElement: function(index) {\r\n                    var columnElements = this.getColumnElements();\r\n                    return columnElements && columnElements.eq(index)\r\n                },\r\n                getColumnElements: function(index, bandColumnIndex) {\r\n                    var that = this;\r\n                    var $cellElement;\r\n                    var columnsController = that._columnsController;\r\n                    var rowCount = that.getRowCount();\r\n                    if (that.option(\"showColumnHeaders\")) {\r\n                        if (rowCount > 1 && (!(0, _type.isDefined)(index) || (0, _type.isDefined)(bandColumnIndex))) {\r\n                            var result = [];\r\n                            var visibleColumns = (0, _type.isDefined)(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\r\n                            (0, _iterator.each)(visibleColumns, function(_, column) {\r\n                                var rowIndex = (0, _type.isDefined)(index) ? index : columnsController.getRowIndex(column.index);\r\n                                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\r\n                                $cellElement && result.push($cellElement.get(0))\r\n                            });\r\n                            return (0, _renderer.default)(result)\r\n                        } else {\r\n                            if (!index || index < rowCount) {\r\n                                return that.getCellElements(index || 0)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                getColumnIndexByElement: function($cell) {\r\n                    var cellIndex = this.getCellIndex($cell);\r\n                    var $row = $cell.closest(\".dx-row\");\r\n                    var rowIndex = $row[0].rowIndex;\r\n                    var column = this.getColumns(rowIndex)[cellIndex];\r\n                    return column ? column.index : -1\r\n                },\r\n                getVisibleColumnIndex: function(columnIndex, rowIndex) {\r\n                    var column = this.getColumns()[columnIndex];\r\n                    return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1\r\n                },\r\n                getColumnWidths: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        return this._getWidths($columnElements)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                allowDragging: function(column, sourceLocation, draggingPanels) {\r\n                    var i;\r\n                    var draggableColumnCount = 0;\r\n                    var rowIndex = column && this._columnsController.getRowIndex(column.index);\r\n                    var columns = this.getColumns(0 === rowIndex ? 0 : null);\r\n                    var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\r\n                    var allowDrag = function(column) {\r\n                        return column.allowReordering || column.allowGrouping || column.allowHiding\r\n                    };\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        if (allowDrag(columns[i])) {\r\n                            draggableColumnCount++\r\n                        }\r\n                    }\r\n                    if (draggableColumnCount <= 1 && !canHideColumn) {\r\n                        return false\r\n                    } else {\r\n                        if (!draggingPanels) {\r\n                            return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering\r\n                        }\r\n                    }\r\n                    for (i = 0; i < draggingPanels.length; i++) {\r\n                        var draggingPanel = draggingPanels[i];\r\n                        if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                getBoundingRect: function() {\r\n                    var that = this;\r\n                    var $columnElements = that.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        var offset = that.getTableElement().offset();\r\n                        return {\r\n                            top: offset.top\r\n                        }\r\n                    }\r\n                    return null\r\n                },\r\n                getName: function() {\r\n                    return \"headers\"\r\n                },\r\n                getColumnCount: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    return $columnElements ? $columnElements.length : 0\r\n                },\r\n                isVisible: function() {\r\n                    return this.option(\"showColumnHeaders\")\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    switch (args.name) {\r\n                        case \"showColumnHeaders\":\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                            that._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                getHeight: function() {\r\n                    return this.getElementHeight()\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n                        var sortingOptions = that.option(\"sorting\");\r\n                        if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\r\n                            var onItemClick = function(params) {\r\n                                setTimeout(function() {\r\n                                    that._columnsController.changeSortOrder(column.index, params.itemData.value)\r\n                                })\r\n                            };\r\n                            return [{\r\n                                text: sortingOptions.ascendingText,\r\n                                value: \"asc\",\r\n                                disabled: \"asc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_ASC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.descendingText,\r\n                                value: \"desc\",\r\n                                disabled: \"desc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_DESC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.clearText,\r\n                                value: \"none\",\r\n                                disabled: !column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_NONE_ICON,\r\n                                onItemClick: onItemClick\r\n                            }]\r\n                        }\r\n                    }\r\n                },\r\n                getRowCount: function() {\r\n                    return this._columnsController && this._columnsController.getRowCount()\r\n                },\r\n                setRowsOpacity: function(columnIndex, value, rowIndex) {\r\n                    var that = this;\r\n                    var i;\r\n                    var columnElements;\r\n                    var rowCount = that.getRowCount();\r\n                    var columns = that._columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    var setColumnOpacity = function(index, column) {\r\n                        if (column.ownerBand === columnID) {\r\n                            columnElements.eq(index).css({\r\n                                opacity: value\r\n                            });\r\n                            if (column.isBand) {\r\n                                that.setRowsOpacity(column.index, value, i + 1)\r\n                            }\r\n                        }\r\n                    };\r\n                    if ((0, _type.isDefined)(columnID)) {\r\n                        rowIndex = rowIndex || 0;\r\n                        for (i = rowIndex; i < rowCount; i++) {\r\n                            columnElements = that.getCellElements(i);\r\n                            (0, _iterator.each)(that.getColumns(i), setColumnOpacity)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }())\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}