{"ast":null,"code":"/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.GroupingHeaderPanelExtender = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _uiData_grid = _interopRequireDefault(require(\"./ui.data_grid.core\"));\n\nvar _uiData_gridGrouping = require(\"./ui.data_grid.grouping.expanded\");\n\nvar _uiData_gridGrouping2 = require(\"./ui.data_grid.grouping.collapsed\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _uiData_grid2 = _interopRequireDefault(require(\"./ui.data_grid.data_source_adapter\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.accessibility\");\n\nvar _accessibility = require(\"../shared/accessibility\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\nvar DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\nvar DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nvar DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nvar DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\n\nvar GroupingDataSourceAdapterExtender = function () {\n  return {\n    init: function () {\n      this.callBase.apply(this, arguments);\n\n      this._initGroupingHelper();\n    },\n    _initGroupingHelper: function (options) {\n      var grouping = this._grouping;\n      var isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\n      var isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\n      var remoteOperations = options ? options.remoteOperations : this.remoteOperations();\n      var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n\n      if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n        if (!grouping || grouping instanceof _uiData_gridGrouping2.GroupingHelper) {\n          this._grouping = new _uiData_gridGrouping.GroupingHelper(this);\n        }\n      } else {\n        if (!grouping || grouping instanceof _uiData_gridGrouping.GroupingHelper) {\n          this._grouping = new _uiData_gridGrouping2.GroupingHelper(this);\n        }\n      }\n    },\n    totalItemsCount: function () {\n      var that = this;\n      var totalCount = that.callBase();\n      return totalCount > 0 && that._dataSource.group() && that._dataSource.requireTotalCount() ? totalCount + that._grouping.totalCountCorrection() : totalCount;\n    },\n    itemsCount: function () {\n      return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);\n    },\n    allowCollapseAll: function () {\n      return this._grouping.allowCollapseAll();\n    },\n    isGroupItemCountable: function (item) {\n      return this._grouping.isGroupItemCountable(item);\n    },\n    isRowExpanded: function (key) {\n      var groupInfo = this._grouping.findGroupInfo(key);\n\n      return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n    },\n    collapseAll: function (groupIndex) {\n      return this._collapseExpandAll(groupIndex, false);\n    },\n    expandAll: function (groupIndex) {\n      return this._collapseExpandAll(groupIndex, true);\n    },\n    _collapseExpandAll: function (groupIndex, isExpand) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var group = dataSource.group();\n\n      var groups = _uiData_grid.default.normalizeSortingInfo(group || []);\n\n      if (groups.length) {\n        for (var i = 0; i < groups.length; i++) {\n          if (void 0 === groupIndex || groupIndex === i) {\n            groups[i].isExpanded = isExpand;\n          } else {\n            if (group && group[i]) {\n              groups[i].isExpanded = group[i].isExpanded;\n            }\n          }\n        }\n\n        dataSource.group(groups);\n\n        that._grouping.foreachGroups(function (groupInfo, parents) {\n          if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n            groupInfo.isExpanded = isExpand;\n          }\n        }, false, true);\n\n        that.resetPagesCache();\n      }\n\n      return true;\n    },\n    refresh: function () {\n      this.callBase.apply(this, arguments);\n      return this._grouping.refresh.apply(this._grouping, arguments);\n    },\n    changeRowExpand: function (path) {\n      var that = this;\n      var dataSource = that._dataSource;\n\n      if (dataSource.group()) {\n        dataSource.beginLoading();\n\n        if (that._lastLoadOptions) {\n          that._lastLoadOptions.groupExpand = true;\n        }\n\n        return that._changeRowExpandCore(path).always(function () {\n          dataSource.endLoading();\n        });\n      }\n    },\n    _changeRowExpandCore: function (path) {\n      return this._grouping.changeRowExpand(path);\n    },\n    _hasGroupLevelsExpandState: function (group, isExpanded) {\n      if (group && Array.isArray(group)) {\n        for (var i = 0; i < group.length; i++) {\n          if (group[i].isExpanded === isExpanded) {\n            return true;\n          }\n        }\n      }\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var remoteOperations = options.remoteOperations;\n\n      if (options.storeLoadOptions.group) {\n        if (remoteOperations.grouping && !options.isCustomLoading) {\n          if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n            remoteOperations.paging = false;\n          }\n        }\n\n        if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n          remoteOperations.paging = false;\n        }\n      } else {\n        if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n          this.resetCache();\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataLoading: function (options) {\n      this.callBase(options);\n\n      this._initGroupingHelper(options);\n\n      return this._grouping.handleDataLoading(options);\n    },\n    _handleDataLoaded: function (options) {\n      return this._grouping.handleDataLoaded(options, this.callBase.bind(this));\n    },\n    _handleDataLoadedCore: function (options) {\n      return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));\n    }\n  };\n}();\n\n_uiData_grid2.default.extend(GroupingDataSourceAdapterExtender);\n\nvar GroupingDataControllerExtender = function () {\n  return {\n    init: function () {\n      var that = this;\n      that.callBase();\n      that.createAction(\"onRowExpanding\");\n      that.createAction(\"onRowExpanded\");\n      that.createAction(\"onRowCollapsing\");\n      that.createAction(\"onRowCollapsed\");\n    },\n    _beforeProcessItems: function (items) {\n      var groupColumns = this._columnsController.getGroupColumns();\n\n      items = this.callBase(items);\n\n      if (items.length && groupColumns.length) {\n        items = this._processGroupItems(items, groupColumns.length);\n      }\n\n      return items;\n    },\n    _processItem: function (item, options) {\n      if ((0, _type.isDefined)(item.groupIndex) && (0, _type.isString)(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n        item = this._processGroupItem(item, options);\n        options.dataIndex = 0;\n      } else {\n        item = this.callBase.apply(this, arguments);\n      }\n\n      return item;\n    },\n    _processGroupItem: function (item) {\n      return item;\n    },\n    _processGroupItems: function (items, groupsCount, options) {\n      var that = this;\n\n      var groupedColumns = that._columnsController.getGroupColumns();\n\n      var column = groupedColumns[groupedColumns.length - groupsCount];\n\n      if (!options) {\n        var scrollingMode = that.option(\"scrolling.mode\");\n        options = {\n          collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n          resultItems: [],\n          path: [],\n          values: []\n        };\n      }\n\n      var resultItems = options.resultItems;\n\n      if (options.data) {\n        if (options.collectContinuationItems || !options.data.isContinuation) {\n          resultItems.push({\n            rowType: \"group\",\n            data: options.data,\n            groupIndex: options.path.length - 1,\n            isExpanded: !!options.data.items,\n            key: options.path.slice(0),\n            values: options.values.slice(0)\n          });\n        }\n      }\n\n      if (items) {\n        if (0 === groupsCount) {\n          resultItems.push.apply(resultItems, items);\n        } else {\n          for (var i = 0; i < items.length; i++) {\n            var item = items[i];\n\n            if (item && \"items\" in item) {\n              options.data = item;\n              options.path.push(item.key);\n              options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n\n              that._processGroupItems(item.items, groupsCount - 1, options);\n\n              options.data = void 0;\n              options.path.pop();\n              options.values.pop();\n            } else {\n              resultItems.push(item);\n            }\n          }\n        }\n      }\n\n      return resultItems;\n    },\n    publicMethods: function () {\n      return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n    },\n    collapseAll: function (groupIndex) {\n      var dataSource = this._dataSource;\n\n      if (dataSource && dataSource.collapseAll(groupIndex)) {\n        dataSource.pageIndex(0);\n        dataSource.reload();\n      }\n    },\n    expandAll: function (groupIndex) {\n      var dataSource = this._dataSource;\n\n      if (dataSource && dataSource.expandAll(groupIndex)) {\n        dataSource.pageIndex(0);\n        dataSource.reload();\n      }\n    },\n    changeRowExpand: function (key) {\n      var that = this;\n      var expanded = that.isRowExpanded(key);\n      var args = {\n        key: key,\n        expanded: expanded\n      };\n      that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n\n      if (!args.cancel) {\n        return (0, _deferred.when)(that._changeRowExpandCore(key)).done(function () {\n          args.expanded = !expanded;\n          that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n        });\n      }\n\n      return new _deferred.Deferred().resolve();\n    },\n    _changeRowExpandCore: function (key) {\n      var that = this;\n      var dataSource = this._dataSource;\n      var d = new _deferred.Deferred();\n\n      if (!dataSource) {\n        d.resolve();\n      } else {\n        (0, _deferred.when)(dataSource.changeRowExpand(key)).done(function () {\n          that.load().done(d.resolve).fail(d.reject);\n        }).fail(d.reject);\n      }\n\n      return d;\n    },\n    isRowExpanded: function (key) {\n      var dataSource = this._dataSource;\n      return dataSource && dataSource.isRowExpanded(key);\n    },\n    expandRow: function (key) {\n      if (!this.isRowExpanded(key)) {\n        return this.changeRowExpand(key);\n      }\n\n      return new _deferred.Deferred().resolve();\n    },\n    collapseRow: function (key) {\n      if (this.isRowExpanded(key)) {\n        return this.changeRowExpand(key);\n      }\n\n      return new _deferred.Deferred().resolve();\n    },\n    optionChanged: function (args) {\n      if (\"grouping\" === args.name) {\n        args.name = \"dataSource\";\n      }\n\n      this.callBase(args);\n    }\n  };\n}();\n\nvar onGroupingMenuItemClick = function (column, params) {\n  var columnsController = this._columnsController;\n\n  switch (params.itemData.value) {\n    case \"group\":\n      var groups = columnsController._dataSource.group() || [];\n      columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n      break;\n\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\n\nvar GroupingHeaderPanelExtender = function () {\n  return {\n    _getToolbarItems: function () {\n      var items = this.callBase();\n      return this._appendGroupingItem(items);\n    },\n    _appendGroupingItem: function (items) {\n      var _this = this;\n\n      if (this._isGroupPanelVisible()) {\n        var isRendered = false;\n        var toolbarItem = {\n          template: function () {\n            var $groupPanel = (0, _renderer.default)(\"<div>\").addClass(DATAGRID_GROUP_PANEL_CLASS);\n\n            _this._updateGroupPanelContent($groupPanel);\n\n            (0, _uiGrid_core.registerKeyboardAction)(\"groupPanel\", _this, $groupPanel, void 0, _this._handleActionKeyDown.bind(_this));\n            return $groupPanel;\n          },\n          name: \"groupPanel\",\n          onItemRendered: function () {\n            isRendered && _this.renderCompleted.fire();\n            isRendered = true;\n          },\n          location: \"before\",\n          locateInMenu: \"never\",\n          sortIndex: 1\n        };\n        items.push(toolbarItem);\n      }\n\n      return items;\n    },\n    _handleActionKeyDown: function (args) {\n      var event = args.event;\n      var $target = (0, _renderer.default)(event.target);\n      var groupColumnIndex = $target.closest(\".\".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();\n\n      var column = this._columnsController.getGroupColumns()[groupColumnIndex];\n\n      var columnIndex = column && column.index;\n\n      if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n        this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true);\n      } else {\n        this._processGroupItemAction(columnIndex);\n      }\n\n      event.preventDefault();\n    },\n    _isGroupPanelVisible: function () {\n      var groupPanelOptions = this.option(\"groupPanel\");\n      var isVisible;\n\n      if (groupPanelOptions) {\n        isVisible = groupPanelOptions.visible;\n\n        if (\"auto\" === isVisible) {\n          isVisible = \"desktop\" === _devices.default.current().deviceType ? true : false;\n        }\n      }\n\n      return isVisible;\n    },\n    _renderGroupPanelItems: function ($groupPanel, groupColumns) {\n      var that = this;\n      $groupPanel.empty();\n      (0, _iterator.each)(groupColumns, function (index, groupColumn) {\n        that._createGroupPanelItem($groupPanel, groupColumn);\n      });\n      (0, _accessibility.restoreFocus)(this);\n    },\n    _createGroupPanelItem: function ($rootElement, groupColumn) {\n      var $groupPanelItem = (0, _renderer.default)(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n      (0, _accessibility.setTabIndex)(this, $groupPanelItem);\n      return $groupPanelItem;\n    },\n    _columnOptionChanged: function (e) {\n      if (!this._requireReady && !_uiData_grid.default.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n        var $toolbarElement = this.element();\n        var $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\n\n        if ($groupPanel && $groupPanel.length) {\n          this._updateGroupPanelContent($groupPanel);\n\n          this.renderCompleted.fire();\n        }\n      }\n\n      this.callBase();\n    },\n    _updateGroupPanelContent: function ($groupPanel) {\n      var that = this;\n      var groupColumns = that.getController(\"columns\").getGroupColumns();\n      var groupPanelOptions = that.option(\"groupPanel\");\n\n      that._renderGroupPanelItems($groupPanel, groupColumns);\n\n      if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n        (0, _renderer.default)(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n        $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\n        that.updateToolbarDimensions();\n      }\n    },\n    allowDragging: function (column) {\n      var groupPanelOptions = this.option(\"groupPanel\");\n      return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;\n    },\n    getColumnElements: function () {\n      var $element = this.element();\n      return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n    },\n    getColumns: function () {\n      return this.getController(\"columns\").getGroupColumns();\n    },\n    getBoundingRect: function () {\n      var that = this;\n      var $element = that.element();\n\n      if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\n        var offset = $element.offset();\n        return {\n          top: offset.top,\n          bottom: offset.top + $element.height()\n        };\n      }\n\n      return null;\n    },\n    getName: function () {\n      return \"group\";\n    },\n    getContextMenuItems: function (options) {\n      var that = this;\n      var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n      var $groupedColumnElement = (0, _renderer.default)(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n      var items;\n\n      if ($groupedColumnElement.length) {\n        options.column = $groupedColumnElement.data(\"columnData\");\n      }\n\n      if (contextMenuEnabled && options.column) {\n        var column = options.column;\n        var isGroupingAllowed = (0, _type.isDefined)(column.allowGrouping) ? column.allowGrouping : true;\n\n        if (isGroupingAllowed) {\n          var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;\n          var groupingTexts = that.option(\"grouping.texts\");\n          var onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = [{\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          }, {\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          }];\n        }\n      }\n\n      return items;\n    },\n    isVisible: function () {\n      return this.callBase() || this._isGroupPanelVisible();\n    },\n    optionChanged: function (args) {\n      if (\"groupPanel\" === args.name) {\n        this._invalidate();\n\n        args.handled = true;\n      } else {\n        this.callBase(args);\n      }\n    }\n  };\n}();\n\nexports.GroupingHeaderPanelExtender = GroupingHeaderPanelExtender;\n\nvar GroupingRowsViewExtender = function () {\n  return {\n    getContextMenuItems: function (options) {\n      var that = this;\n      var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n      var items;\n\n      if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n        var columnsController = that._columnsController;\n        var column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\n\n        if (column && column.allowGrouping) {\n          var groupingTexts = that.option(\"grouping.texts\");\n          var onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = [];\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            onItemClick: onItemClick\n          }, {\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          });\n        }\n      }\n\n      return items;\n    },\n    _rowClick: function (e) {\n      var that = this;\n      var expandMode = that.option(\"grouping.expandMode\");\n      var scrollingMode = that.option(\"scrolling.mode\");\n      var isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && (0, _renderer.default)(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length;\n      var isExpandButtonClicked = (0, _renderer.default)(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\n\n      if (isGroupRowStateChanged || isExpandButtonClicked) {\n        that._changeGroupRowState(e);\n      }\n\n      that.callBase(e);\n    },\n    _changeGroupRowState: function (e) {\n      var dataController = this.getController(\"data\");\n      var row = dataController.items()[e.rowIndex];\n\n      var allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\n\n      if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n        dataController.changeRowExpand(row.key, true);\n        e.event.preventDefault();\n        e.handled = true;\n      }\n    }\n  };\n}();\n\nvar columnHeadersViewExtender = function () {\n  return {\n    getContextMenuItems: function (options) {\n      var that = this;\n      var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\n      var items = that.callBase(options);\n\n      if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n        var column = options.column;\n\n        if (!column.command && (!(0, _type.isDefined)(column.allowGrouping) || column.allowGrouping)) {\n          var groupingTexts = that.option(\"grouping.texts\");\n          var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;\n          var onItemClick = onGroupingMenuItemClick.bind(that, column);\n          items = items || [];\n          items.push({\n            text: groupingTexts.groupByThisColumn,\n            value: \"group\",\n            beginGroup: true,\n            disabled: isColumnGrouped,\n            onItemClick: onItemClick\n          });\n\n          if (column.showWhenGrouped) {\n            items.push({\n              text: groupingTexts.ungroup,\n              value: \"ungroup\",\n              disabled: !isColumnGrouped,\n              onItemClick: onItemClick\n            });\n          }\n\n          items.push({\n            text: groupingTexts.ungroupAll,\n            value: \"ungroupAll\",\n            onItemClick: onItemClick\n          });\n        }\n      }\n\n      return items;\n    }\n  };\n}();\n\n_uiData_grid.default.registerModule(\"grouping\", {\n  defaultOptions: function () {\n    return {\n      grouping: {\n        autoExpandAll: true,\n        allowCollapsing: true,\n        contextMenuEnabled: false,\n        expandMode: \"buttonClick\",\n        texts: {\n          groupContinuesMessage: _message.default.format(\"dxDataGrid-groupContinuesMessage\"),\n          groupContinuedMessage: _message.default.format(\"dxDataGrid-groupContinuedMessage\"),\n          groupByThisColumn: _message.default.format(\"dxDataGrid-groupHeaderText\"),\n          ungroup: _message.default.format(\"dxDataGrid-ungroupHeaderText\"),\n          ungroupAll: _message.default.format(\"dxDataGrid-ungroupAllText\")\n        }\n      },\n      groupPanel: {\n        visible: false,\n        emptyPanelText: _message.default.format(\"dxDataGrid-groupPanelEmptyText\"),\n        allowColumnDragging: true\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: {\n        _getExpandColumnOptions: function () {\n          var options = this.callBase.apply(this, arguments);\n          options.cellTemplate = _uiData_grid.default.getExpandCellTemplate();\n          return options;\n        }\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/data_grid/ui.data_grid.grouping.js"],"names":["exports","GroupingHeaderPanelExtender","_renderer","_interopRequireDefault","require","_uiData_grid","_uiData_gridGrouping","_uiData_gridGrouping2","_message","_uiData_grid2","_type","_iterator","_devices","_deferred","_uiGrid_core","_accessibility","obj","__esModule","DATAGRID_GROUP_PANEL_CLASS","DATAGRID_GROUP_PANEL_MESSAGE_CLASS","DATAGRID_GROUP_PANEL_ITEM_CLASS","DATAGRID_GROUP_PANEL_LABEL_CLASS","DATAGRID_EXPAND_CLASS","DATAGRID_GROUP_ROW_CLASS","HEADER_FILTER_CLASS_SELECTOR","GroupingDataSourceAdapterExtender","init","callBase","apply","arguments","_initGroupingHelper","options","grouping","_grouping","isAutoExpandAll","option","isFocusedRowEnabled","remoteOperations","isODataRemoteOperations","filtering","sorting","paging","GroupingHelper","totalItemsCount","that","totalCount","_dataSource","group","requireTotalCount","totalCountCorrection","itemsCount","allowCollapseAll","isGroupItemCountable","item","isRowExpanded","key","groupInfo","findGroupInfo","isExpanded","collapseAll","groupIndex","_collapseExpandAll","expandAll","isExpand","dataSource","groups","default","normalizeSortingInfo","length","i","foreachGroups","parents","resetPagesCache","refresh","changeRowExpand","path","beginLoading","_lastLoadOptions","groupExpand","_changeRowExpandCore","always","endLoading","_hasGroupLevelsExpandState","Array","isArray","_customizeRemoteOperations","operationTypes","storeLoadOptions","isCustomLoading","groupPaging","resetCache","_handleDataLoading","handleDataLoading","_handleDataLoaded","handleDataLoaded","bind","_handleDataLoadedCore","handleDataLoadedCore","extend","GroupingDataControllerExtender","createAction","_beforeProcessItems","items","groupColumns","_columnsController","getGroupColumns","_processGroupItems","_processItem","isDefined","isString","rowType","indexOf","_processGroupItem","dataIndex","groupsCount","groupedColumns","column","scrollingMode","collectContinuationItems","resultItems","values","data","isContinuation","push","slice","deserializeValue","calculateDisplayValue","pop","publicMethods","concat","pageIndex","reload","expanded","args","executeAction","cancel","when","done","Deferred","resolve","d","load","fail","reject","expandRow","collapseRow","optionChanged","name","onGroupingMenuItemClick","params","columnsController","itemData","value","columnOption","dataField","component","clearGrouping","_getToolbarItems","_appendGroupingItem","_this","_isGroupPanelVisible","isRendered","toolbarItem","template","$groupPanel","addClass","_updateGroupPanelContent","registerKeyboardAction","_handleActionKeyDown","onItemRendered","renderCompleted","fire","location","locateInMenu","sortIndex","event","$target","target","groupColumnIndex","closest","index","columnIndex","is","getController","showHeaderFilterMenu","_processGroupItemAction","preventDefault","groupPanelOptions","isVisible","visible","current","deviceType","_renderGroupPanelItems","empty","each","groupColumn","_createGroupPanelItem","restoreFocus","$rootElement","$groupPanelItem","cssClass","appendTo","text","caption","setTabIndex","_columnOptionChanged","e","_requireReady","checkChanges","optionNames","$toolbarElement","element","find","allowColumnDragging","emptyPanelText","css","updateToolbarDimensions","allowDragging","allowGrouping","getColumnElements","$element","getColumns","getBoundingRect","offset","top","bottom","height","getName","getContextMenuItems","contextMenuEnabled","$groupedColumnElement","targetElement","isGroupingAllowed","isColumnGrouped","groupingTexts","onItemClick","ungroup","disabled","ungroupAll","_invalidate","handled","GroupingRowsViewExtender","row","_rowClick","expandMode","isGroupRowStateChanged","isExpandButtonClicked","_changeGroupRowState","dataController","rowIndex","allowCollapsing","columnHeadersViewExtender","command","groupByThisColumn","beginGroup","showWhenGrouped","registerModule","defaultOptions","autoExpandAll","texts","groupContinuesMessage","format","groupContinuedMessage","groupPanel","extenders","controllers","columns","_getExpandColumnOptions","cellTemplate","getExpandCellTemplate","views","headerPanel","rowsView","columnHeadersView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.GroupingHeaderPanelExtender = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _uiData_grid = _interopRequireDefault(require(\"./ui.data_grid.core\"));\r\nvar _uiData_gridGrouping = require(\"./ui.data_grid.grouping.expanded\");\r\nvar _uiData_gridGrouping2 = require(\"./ui.data_grid.grouping.collapsed\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _uiData_grid2 = _interopRequireDefault(require(\"./ui.data_grid.data_source_adapter\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _devices = _interopRequireDefault(require(\"../../core/devices\"));\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _uiGrid_core = require(\"../grid_core/ui.grid_core.accessibility\");\r\nvar _accessibility = require(\"../shared/accessibility\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\r\nvar DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\r\nvar DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\r\nvar DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\r\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\r\nvar DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nvar GroupingDataSourceAdapterExtender = function() {\r\n    return {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._initGroupingHelper()\r\n        },\r\n        _initGroupingHelper: function(options) {\r\n            var grouping = this._grouping;\r\n            var isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\r\n            var isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n            var remoteOperations = options ? options.remoteOperations : this.remoteOperations();\r\n            var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\r\n            if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\r\n                if (!grouping || grouping instanceof _uiData_gridGrouping2.GroupingHelper) {\r\n                    this._grouping = new _uiData_gridGrouping.GroupingHelper(this)\r\n                }\r\n            } else {\r\n                if (!grouping || grouping instanceof _uiData_gridGrouping.GroupingHelper) {\r\n                    this._grouping = new _uiData_gridGrouping2.GroupingHelper(this)\r\n                }\r\n            }\r\n        },\r\n        totalItemsCount: function() {\r\n            var that = this;\r\n            var totalCount = that.callBase();\r\n            return totalCount > 0 && that._dataSource.group() && that._dataSource.requireTotalCount() ? totalCount + that._grouping.totalCountCorrection() : totalCount\r\n        },\r\n        itemsCount: function() {\r\n            return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments)\r\n        },\r\n        allowCollapseAll: function() {\r\n            return this._grouping.allowCollapseAll()\r\n        },\r\n        isGroupItemCountable: function(item) {\r\n            return this._grouping.isGroupItemCountable(item)\r\n        },\r\n        isRowExpanded: function(key) {\r\n            var groupInfo = this._grouping.findGroupInfo(key);\r\n            return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()\r\n        },\r\n        collapseAll: function(groupIndex) {\r\n            return this._collapseExpandAll(groupIndex, false)\r\n        },\r\n        expandAll: function(groupIndex) {\r\n            return this._collapseExpandAll(groupIndex, true)\r\n        },\r\n        _collapseExpandAll: function(groupIndex, isExpand) {\r\n            var that = this;\r\n            var dataSource = that._dataSource;\r\n            var group = dataSource.group();\r\n            var groups = _uiData_grid.default.normalizeSortingInfo(group || []);\r\n            if (groups.length) {\r\n                for (var i = 0; i < groups.length; i++) {\r\n                    if (void 0 === groupIndex || groupIndex === i) {\r\n                        groups[i].isExpanded = isExpand\r\n                    } else {\r\n                        if (group && group[i]) {\r\n                            groups[i].isExpanded = group[i].isExpanded\r\n                        }\r\n                    }\r\n                }\r\n                dataSource.group(groups);\r\n                that._grouping.foreachGroups(function(groupInfo, parents) {\r\n                    if (void 0 === groupIndex || groupIndex === parents.length - 1) {\r\n                        groupInfo.isExpanded = isExpand\r\n                    }\r\n                }, false, true);\r\n                that.resetPagesCache()\r\n            }\r\n            return true\r\n        },\r\n        refresh: function() {\r\n            this.callBase.apply(this, arguments);\r\n            return this._grouping.refresh.apply(this._grouping, arguments)\r\n        },\r\n        changeRowExpand: function(path) {\r\n            var that = this;\r\n            var dataSource = that._dataSource;\r\n            if (dataSource.group()) {\r\n                dataSource.beginLoading();\r\n                if (that._lastLoadOptions) {\r\n                    that._lastLoadOptions.groupExpand = true\r\n                }\r\n                return that._changeRowExpandCore(path).always(function() {\r\n                    dataSource.endLoading()\r\n                })\r\n            }\r\n        },\r\n        _changeRowExpandCore: function(path) {\r\n            return this._grouping.changeRowExpand(path)\r\n        },\r\n        _hasGroupLevelsExpandState: function(group, isExpanded) {\r\n            if (group && Array.isArray(group)) {\r\n                for (var i = 0; i < group.length; i++) {\r\n                    if (group[i].isExpanded === isExpanded) {\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var remoteOperations = options.remoteOperations;\r\n            if (options.storeLoadOptions.group) {\r\n                if (remoteOperations.grouping && !options.isCustomLoading) {\r\n                    if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\r\n                        remoteOperations.paging = false\r\n                    }\r\n                }\r\n                if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\r\n                    remoteOperations.paging = false\r\n                }\r\n            } else {\r\n                if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\r\n                    this.resetCache()\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            this.callBase(options);\r\n            this._initGroupingHelper(options);\r\n            return this._grouping.handleDataLoading(options)\r\n        },\r\n        _handleDataLoaded: function(options) {\r\n            return this._grouping.handleDataLoaded(options, this.callBase.bind(this))\r\n        },\r\n        _handleDataLoadedCore: function(options) {\r\n            return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this))\r\n        }\r\n    }\r\n}();\r\n_uiData_grid2.default.extend(GroupingDataSourceAdapterExtender);\r\nvar GroupingDataControllerExtender = function() {\r\n    return {\r\n        init: function() {\r\n            var that = this;\r\n            that.callBase();\r\n            that.createAction(\"onRowExpanding\");\r\n            that.createAction(\"onRowExpanded\");\r\n            that.createAction(\"onRowCollapsing\");\r\n            that.createAction(\"onRowCollapsed\")\r\n        },\r\n        _beforeProcessItems: function(items) {\r\n            var groupColumns = this._columnsController.getGroupColumns();\r\n            items = this.callBase(items);\r\n            if (items.length && groupColumns.length) {\r\n                items = this._processGroupItems(items, groupColumns.length)\r\n            }\r\n            return items\r\n        },\r\n        _processItem: function(item, options) {\r\n            if ((0, _type.isDefined)(item.groupIndex) && (0, _type.isString)(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\r\n                item = this._processGroupItem(item, options);\r\n                options.dataIndex = 0\r\n            } else {\r\n                item = this.callBase.apply(this, arguments)\r\n            }\r\n            return item\r\n        },\r\n        _processGroupItem: function(item) {\r\n            return item\r\n        },\r\n        _processGroupItems: function(items, groupsCount, options) {\r\n            var that = this;\r\n            var groupedColumns = that._columnsController.getGroupColumns();\r\n            var column = groupedColumns[groupedColumns.length - groupsCount];\r\n            if (!options) {\r\n                var scrollingMode = that.option(\"scrolling.mode\");\r\n                options = {\r\n                    collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\r\n                    resultItems: [],\r\n                    path: [],\r\n                    values: []\r\n                }\r\n            }\r\n            var resultItems = options.resultItems;\r\n            if (options.data) {\r\n                if (options.collectContinuationItems || !options.data.isContinuation) {\r\n                    resultItems.push({\r\n                        rowType: \"group\",\r\n                        data: options.data,\r\n                        groupIndex: options.path.length - 1,\r\n                        isExpanded: !!options.data.items,\r\n                        key: options.path.slice(0),\r\n                        values: options.values.slice(0)\r\n                    })\r\n                }\r\n            }\r\n            if (items) {\r\n                if (0 === groupsCount) {\r\n                    resultItems.push.apply(resultItems, items)\r\n                } else {\r\n                    for (var i = 0; i < items.length; i++) {\r\n                        var item = items[i];\r\n                        if (item && \"items\" in item) {\r\n                            options.data = item;\r\n                            options.path.push(item.key);\r\n                            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\r\n                            that._processGroupItems(item.items, groupsCount - 1, options);\r\n                            options.data = void 0;\r\n                            options.path.pop();\r\n                            options.values.pop()\r\n                        } else {\r\n                            resultItems.push(item)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return resultItems\r\n        },\r\n        publicMethods: function() {\r\n            return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"])\r\n        },\r\n        collapseAll: function(groupIndex) {\r\n            var dataSource = this._dataSource;\r\n            if (dataSource && dataSource.collapseAll(groupIndex)) {\r\n                dataSource.pageIndex(0);\r\n                dataSource.reload()\r\n            }\r\n        },\r\n        expandAll: function(groupIndex) {\r\n            var dataSource = this._dataSource;\r\n            if (dataSource && dataSource.expandAll(groupIndex)) {\r\n                dataSource.pageIndex(0);\r\n                dataSource.reload()\r\n            }\r\n        },\r\n        changeRowExpand: function(key) {\r\n            var that = this;\r\n            var expanded = that.isRowExpanded(key);\r\n            var args = {\r\n                key: key,\r\n                expanded: expanded\r\n            };\r\n            that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\r\n            if (!args.cancel) {\r\n                return (0, _deferred.when)(that._changeRowExpandCore(key)).done(function() {\r\n                    args.expanded = !expanded;\r\n                    that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args)\r\n                })\r\n            }\r\n            return (new _deferred.Deferred).resolve()\r\n        },\r\n        _changeRowExpandCore: function(key) {\r\n            var that = this;\r\n            var dataSource = this._dataSource;\r\n            var d = new _deferred.Deferred;\r\n            if (!dataSource) {\r\n                d.resolve()\r\n            } else {\r\n                (0, _deferred.when)(dataSource.changeRowExpand(key)).done(function() {\r\n                    that.load().done(d.resolve).fail(d.reject)\r\n                }).fail(d.reject)\r\n            }\r\n            return d\r\n        },\r\n        isRowExpanded: function(key) {\r\n            var dataSource = this._dataSource;\r\n            return dataSource && dataSource.isRowExpanded(key)\r\n        },\r\n        expandRow: function(key) {\r\n            if (!this.isRowExpanded(key)) {\r\n                return this.changeRowExpand(key)\r\n            }\r\n            return (new _deferred.Deferred).resolve()\r\n        },\r\n        collapseRow: function(key) {\r\n            if (this.isRowExpanded(key)) {\r\n                return this.changeRowExpand(key)\r\n            }\r\n            return (new _deferred.Deferred).resolve()\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"grouping\" === args.name) {\r\n                args.name = \"dataSource\"\r\n            }\r\n            this.callBase(args)\r\n        }\r\n    }\r\n}();\r\nvar onGroupingMenuItemClick = function(column, params) {\r\n    var columnsController = this._columnsController;\r\n    switch (params.itemData.value) {\r\n        case \"group\":\r\n            var groups = columnsController._dataSource.group() || [];\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\r\n            break;\r\n        case \"ungroup\":\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", -1);\r\n            break;\r\n        case \"ungroupAll\":\r\n            this.component.clearGrouping()\r\n    }\r\n};\r\nvar GroupingHeaderPanelExtender = function() {\r\n    return {\r\n        _getToolbarItems: function() {\r\n            var items = this.callBase();\r\n            return this._appendGroupingItem(items)\r\n        },\r\n        _appendGroupingItem: function(items) {\r\n            var _this = this;\r\n            if (this._isGroupPanelVisible()) {\r\n                var isRendered = false;\r\n                var toolbarItem = {\r\n                    template: function() {\r\n                        var $groupPanel = (0, _renderer.default)(\"<div>\").addClass(DATAGRID_GROUP_PANEL_CLASS);\r\n                        _this._updateGroupPanelContent($groupPanel);\r\n                        (0, _uiGrid_core.registerKeyboardAction)(\"groupPanel\", _this, $groupPanel, void 0, _this._handleActionKeyDown.bind(_this));\r\n                        return $groupPanel\r\n                    },\r\n                    name: \"groupPanel\",\r\n                    onItemRendered: function() {\r\n                        isRendered && _this.renderCompleted.fire();\r\n                        isRendered = true\r\n                    },\r\n                    location: \"before\",\r\n                    locateInMenu: \"never\",\r\n                    sortIndex: 1\r\n                };\r\n                items.push(toolbarItem)\r\n            }\r\n            return items\r\n        },\r\n        _handleActionKeyDown: function(args) {\r\n            var event = args.event;\r\n            var $target = (0, _renderer.default)(event.target);\r\n            var groupColumnIndex = $target.closest(\".\".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();\r\n            var column = this._columnsController.getGroupColumns()[groupColumnIndex];\r\n            var columnIndex = column && column.index;\r\n            if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\r\n                this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true)\r\n            } else {\r\n                this._processGroupItemAction(columnIndex)\r\n            }\r\n            event.preventDefault()\r\n        },\r\n        _isGroupPanelVisible: function() {\r\n            var groupPanelOptions = this.option(\"groupPanel\");\r\n            var isVisible;\r\n            if (groupPanelOptions) {\r\n                isVisible = groupPanelOptions.visible;\r\n                if (\"auto\" === isVisible) {\r\n                    isVisible = \"desktop\" === _devices.default.current().deviceType ? true : false\r\n                }\r\n            }\r\n            return isVisible\r\n        },\r\n        _renderGroupPanelItems: function($groupPanel, groupColumns) {\r\n            var that = this;\r\n            $groupPanel.empty();\r\n            (0, _iterator.each)(groupColumns, function(index, groupColumn) {\r\n                that._createGroupPanelItem($groupPanel, groupColumn)\r\n            });\r\n            (0, _accessibility.restoreFocus)(this)\r\n        },\r\n        _createGroupPanelItem: function($rootElement, groupColumn) {\r\n            var $groupPanelItem = (0, _renderer.default)(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\r\n            (0, _accessibility.setTabIndex)(this, $groupPanelItem);\r\n            return $groupPanelItem\r\n        },\r\n        _columnOptionChanged: function(e) {\r\n            if (!this._requireReady && !_uiData_grid.default.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\r\n                var $toolbarElement = this.element();\r\n                var $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\r\n                if ($groupPanel && $groupPanel.length) {\r\n                    this._updateGroupPanelContent($groupPanel);\r\n                    this.renderCompleted.fire()\r\n                }\r\n            }\r\n            this.callBase()\r\n        },\r\n        _updateGroupPanelContent: function($groupPanel) {\r\n            var that = this;\r\n            var groupColumns = that.getController(\"columns\").getGroupColumns();\r\n            var groupPanelOptions = that.option(\"groupPanel\");\r\n            that._renderGroupPanelItems($groupPanel, groupColumns);\r\n            if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\r\n                (0, _renderer.default)(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\r\n                $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\r\n                that.updateToolbarDimensions()\r\n            }\r\n        },\r\n        allowDragging: function(column) {\r\n            var groupPanelOptions = this.option(\"groupPanel\");\r\n            return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping\r\n        },\r\n        getColumnElements: function() {\r\n            var $element = this.element();\r\n            return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS)\r\n        },\r\n        getColumns: function() {\r\n            return this.getController(\"columns\").getGroupColumns()\r\n        },\r\n        getBoundingRect: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\r\n                var offset = $element.offset();\r\n                return {\r\n                    top: offset.top,\r\n                    bottom: offset.top + $element.height()\r\n                }\r\n            }\r\n            return null\r\n        },\r\n        getName: function() {\r\n            return \"group\"\r\n        },\r\n        getContextMenuItems: function(options) {\r\n            var that = this;\r\n            var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n            var $groupedColumnElement = (0, _renderer.default)(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\r\n            var items;\r\n            if ($groupedColumnElement.length) {\r\n                options.column = $groupedColumnElement.data(\"columnData\")\r\n            }\r\n            if (contextMenuEnabled && options.column) {\r\n                var column = options.column;\r\n                var isGroupingAllowed = (0, _type.isDefined)(column.allowGrouping) ? column.allowGrouping : true;\r\n                if (isGroupingAllowed) {\r\n                    var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;\r\n                    var groupingTexts = that.option(\"grouping.texts\");\r\n                    var onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                    items = [{\r\n                        text: groupingTexts.ungroup,\r\n                        value: \"ungroup\",\r\n                        disabled: !isColumnGrouped,\r\n                        onItemClick: onItemClick\r\n                    }, {\r\n                        text: groupingTexts.ungroupAll,\r\n                        value: \"ungroupAll\",\r\n                        onItemClick: onItemClick\r\n                    }]\r\n                }\r\n            }\r\n            return items\r\n        },\r\n        isVisible: function() {\r\n            return this.callBase() || this._isGroupPanelVisible()\r\n        },\r\n        optionChanged: function(args) {\r\n            if (\"groupPanel\" === args.name) {\r\n                this._invalidate();\r\n                args.handled = true\r\n            } else {\r\n                this.callBase(args)\r\n            }\r\n        }\r\n    }\r\n}();\r\nexports.GroupingHeaderPanelExtender = GroupingHeaderPanelExtender;\r\nvar GroupingRowsViewExtender = function() {\r\n    return {\r\n        getContextMenuItems: function(options) {\r\n            var that = this;\r\n            var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n            var items;\r\n            if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\r\n                var columnsController = that._columnsController;\r\n                var column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\r\n                if (column && column.allowGrouping) {\r\n                    var groupingTexts = that.option(\"grouping.texts\");\r\n                    var onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                    items = [];\r\n                    items.push({\r\n                        text: groupingTexts.ungroup,\r\n                        value: \"ungroup\",\r\n                        onItemClick: onItemClick\r\n                    }, {\r\n                        text: groupingTexts.ungroupAll,\r\n                        value: \"ungroupAll\",\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n            }\r\n            return items\r\n        },\r\n        _rowClick: function(e) {\r\n            var that = this;\r\n            var expandMode = that.option(\"grouping.expandMode\");\r\n            var scrollingMode = that.option(\"scrolling.mode\");\r\n            var isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && (0, _renderer.default)(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length;\r\n            var isExpandButtonClicked = (0, _renderer.default)(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\r\n            if (isGroupRowStateChanged || isExpandButtonClicked) {\r\n                that._changeGroupRowState(e)\r\n            }\r\n            that.callBase(e)\r\n        },\r\n        _changeGroupRowState: function(e) {\r\n            var dataController = this.getController(\"data\");\r\n            var row = dataController.items()[e.rowIndex];\r\n            var allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\r\n            if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\r\n                dataController.changeRowExpand(row.key, true);\r\n                e.event.preventDefault();\r\n                e.handled = true\r\n            }\r\n        }\r\n    }\r\n}();\r\nvar columnHeadersViewExtender = function() {\r\n    return {\r\n        getContextMenuItems: function(options) {\r\n            var that = this;\r\n            var contextMenuEnabled = that.option(\"grouping.contextMenuEnabled\");\r\n            var items = that.callBase(options);\r\n            if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n                var column = options.column;\r\n                if (!column.command && (!(0, _type.isDefined)(column.allowGrouping) || column.allowGrouping)) {\r\n                    var groupingTexts = that.option(\"grouping.texts\");\r\n                    var isColumnGrouped = (0, _type.isDefined)(column.groupIndex) && column.groupIndex > -1;\r\n                    var onItemClick = onGroupingMenuItemClick.bind(that, column);\r\n                    items = items || [];\r\n                    items.push({\r\n                        text: groupingTexts.groupByThisColumn,\r\n                        value: \"group\",\r\n                        beginGroup: true,\r\n                        disabled: isColumnGrouped,\r\n                        onItemClick: onItemClick\r\n                    });\r\n                    if (column.showWhenGrouped) {\r\n                        items.push({\r\n                            text: groupingTexts.ungroup,\r\n                            value: \"ungroup\",\r\n                            disabled: !isColumnGrouped,\r\n                            onItemClick: onItemClick\r\n                        })\r\n                    }\r\n                    items.push({\r\n                        text: groupingTexts.ungroupAll,\r\n                        value: \"ungroupAll\",\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n            }\r\n            return items\r\n        }\r\n    }\r\n}();\r\n_uiData_grid.default.registerModule(\"grouping\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            grouping: {\r\n                autoExpandAll: true,\r\n                allowCollapsing: true,\r\n                contextMenuEnabled: false,\r\n                expandMode: \"buttonClick\",\r\n                texts: {\r\n                    groupContinuesMessage: _message.default.format(\"dxDataGrid-groupContinuesMessage\"),\r\n                    groupContinuedMessage: _message.default.format(\"dxDataGrid-groupContinuedMessage\"),\r\n                    groupByThisColumn: _message.default.format(\"dxDataGrid-groupHeaderText\"),\r\n                    ungroup: _message.default.format(\"dxDataGrid-ungroupHeaderText\"),\r\n                    ungroupAll: _message.default.format(\"dxDataGrid-ungroupAllText\")\r\n                }\r\n            },\r\n            groupPanel: {\r\n                visible: false,\r\n                emptyPanelText: _message.default.format(\"dxDataGrid-groupPanelEmptyText\"),\r\n                allowColumnDragging: true\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: GroupingDataControllerExtender,\r\n            columns: {\r\n                _getExpandColumnOptions: function() {\r\n                    var options = this.callBase.apply(this, arguments);\r\n                    options.cellTemplate = _uiData_grid.default.getExpandCellTemplate();\r\n                    return options\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: GroupingHeaderPanelExtender,\r\n            rowsView: GroupingRowsViewExtender,\r\n            columnHeadersView: columnHeadersViewExtender\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"script"}