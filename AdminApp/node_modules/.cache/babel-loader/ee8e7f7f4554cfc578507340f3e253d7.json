{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.master_detail.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar ROW_LINES_CLASS = \"dx-row-lines\";\nvar _default = {\n  defaultOptions: function () {\n    return {\n      masterDetail: {\n        enabled: false,\n        autoExpandAll: false,\n        template: null\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      columns: {\n        _getExpandColumnsCore: function () {\n          var expandColumns = this.callBase();\n\n          if (this.option(\"masterDetail.enabled\")) {\n            expandColumns.push({\n              type: \"detailExpand\",\n              cellTemplate: _uiGrid_core.default.getExpandCellTemplate()\n            });\n          }\n\n          return expandColumns;\n        }\n      },\n      data: function () {\n        var initMasterDetail = function (that) {\n          that._expandedItems = [];\n          that._isExpandAll = that.option(\"masterDetail.autoExpandAll\");\n        };\n\n        return {\n          init: function () {\n            var that = this;\n            initMasterDetail(that);\n            that.callBase();\n          },\n          expandAll: function (groupIndex) {\n            var that = this;\n\n            if (groupIndex < 0) {\n              that._isExpandAll = true;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          collapseAll: function (groupIndex) {\n            var that = this;\n\n            if (groupIndex < 0) {\n              that._isExpandAll = false;\n              that._expandedItems = [];\n              that.updateItems();\n            } else {\n              that.callBase.apply(that, arguments);\n            }\n          },\n          isRowExpanded: function (key) {\n            var that = this;\n\n            var expandIndex = _uiGrid_core.default.getIndexByKey(key, that._expandedItems);\n\n            if (Array.isArray(key)) {\n              return that.callBase.apply(that, arguments);\n            } else {\n              return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible));\n            }\n          },\n          _getRowIndicesForExpand: function (key) {\n            var rowIndex = this.getRowIndexByKey(key);\n            return [rowIndex, rowIndex + 1];\n          },\n          _changeRowExpandCore: function (key) {\n            var that = this;\n            var result;\n\n            if (Array.isArray(key)) {\n              result = that.callBase.apply(that, arguments);\n            } else {\n              var expandIndex = _uiGrid_core.default.getIndexByKey(key, that._expandedItems);\n\n              if (expandIndex >= 0) {\n                var visible = that._expandedItems[expandIndex].visible;\n                that._expandedItems[expandIndex].visible = !visible;\n              } else {\n                that._expandedItems.push({\n                  key: key,\n                  visible: true\n                });\n              }\n\n              that.updateItems({\n                changeType: \"update\",\n                rowIndices: that._getRowIndicesForExpand(key)\n              });\n              result = new _deferred.Deferred().resolve();\n            }\n\n            return result;\n          },\n          _processDataItem: function (data, options) {\n            var that = this;\n            var dataItem = that.callBase.apply(that, arguments);\n            dataItem.isExpanded = that.isRowExpanded(dataItem.key);\n\n            if (void 0 === options.detailColumnIndex) {\n              options.detailColumnIndex = -1;\n              (0, _iterator.each)(options.visibleColumns, function (index, column) {\n                if (\"expand\" === column.command && !(0, _type.isDefined)(column.groupIndex)) {\n                  options.detailColumnIndex = index;\n                  return false;\n                }\n              });\n            }\n\n            if (options.detailColumnIndex >= 0) {\n              dataItem.values[options.detailColumnIndex] = dataItem.isExpanded;\n            }\n\n            return dataItem;\n          },\n          _processItems: function (items, change) {\n            var that = this;\n            var changeType = change.changeType;\n            var result = [];\n            items = that.callBase.apply(that, arguments);\n\n            if (\"loadingAll\" === changeType) {\n              return items;\n            }\n\n            if (\"refresh\" === changeType) {\n              that._expandedItems = (0, _common.grep)(that._expandedItems, function (item) {\n                return item.visible;\n              });\n            }\n\n            (0, _iterator.each)(items, function (index, item) {\n              result.push(item);\n\n              var expandIndex = _uiGrid_core.default.getIndexByKey(item.key, that._expandedItems);\n\n              if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\n                result.push({\n                  visible: item.isExpanded,\n                  rowType: \"detail\",\n                  key: item.key,\n                  data: item.data,\n                  values: []\n                });\n              }\n            });\n            return result;\n          },\n          optionChanged: function (args) {\n            var that = this;\n            var isEnabledChanged;\n            var isAutoExpandAllChanged;\n\n            if (\"masterDetail\" === args.name) {\n              args.name = \"dataSource\";\n\n              switch (args.fullName) {\n                case \"masterDetail\":\n                  var value = args.value || {};\n                  var previousValue = args.previousValue || {};\n                  isEnabledChanged = value.enabled !== previousValue.enabled;\n                  isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\n                  break;\n\n                case \"masterDetail.enabled\":\n                  isEnabledChanged = true;\n                  break;\n\n                case \"masterDetail.autoExpandAll\":\n                  isAutoExpandAllChanged = true;\n              }\n\n              if (isEnabledChanged || isAutoExpandAllChanged) {\n                initMasterDetail(that);\n              }\n            }\n\n            that.callBase(args);\n          }\n        };\n      }(),\n      resizing: {\n        fireContentReadyAction: function () {\n          this.callBase.apply(this, arguments);\n\n          this._updateParentDataGrids(this.component.$element());\n        },\n        _updateParentDataGrids: function ($element) {\n          var _this = this;\n\n          var $masterDetailRow = $element.closest(\".\" + MASTER_DETAIL_ROW_CLASS);\n\n          if ($masterDetailRow.length) {\n            (0, _deferred.when)(this._updateMasterDataGrid($masterDetailRow, $element)).done(function () {\n              _this._updateParentDataGrids($masterDetailRow.parent());\n            });\n          }\n        },\n        _updateMasterDataGrid: function ($masterDetailRow, $detailElement) {\n          var masterRowOptions = (0, _renderer.default)($masterDetailRow).data(\"options\");\n          var masterDataGrid = (0, _renderer.default)($masterDetailRow).closest(\".\" + this.getWidgetContainerClass()).parent().data(\"dxDataGrid\");\n\n          if (masterRowOptions && masterDataGrid) {\n            if (masterDataGrid.getView(\"rowsView\").isFixedColumns()) {\n              this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $detailElement);\n            } else {\n              var scrollable = masterDataGrid.getScrollable();\n              return scrollable && scrollable.update();\n            }\n          }\n        },\n        _updateFixedMasterDetailGrids: function (masterDataGrid, masterRowIndex, $detailElement) {\n          var _this2 = this;\n\n          var $rows = (0, _renderer.default)(masterDataGrid.getRowElement(masterRowIndex));\n\n          if ($rows && 2 === $rows.length && $rows.eq(0).height() !== $rows.eq(1).height()) {\n            var detailElementWidth = $detailElement.width();\n            return masterDataGrid.updateDimensions().done(function () {\n              var isDetailHorizontalScrollCanBeShown = _this2.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\");\n              var isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== $detailElement.width();\n\n              if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\n                _this2.updateDimensions();\n              }\n            });\n          }\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          this.callBase.apply(this, arguments);\n\n          if (this.option(\"masterDetail.template\")) {\n            var $rowsTable = this._rowsView.getTableElement();\n\n            if ($rowsTable) {\n              $rowsTable.find(\".dx-master-detail-cell\").css(\"maxWidth\", isBestFit ? 0 : \"\");\n            }\n          }\n        }\n      }\n    },\n    views: {\n      rowsView: function () {\n        return {\n          _getCellTemplate: function (options) {\n            var that = this;\n            var column = options.column;\n            var editingController = that.getController(\"editing\");\n            var isEditRow = editingController && editingController.isEditRow(options.rowIndex);\n            var template;\n\n            if (\"detail\" === column.command && !isEditRow) {\n              template = that.option(\"masterDetail.template\") || {\n                allowRenderToDetachedContainer: false,\n                render: that._getDefaultTemplate(column)\n              };\n            } else {\n              template = that.callBase.apply(that, arguments);\n            }\n\n            return template;\n          },\n          _isDetailRow: function (row) {\n            return row && row.rowType && 0 === row.rowType.indexOf(\"detail\");\n          },\n          _createRow: function (row) {\n            var $row = this.callBase(row);\n\n            if (row && this._isDetailRow(row)) {\n              this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\n              $row.addClass(MASTER_DETAIL_ROW_CLASS);\n\n              if ((0, _type.isDefined)(row.visible)) {\n                $row.toggle(row.visible);\n              }\n            }\n\n            return $row;\n          },\n          _renderCells: function ($row, options) {\n            var row = options.row;\n            var $detailCell;\n\n            var visibleColumns = this._columnsController.getVisibleColumns();\n\n            if (row.rowType && this._isDetailRow(row)) {\n              if (this._needRenderCell(0, options.columnIndices)) {\n                $detailCell = this._renderCell($row, {\n                  value: null,\n                  row: row,\n                  rowIndex: row.rowIndex,\n                  column: {\n                    command: \"detail\"\n                  },\n                  columnIndex: 0\n                });\n                $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS).addClass(MASTER_DETAIL_CELL_CLASS).attr(\"colSpan\", visibleColumns.length);\n              }\n            } else {\n              this.callBase.apply(this, arguments);\n            }\n          }\n        };\n      }()\n    }\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.master_detail.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_uiGrid_core","_common","_iterator","_type","_deferred","obj","__esModule","MASTER_DETAIL_CELL_CLASS","MASTER_DETAIL_ROW_CLASS","CELL_FOCUS_DISABLED_CLASS","ROW_LINES_CLASS","_default","defaultOptions","masterDetail","enabled","autoExpandAll","template","extenders","controllers","columns","_getExpandColumnsCore","expandColumns","callBase","option","push","type","cellTemplate","getExpandCellTemplate","data","initMasterDetail","that","_expandedItems","_isExpandAll","init","expandAll","groupIndex","updateItems","apply","arguments","collapseAll","isRowExpanded","key","expandIndex","getIndexByKey","Array","isArray","visible","_getRowIndicesForExpand","rowIndex","getRowIndexByKey","_changeRowExpandCore","result","changeType","rowIndices","Deferred","resolve","_processDataItem","options","dataItem","isExpanded","detailColumnIndex","each","visibleColumns","index","column","command","isDefined","values","_processItems","items","change","grep","item","rowType","isNewRow","optionChanged","args","isEnabledChanged","isAutoExpandAllChanged","name","fullName","value","previousValue","resizing","fireContentReadyAction","_updateParentDataGrids","component","$element","_this","$masterDetailRow","closest","length","when","_updateMasterDataGrid","done","parent","$detailElement","masterRowOptions","masterDataGrid","getWidgetContainerClass","getView","isFixedColumns","_updateFixedMasterDetailGrids","scrollable","getScrollable","update","masterRowIndex","_this2","$rows","getRowElement","eq","height","detailElementWidth","width","updateDimensions","isDetailHorizontalScrollCanBeShown","isDetailGridWidthChanged","_toggleBestFitMode","isBestFit","$rowsTable","_rowsView","getTableElement","find","css","views","rowsView","_getCellTemplate","editingController","getController","isEditRow","allowRenderToDetachedContainer","render","_getDefaultTemplate","_isDetailRow","row","indexOf","_createRow","$row","addClass","toggle","_renderCells","$detailCell","_columnsController","getVisibleColumns","_needRenderCell","columnIndices","_renderCell","columnIndex","attr","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.master_detail.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar MASTER_DETAIL_ROW_CLASS = \"dx-master-detail-row\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar ROW_LINES_CLASS = \"dx-row-lines\";\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            masterDetail: {\r\n                enabled: false,\r\n                autoExpandAll: false,\r\n                template: null\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            columns: {\r\n                _getExpandColumnsCore: function() {\r\n                    var expandColumns = this.callBase();\r\n                    if (this.option(\"masterDetail.enabled\")) {\r\n                        expandColumns.push({\r\n                            type: \"detailExpand\",\r\n                            cellTemplate: _uiGrid_core.default.getExpandCellTemplate()\r\n                        })\r\n                    }\r\n                    return expandColumns\r\n                }\r\n            },\r\n            data: function() {\r\n                var initMasterDetail = function(that) {\r\n                    that._expandedItems = [];\r\n                    that._isExpandAll = that.option(\"masterDetail.autoExpandAll\")\r\n                };\r\n                return {\r\n                    init: function() {\r\n                        var that = this;\r\n                        initMasterDetail(that);\r\n                        that.callBase()\r\n                    },\r\n                    expandAll: function(groupIndex) {\r\n                        var that = this;\r\n                        if (groupIndex < 0) {\r\n                            that._isExpandAll = true;\r\n                            that._expandedItems = [];\r\n                            that.updateItems()\r\n                        } else {\r\n                            that.callBase.apply(that, arguments)\r\n                        }\r\n                    },\r\n                    collapseAll: function(groupIndex) {\r\n                        var that = this;\r\n                        if (groupIndex < 0) {\r\n                            that._isExpandAll = false;\r\n                            that._expandedItems = [];\r\n                            that.updateItems()\r\n                        } else {\r\n                            that.callBase.apply(that, arguments)\r\n                        }\r\n                    },\r\n                    isRowExpanded: function(key) {\r\n                        var that = this;\r\n                        var expandIndex = _uiGrid_core.default.getIndexByKey(key, that._expandedItems);\r\n                        if (Array.isArray(key)) {\r\n                            return that.callBase.apply(that, arguments)\r\n                        } else {\r\n                            return !!(that._isExpandAll ^ (expandIndex >= 0 && that._expandedItems[expandIndex].visible))\r\n                        }\r\n                    },\r\n                    _getRowIndicesForExpand: function(key) {\r\n                        var rowIndex = this.getRowIndexByKey(key);\r\n                        return [rowIndex, rowIndex + 1]\r\n                    },\r\n                    _changeRowExpandCore: function(key) {\r\n                        var that = this;\r\n                        var result;\r\n                        if (Array.isArray(key)) {\r\n                            result = that.callBase.apply(that, arguments)\r\n                        } else {\r\n                            var expandIndex = _uiGrid_core.default.getIndexByKey(key, that._expandedItems);\r\n                            if (expandIndex >= 0) {\r\n                                var visible = that._expandedItems[expandIndex].visible;\r\n                                that._expandedItems[expandIndex].visible = !visible\r\n                            } else {\r\n                                that._expandedItems.push({\r\n                                    key: key,\r\n                                    visible: true\r\n                                })\r\n                            }\r\n                            that.updateItems({\r\n                                changeType: \"update\",\r\n                                rowIndices: that._getRowIndicesForExpand(key)\r\n                            });\r\n                            result = (new _deferred.Deferred).resolve()\r\n                        }\r\n                        return result\r\n                    },\r\n                    _processDataItem: function(data, options) {\r\n                        var that = this;\r\n                        var dataItem = that.callBase.apply(that, arguments);\r\n                        dataItem.isExpanded = that.isRowExpanded(dataItem.key);\r\n                        if (void 0 === options.detailColumnIndex) {\r\n                            options.detailColumnIndex = -1;\r\n                            (0, _iterator.each)(options.visibleColumns, function(index, column) {\r\n                                if (\"expand\" === column.command && !(0, _type.isDefined)(column.groupIndex)) {\r\n                                    options.detailColumnIndex = index;\r\n                                    return false\r\n                                }\r\n                            })\r\n                        }\r\n                        if (options.detailColumnIndex >= 0) {\r\n                            dataItem.values[options.detailColumnIndex] = dataItem.isExpanded\r\n                        }\r\n                        return dataItem\r\n                    },\r\n                    _processItems: function(items, change) {\r\n                        var that = this;\r\n                        var changeType = change.changeType;\r\n                        var result = [];\r\n                        items = that.callBase.apply(that, arguments);\r\n                        if (\"loadingAll\" === changeType) {\r\n                            return items\r\n                        }\r\n                        if (\"refresh\" === changeType) {\r\n                            that._expandedItems = (0, _common.grep)(that._expandedItems, function(item) {\r\n                                return item.visible\r\n                            })\r\n                        }(0, _iterator.each)(items, function(index, item) {\r\n                            result.push(item);\r\n                            var expandIndex = _uiGrid_core.default.getIndexByKey(item.key, that._expandedItems);\r\n                            if (\"data\" === item.rowType && (item.isExpanded || expandIndex >= 0) && !item.isNewRow) {\r\n                                result.push({\r\n                                    visible: item.isExpanded,\r\n                                    rowType: \"detail\",\r\n                                    key: item.key,\r\n                                    data: item.data,\r\n                                    values: []\r\n                                })\r\n                            }\r\n                        });\r\n                        return result\r\n                    },\r\n                    optionChanged: function(args) {\r\n                        var that = this;\r\n                        var isEnabledChanged;\r\n                        var isAutoExpandAllChanged;\r\n                        if (\"masterDetail\" === args.name) {\r\n                            args.name = \"dataSource\";\r\n                            switch (args.fullName) {\r\n                                case \"masterDetail\":\r\n                                    var value = args.value || {};\r\n                                    var previousValue = args.previousValue || {};\r\n                                    isEnabledChanged = value.enabled !== previousValue.enabled;\r\n                                    isAutoExpandAllChanged = value.autoExpandAll !== previousValue.autoExpandAll;\r\n                                    break;\r\n                                case \"masterDetail.enabled\":\r\n                                    isEnabledChanged = true;\r\n                                    break;\r\n                                case \"masterDetail.autoExpandAll\":\r\n                                    isAutoExpandAllChanged = true\r\n                            }\r\n                            if (isEnabledChanged || isAutoExpandAllChanged) {\r\n                                initMasterDetail(that)\r\n                            }\r\n                        }\r\n                        that.callBase(args)\r\n                    }\r\n                }\r\n            }(),\r\n            resizing: {\r\n                fireContentReadyAction: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    this._updateParentDataGrids(this.component.$element())\r\n                },\r\n                _updateParentDataGrids: function($element) {\r\n                    var _this = this;\r\n                    var $masterDetailRow = $element.closest(\".\" + MASTER_DETAIL_ROW_CLASS);\r\n                    if ($masterDetailRow.length) {\r\n                        (0, _deferred.when)(this._updateMasterDataGrid($masterDetailRow, $element)).done(function() {\r\n                            _this._updateParentDataGrids($masterDetailRow.parent())\r\n                        })\r\n                    }\r\n                },\r\n                _updateMasterDataGrid: function($masterDetailRow, $detailElement) {\r\n                    var masterRowOptions = (0, _renderer.default)($masterDetailRow).data(\"options\");\r\n                    var masterDataGrid = (0, _renderer.default)($masterDetailRow).closest(\".\" + this.getWidgetContainerClass()).parent().data(\"dxDataGrid\");\r\n                    if (masterRowOptions && masterDataGrid) {\r\n                        if (masterDataGrid.getView(\"rowsView\").isFixedColumns()) {\r\n                            this._updateFixedMasterDetailGrids(masterDataGrid, masterRowOptions.rowIndex, $detailElement)\r\n                        } else {\r\n                            var scrollable = masterDataGrid.getScrollable();\r\n                            return scrollable && scrollable.update()\r\n                        }\r\n                    }\r\n                },\r\n                _updateFixedMasterDetailGrids: function(masterDataGrid, masterRowIndex, $detailElement) {\r\n                    var _this2 = this;\r\n                    var $rows = (0, _renderer.default)(masterDataGrid.getRowElement(masterRowIndex));\r\n                    if ($rows && 2 === $rows.length && $rows.eq(0).height() !== $rows.eq(1).height()) {\r\n                        var detailElementWidth = $detailElement.width();\r\n                        return masterDataGrid.updateDimensions().done(function() {\r\n                            var isDetailHorizontalScrollCanBeShown = _this2.option(\"columnAutoWidth\") && true === masterDataGrid.option(\"scrolling.useNative\");\r\n                            var isDetailGridWidthChanged = isDetailHorizontalScrollCanBeShown && detailElementWidth !== $detailElement.width();\r\n                            if (isDetailHorizontalScrollCanBeShown && isDetailGridWidthChanged) {\r\n                                _this2.updateDimensions()\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.option(\"masterDetail.template\")) {\r\n                        var $rowsTable = this._rowsView.getTableElement();\r\n                        if ($rowsTable) {\r\n                            $rowsTable.find(\".dx-master-detail-cell\").css(\"maxWidth\", isBestFit ? 0 : \"\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: function() {\r\n                return {\r\n                    _getCellTemplate: function(options) {\r\n                        var that = this;\r\n                        var column = options.column;\r\n                        var editingController = that.getController(\"editing\");\r\n                        var isEditRow = editingController && editingController.isEditRow(options.rowIndex);\r\n                        var template;\r\n                        if (\"detail\" === column.command && !isEditRow) {\r\n                            template = that.option(\"masterDetail.template\") || {\r\n                                allowRenderToDetachedContainer: false,\r\n                                render: that._getDefaultTemplate(column)\r\n                            }\r\n                        } else {\r\n                            template = that.callBase.apply(that, arguments)\r\n                        }\r\n                        return template\r\n                    },\r\n                    _isDetailRow: function(row) {\r\n                        return row && row.rowType && 0 === row.rowType.indexOf(\"detail\")\r\n                    },\r\n                    _createRow: function(row) {\r\n                        var $row = this.callBase(row);\r\n                        if (row && this._isDetailRow(row)) {\r\n                            this.option(\"showRowLines\") && $row.addClass(ROW_LINES_CLASS);\r\n                            $row.addClass(MASTER_DETAIL_ROW_CLASS);\r\n                            if ((0, _type.isDefined)(row.visible)) {\r\n                                $row.toggle(row.visible)\r\n                            }\r\n                        }\r\n                        return $row\r\n                    },\r\n                    _renderCells: function($row, options) {\r\n                        var row = options.row;\r\n                        var $detailCell;\r\n                        var visibleColumns = this._columnsController.getVisibleColumns();\r\n                        if (row.rowType && this._isDetailRow(row)) {\r\n                            if (this._needRenderCell(0, options.columnIndices)) {\r\n                                $detailCell = this._renderCell($row, {\r\n                                    value: null,\r\n                                    row: row,\r\n                                    rowIndex: row.rowIndex,\r\n                                    column: {\r\n                                        command: \"detail\"\r\n                                    },\r\n                                    columnIndex: 0\r\n                                });\r\n                                $detailCell.addClass(CELL_FOCUS_DISABLED_CLASS).addClass(MASTER_DETAIL_CELL_CLASS).attr(\"colSpan\", visibleColumns.length)\r\n                            }\r\n                        } else {\r\n                            this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                }\r\n            }()\r\n        }\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}