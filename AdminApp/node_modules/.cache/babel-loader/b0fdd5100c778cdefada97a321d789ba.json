{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\n\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\n\nvar _array_store = _interopRequireDefault(require(\"../../data/array_store\"));\n\nvar _custom_store = _interopRequireDefault(require(\"../../data/custom_store\"));\n\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _data_helper = _interopRequireDefault(require(\"../../data_helper\"));\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _array_compare = require(\"../../core/utils/array_compare\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar _default = {\n  defaultOptions: function () {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: _uiGrid_core.default.Controller.inherit({}).include(_data_helper.default).inherit(function () {\n      var changePaging = function (that, optionName, value) {\n        var dataSource = that._dataSource;\n\n        if (dataSource) {\n          if (void 0 !== value) {\n            if (dataSource[optionName]() !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(that.pageChanged.fire.bind(that.pageChanged));\n            }\n\n            return (0, _deferred.Deferred)().resolve().promise();\n          }\n\n          return dataSource[optionName]();\n        }\n\n        return 0;\n      };\n\n      var members = {\n        init: function () {\n          var _this = this;\n\n          var that = this;\n          that._items = [];\n          that._columnsController = that.getController(\"columns\");\n          that._currentOperationTypes = null;\n\n          that._dataChangedHandler = function (e) {\n            that._currentOperationTypes = _this._dataSource.operationTypes();\n\n            that._handleDataChanged(e);\n\n            that._currentOperationTypes = null;\n          };\n\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n\n          that._refreshDataSource();\n        },\n        callbackNames: function () {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\"];\n        },\n        callbackFlags: function (name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function () {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function () {\n          this._columnsController.reset();\n\n          this._items = [];\n\n          this._refreshDataSource();\n        },\n        optionChanged: function (args) {\n          var that = this;\n          var dataSource;\n\n          function handled() {\n            args.handled = true;\n          }\n\n          if (\"dataSource\" === args.name && args.name === args.fullName && (args.value === args.previousValue || that.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue))) {\n            if (args.value !== args.previousValue) {\n              var store = that.store();\n\n              if (store) {\n                store._array = args.value;\n              }\n            }\n\n            handled();\n            that.refresh(that.option(\"repaintChangesOnly\"));\n            return;\n          }\n\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n\n            case \"paging\":\n              dataSource = that.dataSource();\n\n              if (dataSource && that._setPagingOptions(dataSource)) {\n                dataSource.load().done(that.pageChanged.fire.bind(that.pageChanged));\n              }\n\n              handled();\n              break;\n\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n\n            case \"columns\":\n              dataSource = that.dataSource();\n\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function () {\n          return !this._isLoading;\n        },\n        getDataSource: function () {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function (returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function (filter, returnDataField) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n\n            var additionalFilter = that._calculateAdditionalFilter();\n\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = _uiGrid_core2.default.combineFilters([additionalFilter, filter]);\n              }\n            }\n\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n\n          return filter;\n        },\n        waitReady: function () {\n          if (this._updateLockCount) {\n            this._readyDeferred = new _deferred.Deferred();\n            return this._readyDeferred;\n          }\n\n          return (0, _deferred.when)();\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(function (change) {\n              return change.repaintChangesOnly;\n            });\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function (e) {\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function (e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n\n          var updateItemsHandler = function updateItemsHandler() {\n            that._columnsController.columnsChanged.remove(updateItemsHandler);\n\n            that.updateItems();\n          };\n\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n\n              that.reload();\n            }\n          } else {\n            if (changeTypes.columns) {\n              if (optionNames.filterValues || optionNames.filterValue || optionNames.selectedFilterOperation) {\n                filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n                filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n\n                if (Array.isArray(filterValues) || void 0 === e.columnIndex || (0, _type.isDefined)(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                  that._applyFilter();\n\n                  filterApplied = true;\n                }\n              }\n\n              if (!that._needApplyFilter && !_uiGrid_core2.default.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n                that._columnsController.columnsChanged.add(updateItemsHandler);\n              }\n\n              if ((0, _type.isDefined)(optionNames.visible)) {\n                var column = that._columnsController.columnOption(e.columnIndex);\n\n                if (column && ((0, _type.isDefined)(column.filterValue) || (0, _type.isDefined)(column.filterValues))) {\n                  that._applyFilter();\n\n                  filterApplied = true;\n                }\n              }\n            }\n          }\n\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function (e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            (0, _deferred.when)(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n\n              that._isDataSourceApplying = false;\n\n              var hasAdditionalFilter = function () {\n                var additionalFilter = that._calculateAdditionalFilter();\n\n                return additionalFilter && additionalFilter.length;\n              };\n\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n\n              if (needApplyFilter && !that._isAllDataTypesDefined && hasAdditionalFilter()) {\n                _ui.default.log(\"W1005\", that.component.NAME);\n\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n\n              that._handleLoadingChanged(true);\n            }\n\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function (isLoading) {\n          this._isLoading = isLoading;\n\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function (e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        fireError: function () {\n          this.dataErrorOccurred.fire(_ui.default.Error.apply(_ui.default, arguments));\n        },\n        _setPagingOptions: function (dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isChanged = true;\n          }\n\n          return isChanged;\n        },\n        _getSpecificDataSourceOption: function () {\n          var dataSource = this.option(\"dataSource\");\n\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n\n          return dataSource;\n        },\n        _initDataSource: function () {\n          var that = this;\n          var dataSource = this.option(\"dataSource\");\n          var oldDataSource = this._dataSource;\n          that.callBase();\n          dataSource = that._dataSource;\n          that._useSortingGroupingFromColumns = true;\n\n          if (dataSource) {\n            that._setPagingOptions(dataSource);\n\n            that.setDataSource(dataSource);\n          } else {\n            if (oldDataSource) {\n              that.updateItems();\n            }\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n          var result = new _deferred.Deferred();\n          (0, _deferred.when)(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(result.resolve).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function (items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function () {\n          return 0;\n        },\n        _processItems: function (items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n\n          var visibleItems = that._items;\n          var lastVisibleItem = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n          var dataIndex = (0, _type.isDefined)(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          (0, _iterator.each)(items, function (index, item) {\n            if ((0, _type.isDefined)(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function (item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function (data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function (dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function (data, columns, isModified) {\n          var values = [];\n          var value;\n\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else {\n                if (column.dataField) {\n                  value = data[column.dataField];\n                }\n              }\n            }\n\n            values.push(value);\n          }\n\n          return values;\n        },\n        _applyChange: function (change) {\n          var that = this;\n\n          if (\"update\" === change.changeType) {\n            that._applyChangeUpdate(change);\n          } else {\n            if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n              that._applyChangesOnly(change);\n            } else {\n              if (\"refresh\" === change.changeType) {\n                that._applyChangeFull(change);\n              }\n            }\n          }\n        },\n        _applyChangeFull: function (change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function (change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n\n          return rowIndices;\n        },\n        _applyChangeUpdate: function (change) {\n          var that = this;\n          var items = change.items;\n\n          var rowIndices = that._getRowIndices(change);\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n\n          var equalItems = function (item1, item2, strict) {\n            var result = item1 && item2 && (0, _common.equalByValue)(item1.key, item2.key);\n\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n\n            return result;\n          };\n\n          (0, _iterator.each)(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n\n            if (prevIndex === rowIndex) {\n              return;\n            }\n\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else {\n                if (repaintChangesOnly && !change.isFullUpdate) {\n                  columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n                }\n              }\n            } else {\n              if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n                changeType = \"insert\";\n\n                that._items.splice(rowIndex, 0, newItem);\n\n                rowIndexCorrection++;\n              } else {\n                if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n                  changeType = \"remove\";\n\n                  that._items.splice(rowIndex, 1);\n\n                  rowIndexCorrection--;\n                  prevIndex = -1;\n                } else {\n                  if (newItem) {\n                    changeType = \"update\";\n                    that._items[rowIndex] = newItem;\n                  } else {\n                    return;\n                  }\n                }\n              }\n            }\n\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n\n          return false;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          if (oldItem.rowType === newItem.rowType && \"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n            var columnIndices = [];\n\n            if (\"detail\" !== newItem.rowType) {\n              for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                  columnIndices.push(columnIndex);\n                }\n              }\n            }\n\n            return columnIndices;\n          }\n        },\n        _partialUpdateRow: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n\n            oldItem.update && oldItem.update(newItem);\n          }\n\n          return changedColumnIndices;\n        },\n        _isItemEquals: function (item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n\n          var compareFields = [\"modified\", \"isNewRow\", \"removed\", \"isEditing\"];\n\n          if (compareFields.some(function (field) {\n            return item1[field] !== item2[field];\n          })) {\n            return false;\n          }\n\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        _applyChangesOnly: function (change) {\n          var _this2 = this;\n\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n\n          var isItemEquals = function (item1, item2) {\n            if (!_this2._isItemEquals(item1, item2)) {\n              return false;\n            }\n\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2);\n                }\n              });\n            }\n\n            return true;\n          };\n\n          var oldItems = this._items.slice();\n\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = (0, _array_compare.findChanges)(oldItems, change.items, getRowKey, isItemEquals);\n\n          if (!result) {\n            this._applyChangeFull(change);\n\n            return;\n          }\n\n          result.forEach(function (change) {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n\n                var changedColumnIndices = _this2._partialUpdateRow(oldItem, newItem, index, true);\n\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                _this2._items[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n\n                _this2._items.splice(change.index, 0, change.data);\n\n                break;\n\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n\n                _this2._items.splice(change.index, 1);\n\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n\n          this._correctRowIndices(function (rowIndex) {\n            var oldItem = oldItems[rowIndex];\n            var key = getRowKey(oldItem);\n            var newRowIndex = newIndexByKey[key];\n            return newRowIndex >= 0 ? newRowIndex - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: _common.noop,\n        _updateItemsCore: function (change) {\n          var that = this;\n          var items;\n          var dataSource = that._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n\n          if (dataSource) {\n            items = change.items || dataSource.items();\n            items = that._beforeProcessItems(items);\n            items = that._processItems(items, change);\n            change.items = items;\n            var oldItems = that._items.length === items.length && that._items;\n\n            that._applyChange(change);\n\n            var rowIndexDelta = that.getRowIndexDelta();\n            (0, _iterator.each)(that._items, function (index, item) {\n              item.rowIndex = index - rowIndexDelta;\n\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n            });\n          } else {\n            that._items = [];\n          }\n        },\n        _handleChanging: function (e) {\n          var that = this;\n          var rows = that.getVisibleRows();\n          var dataSource = that.dataSource();\n\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function (change, isDataChanged) {\n          change = change || {};\n          var that = this;\n\n          if (void 0 !== that._repaintChangesOnly) {\n            change.repaintChangesOnly = that._repaintChangesOnly;\n          } else {\n            if (change.changes) {\n              change.repaintChangesOnly = that.option(\"repaintChangesOnly\");\n            } else {\n              if (isDataChanged) {\n                var operationTypes = that.dataSource().operationTypes();\n                change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\n                change.isDataChanged = true;\n\n                if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n                  change.needUpdateDimensions = true;\n                }\n              }\n            }\n          }\n\n          if (that._updateLockCount) {\n            that._changes.push(change);\n\n            return;\n          }\n\n          that._updateItemsCore(change);\n\n          if (change.cancel) {\n            return;\n          }\n\n          that._fireChanged(change);\n        },\n        loadingOperationTypes: function () {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function (change) {\n          var _this3 = this;\n\n          if (this._currentOperationTypes) {\n            change.operationTypes = this._currentOperationTypes;\n            this._currentOperationTypes = null;\n          }\n\n          (0, _common.deferRender)(function () {\n            _this3.changed.fire(change);\n          });\n        },\n        isLoading: function () {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function () {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function () {\n          return null;\n        },\n        _applyFilter: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            return that.reload().done(that.pageChanged.fire.bind(that.pageChanged));\n          }\n        },\n        filter: function filter(filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n\n          if (0 === arguments.length) {\n            return filter;\n          }\n\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n\n          if (_uiGrid_core2.default.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n\n          this._applyFilter();\n        },\n        clearFilter: function (filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n\n          var clearColumnOption = function (optionName) {\n            var columnCount = columnsController.columnCount();\n\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n\n          that.component.beginUpdate();\n\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function () {\n          var that = this;\n\n          var changedHandler = function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          };\n\n          that.changed.add(changedHandler);\n        },\n        _getDataSourceAdapter: _common.noop,\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function (store) {\n          store = store || this.store();\n          return store instanceof _array_store.default;\n        },\n        isCustomStore: function (store) {\n          store = store || this.store();\n          return store instanceof _custom_store.default;\n        },\n        _createDataSourceAdapter: function (dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = (0, _extend.extend)({}, enabledRemoteOperations, remoteOperations);\n          }\n\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function (dataSource) {\n          var that = this;\n          var oldDataSource = that._dataSource;\n\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(that._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\n            oldDataSource.loadError.remove(that._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(that._changingHandler);\n            oldDataSource.dispose(that._isSharedDataSource);\n          }\n\n          if (dataSource) {\n            dataSource = that._createDataSourceAdapter(dataSource);\n          }\n\n          that._dataSource = dataSource;\n\n          if (dataSource) {\n            that._fireDataSourceChanged();\n\n            that._isLoading = !dataSource.isLoaded();\n            that._needApplyFilter = true;\n            that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(that._dataChangedHandler);\n            dataSource.loadingChanged.add(that._loadingChangedHandler);\n            dataSource.loadError.add(that._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(that._changingHandler);\n          }\n        },\n        items: function () {\n          return this._items;\n        },\n        isEmpty: function () {\n          return !this.items().length;\n        },\n        pageCount: function () {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function () {\n          return this._dataSource;\n        },\n        store: function () {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function (data) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n\n              dataSource._handleDataLoaded(options);\n\n              (0, _deferred.when)(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else {\n              if (!dataSource.isLoading()) {\n                var loadOptions = (0, _extend.extend)({}, dataSource.loadOptions(), {\n                  isLoadingAll: true,\n                  requireTotalCount: false\n                });\n                dataSource.load(loadOptions).done(function (items, extra) {\n                  items = that._beforeProcessItems(items);\n                  items = that._processItems(items, {\n                    changeType: \"loadingAll\"\n                  });\n                  d.resolve(items, extra && extra.summary);\n                }).fail(d.reject);\n              } else {\n                d.reject();\n              }\n            }\n          } else {\n            d.resolve([]);\n          }\n\n          return d;\n        },\n        getKeyByRowIndex: function (rowIndex, byLoaded) {\n          var item = this.items(byLoaded)[rowIndex];\n\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function (key, byLoaded) {\n          return _uiGrid_core2.default.getIndexByKey(key, this.items(byLoaded));\n        },\n        keyOf: function (data) {\n          var store = this.store();\n\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function (key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n\n          if (!store) {\n            return;\n          }\n\n          if (rowIndex >= 0) {\n            result = new _deferred.Deferred().resolve(this.items()[rowIndex].data);\n          }\n\n          return result || store.byKey(key);\n        },\n        key: function () {\n          var store = this.store();\n\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function () {\n          return 0;\n        },\n        getDataByKeys: function (rowKeys) {\n          var that = this;\n          var result = new _deferred.Deferred();\n          var deferreds = [];\n          var data = [];\n          (0, _iterator.each)(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n\n          _deferred.when.apply(_renderer.default, deferreds).always(function () {\n            result.resolve(data);\n          });\n\n          return result;\n        },\n        pageIndex: function (value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function (value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function (messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function () {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n\n          this._fireLoadingChanged();\n        },\n        refresh: function (options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else {\n            if (!options) {\n              options = {\n                lookup: true,\n                selection: true,\n                reload: true\n              };\n            }\n          }\n\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new _deferred.Deferred();\n\n          var customizeLoadResult = function () {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n\n          (0, _deferred.when)(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              (0, _deferred.when)(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function () {\n          return this.items();\n        },\n        _disposeDataSource: function () {\n          this.setDataSource(null);\n        },\n        dispose: function () {\n          this._disposeDataSource();\n\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function (rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n\n          if (rowIndexes.length > 1 || (0, _type.isDefined)(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function (fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function () {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function () {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        }\n      };\n\n      _uiGrid_core2.default.proxyMethod(members, \"load\");\n\n      _uiGrid_core2.default.proxyMethod(members, \"reload\");\n\n      _uiGrid_core2.default.proxyMethod(members, \"push\");\n\n      _uiGrid_core2.default.proxyMethod(members, \"itemsCount\", 0);\n\n      _uiGrid_core2.default.proxyMethod(members, \"totalItemsCount\", 0);\n\n      _uiGrid_core2.default.proxyMethod(members, \"hasKnownLastPage\", true);\n\n      _uiGrid_core2.default.proxyMethod(members, \"isLoaded\", true);\n\n      _uiGrid_core2.default.proxyMethod(members, \"totalCount\", 0);\n\n      return members;\n    }())\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/grid_core/ui.grid_core.data_controller.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_uiGrid_core","_uiGrid_core2","_array_store","_custom_store","_ui","_common","_iterator","_type","_extend","_data_helper","_deferred","_array_compare","obj","__esModule","_default","defaultOptions","loadingTimeout","dataSource","cacheEnabled","repaintChangesOnly","highlightChanges","onDataErrorOccurred","remoteOperations","paging","enabled","pageSize","pageIndex","controllers","data","Controller","inherit","include","changePaging","that","optionName","value","_dataSource","_skipProcessingPagingChange","option","done","pageChanged","fire","bind","Deferred","resolve","promise","members","init","_this","_items","_columnsController","getController","_currentOperationTypes","_dataChangedHandler","e","operationTypes","_handleDataChanged","_columnsChangedHandler","_handleColumnsChanged","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","optionChanged","args","handled","fullName","previousValue","Array","isArray","store","_array","refresh","_setPagingOptions","load","isLoading","_useSortingGroupingFromColumns","callBase","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","columnsController","additionalFilter","_calculateAdditionalFilter","isDataSourceApplied","isAllDataTypesDefined","combineFilters","updateFilter","filtering","waitReady","_updateLockCount","_readyDeferred","when","_endUpdateCore","changes","length","every","change","updateItems","storeLoadOptions","isCustomLoading","isLoadingAll","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","updateItemsHandler","remove","reload","columns","selectedFilterOperation","columnOption","columnIndex","isDefined","_applyFilter","_needApplyFilter","checkChanges","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","hasAdditionalFilter","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","fireError","Error","apply","arguments","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","_processItems","rowIndexDelta","changeType","visibleColumns","getVisibleColumns","visibleItems","lastVisibleItem","dataIndex","options","each","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","equalByValue","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","changedColumnIndices","cells","forEach","cell","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","compareFields","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","isExpanded","summaryCellsMatch","summaryCells","continuationMatch","isContinuation","isContinuationOnNextPage","_this2","newIndexByKey","getRowKey","isItemEquals","oldItems","findChanges","_correctRowIndices","newRowIndex","noop","_updateItemsCore","rows","getVisibleRows","isDataChanged","groupExpanding","needUpdateDimensions","cancel","_fireChanged","loadingOperationTypes","_this3","deferRender","changed","loadingChanged","_loadingText","filterExpr","prototype","call","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","extend","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","isEmpty","pageCount","loadAll","d","loadOptions","_handleDataLoaded","extra","getKeyByRowIndex","byLoaded","getRowIndexByKey","getIndexByKey","byKey","getRowIndexOffset","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","proxyMethod","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _uiGrid_core = _interopRequireDefault(require(\"./ui.grid_core.modules\"));\r\nvar _uiGrid_core2 = _interopRequireDefault(require(\"./ui.grid_core.utils\"));\r\nvar _array_store = _interopRequireDefault(require(\"../../data/array_store\"));\r\nvar _custom_store = _interopRequireDefault(require(\"../../data/custom_store\"));\r\nvar _ui = _interopRequireDefault(require(\"../widget/ui.errors\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _data_helper = _interopRequireDefault(require(\"../../data_helper\"));\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _array_compare = require(\"../../core/utils/array_compare\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar _default = {\r\n    defaultOptions: function() {\r\n        return {\r\n            loadingTimeout: 0,\r\n            dataSource: null,\r\n            cacheEnabled: true,\r\n            repaintChangesOnly: false,\r\n            highlightChanges: false,\r\n            onDataErrorOccurred: null,\r\n            remoteOperations: \"auto\",\r\n            paging: {\r\n                enabled: true,\r\n                pageSize: void 0,\r\n                pageIndex: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        data: _uiGrid_core.default.Controller.inherit({}).include(_data_helper.default).inherit(function() {\r\n            var changePaging = function(that, optionName, value) {\r\n                var dataSource = that._dataSource;\r\n                if (dataSource) {\r\n                    if (void 0 !== value) {\r\n                        if (dataSource[optionName]() !== value) {\r\n                            if (\"pageSize\" === optionName) {\r\n                                dataSource.pageIndex(0)\r\n                            }\r\n                            dataSource[optionName](value);\r\n                            that._skipProcessingPagingChange = true;\r\n                            that.option(\"paging.\" + optionName, value);\r\n                            that._skipProcessingPagingChange = false;\r\n                            return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                        }\r\n                        return (0, _deferred.Deferred)().resolve().promise()\r\n                    }\r\n                    return dataSource[optionName]()\r\n                }\r\n                return 0\r\n            };\r\n            var members = {\r\n                init: function() {\r\n                    var _this = this;\r\n                    var that = this;\r\n                    that._items = [];\r\n                    that._columnsController = that.getController(\"columns\");\r\n                    that._currentOperationTypes = null;\r\n                    that._dataChangedHandler = function(e) {\r\n                        that._currentOperationTypes = _this._dataSource.operationTypes();\r\n                        that._handleDataChanged(e);\r\n                        that._currentOperationTypes = null\r\n                    };\r\n                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\r\n                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n                    that._loadErrorHandler = that._handleLoadError.bind(that);\r\n                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n                    that._changingHandler = that._handleChanging.bind(that);\r\n                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);\r\n                    that._isLoading = false;\r\n                    that._isCustomLoading = false;\r\n                    that._repaintChangesOnly = void 0;\r\n                    that._changes = [];\r\n                    that.createAction(\"onDataErrorOccurred\");\r\n                    that.dataErrorOccurred.add(function(error) {\r\n                        return that.executeAction(\"onDataErrorOccurred\", {\r\n                            error: error\r\n                        })\r\n                    });\r\n                    that._refreshDataSource()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\"]\r\n                },\r\n                callbackFlags: function(name) {\r\n                    if (\"dataErrorOccurred\" === name) {\r\n                        return {\r\n                            stopOnFalse: true\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"]\r\n                },\r\n                reset: function() {\r\n                    this._columnsController.reset();\r\n                    this._items = [];\r\n                    this._refreshDataSource()\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    var dataSource;\r\n\r\n                    function handled() {\r\n                        args.handled = true\r\n                    }\r\n                    if (\"dataSource\" === args.name && args.name === args.fullName && (args.value === args.previousValue || that.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue))) {\r\n                        if (args.value !== args.previousValue) {\r\n                            var store = that.store();\r\n                            if (store) {\r\n                                store._array = args.value\r\n                            }\r\n                        }\r\n                        handled();\r\n                        that.refresh(that.option(\"repaintChangesOnly\"));\r\n                        return\r\n                    }\r\n                    switch (args.name) {\r\n                        case \"cacheEnabled\":\r\n                        case \"repaintChangesOnly\":\r\n                        case \"highlightChanges\":\r\n                        case \"loadingTimeout\":\r\n                            handled();\r\n                            break;\r\n                        case \"remoteOperations\":\r\n                        case \"keyExpr\":\r\n                        case \"dataSource\":\r\n                        case \"scrolling\":\r\n                            handled();\r\n                            that.reset();\r\n                            break;\r\n                        case \"paging\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && that._setPagingOptions(dataSource)) {\r\n                                dataSource.load().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                            }\r\n                            handled();\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that.reset();\r\n                            break;\r\n                        case \"columns\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                                this._useSortingGroupingFromColumns = true;\r\n                                dataSource.load()\r\n                            }\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                isReady: function() {\r\n                    return !this._isLoading\r\n                },\r\n                getDataSource: function() {\r\n                    return this._dataSource && this._dataSource._dataSource\r\n                },\r\n                getCombinedFilter: function(returnDataField) {\r\n                    return this.combinedFilter(void 0, returnDataField)\r\n                },\r\n                combinedFilter: function(filter, returnDataField) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    if (dataSource) {\r\n                        if (void 0 === filter) {\r\n                            filter = dataSource.filter()\r\n                        }\r\n                        var additionalFilter = that._calculateAdditionalFilter();\r\n                        if (additionalFilter) {\r\n                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\r\n                                filter = _uiGrid_core2.default.combineFilters([additionalFilter, filter])\r\n                            }\r\n                        }\r\n                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)\r\n                    }\r\n                    return filter\r\n                },\r\n                waitReady: function() {\r\n                    if (this._updateLockCount) {\r\n                        this._readyDeferred = new _deferred.Deferred;\r\n                        return this._readyDeferred\r\n                    }\r\n                    return (0, _deferred.when)()\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    if (changes.length) {\r\n                        this._changes = [];\r\n                        var repaintChangesOnly = changes.every(function(change) {\r\n                            return change.repaintChangesOnly\r\n                        });\r\n                        this.updateItems(1 === changes.length ? changes[0] : {\r\n                            repaintChangesOnly: repaintChangesOnly\r\n                        })\r\n                    }\r\n                    if (this._readyDeferred) {\r\n                        this._readyDeferred.resolve();\r\n                        this._readyDeferred = null\r\n                    }\r\n                },\r\n                _handleCustomizeStoreLoadOptions: function(e) {\r\n                    var columnsController = this._columnsController;\r\n                    var dataSource = this._dataSource;\r\n                    var storeLoadOptions = e.storeLoadOptions;\r\n                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n                        return\r\n                    }\r\n                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n                    if (!columnsController.isDataSourceApplied()) {\r\n                        columnsController.updateColumnDataTypes(dataSource)\r\n                    }\r\n                    this._columnsUpdating = true;\r\n                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n                    this._columnsUpdating = false;\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n                    dataSource.sort(storeLoadOptions.sort);\r\n                    dataSource.group(storeLoadOptions.group);\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n                },\r\n                _handleColumnsChanged: function(e) {\r\n                    var that = this;\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    var filterValue;\r\n                    var filterValues;\r\n                    var filterApplied;\r\n                    var updateItemsHandler = function updateItemsHandler() {\r\n                        that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n                        that.updateItems()\r\n                    };\r\n                    if (changeTypes.sorting || changeTypes.grouping) {\r\n                        if (that._dataSource && !that._columnsUpdating) {\r\n                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                            that.reload()\r\n                        }\r\n                    } else {\r\n                        if (changeTypes.columns) {\r\n                            if (optionNames.filterValues || optionNames.filterValue || optionNames.selectedFilterOperation) {\r\n                                filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                                filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n                                if (Array.isArray(filterValues) || void 0 === e.columnIndex || (0, _type.isDefined)(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                                    that._applyFilter();\r\n                                    filterApplied = true\r\n                                }\r\n                            }\r\n                            if (!that._needApplyFilter && !_uiGrid_core2.default.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                                that._columnsController.columnsChanged.add(updateItemsHandler)\r\n                            }\r\n                            if ((0, _type.isDefined)(optionNames.visible)) {\r\n                                var column = that._columnsController.columnOption(e.columnIndex);\r\n                                if (column && ((0, _type.isDefined)(column.filterValue) || (0, _type.isDefined)(column.filterValues))) {\r\n                                    that._applyFilter();\r\n                                    filterApplied = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!filterApplied && changeTypes.filtering) {\r\n                        that.reload()\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    var isAsyncDataSourceApplying = false;\r\n                    this._useSortingGroupingFromColumns = false;\r\n                    if (dataSource && !that._isDataSourceApplying) {\r\n                        that._isDataSourceApplying = true;\r\n                        (0, _deferred.when)(that._columnsController.applyDataSource(dataSource)).done(function() {\r\n                            if (that._isLoading) {\r\n                                that._handleLoadingChanged(false)\r\n                            }\r\n                            if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                                e.isDelayed = false\r\n                            }\r\n                            that._isDataSourceApplying = false;\r\n                            var hasAdditionalFilter = function() {\r\n                                var additionalFilter = that._calculateAdditionalFilter();\r\n                                return additionalFilter && additionalFilter.length\r\n                            };\r\n                            var needApplyFilter = that._needApplyFilter;\r\n                            that._needApplyFilter = false;\r\n                            if (needApplyFilter && !that._isAllDataTypesDefined && hasAdditionalFilter()) {\r\n                                _ui.default.log(\"W1005\", that.component.NAME);\r\n                                that._applyFilter()\r\n                            } else {\r\n                                that.updateItems(e, true)\r\n                            }\r\n                        }).fail(function() {\r\n                            that._isDataSourceApplying = false\r\n                        });\r\n                        if (that._isDataSourceApplying) {\r\n                            isAsyncDataSourceApplying = true;\r\n                            that._handleLoadingChanged(true)\r\n                        }\r\n                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n                    }\r\n                },\r\n                _handleLoadingChanged: function(isLoading) {\r\n                    this._isLoading = isLoading;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                _handleLoadError: function(e) {\r\n                    this.dataErrorOccurred.fire(e)\r\n                },\r\n                fireError: function() {\r\n                    this.dataErrorOccurred.fire(_ui.default.Error.apply(_ui.default, arguments))\r\n                },\r\n                _setPagingOptions: function(dataSource) {\r\n                    var pageIndex = this.option(\"paging.pageIndex\");\r\n                    var pageSize = this.option(\"paging.pageSize\");\r\n                    var pagingEnabled = this.option(\"paging.enabled\");\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    var appendMode = \"infinite\" === scrollingMode;\r\n                    var virtualMode = \"virtual\" === scrollingMode;\r\n                    var paginate = pagingEnabled || virtualMode || appendMode;\r\n                    var isChanged = false;\r\n                    dataSource.requireTotalCount(!appendMode);\r\n                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n                        dataSource.paginate(paginate);\r\n                        isChanged = true\r\n                    }\r\n                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n                        dataSource.pageSize(pageSize);\r\n                        isChanged = true\r\n                    }\r\n                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n                        dataSource.pageIndex(pageIndex);\r\n                        isChanged = true\r\n                    }\r\n                    return isChanged\r\n                },\r\n                _getSpecificDataSourceOption: function() {\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    if (Array.isArray(dataSource)) {\r\n                        return {\r\n                            store: {\r\n                                type: \"array\",\r\n                                data: dataSource,\r\n                                key: this.option(\"keyExpr\")\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataSource\r\n                },\r\n                _initDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    var oldDataSource = this._dataSource;\r\n                    that.callBase();\r\n                    dataSource = that._dataSource;\r\n                    that._useSortingGroupingFromColumns = true;\r\n                    if (dataSource) {\r\n                        that._setPagingOptions(dataSource);\r\n                        that.setDataSource(dataSource)\r\n                    } else {\r\n                        if (oldDataSource) {\r\n                            that.updateItems()\r\n                        }\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var result = new _deferred.Deferred;\r\n                    (0, _deferred.when)(this._columnsController.refresh(true)).always(function() {\r\n                        if (dataSource) {\r\n                            dataSource.load().done(result.resolve).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    });\r\n                    return result.promise()\r\n                },\r\n                _beforeProcessItems: function(items) {\r\n                    return items.slice(0)\r\n                },\r\n                getRowIndexDelta: function() {\r\n                    return 0\r\n                },\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var changeType = change.changeType;\r\n                    var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n                    var visibleItems = that._items;\r\n                    var lastVisibleItem = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\r\n                    var dataIndex = (0, _type.isDefined)(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\r\n                    var options = {\r\n                        visibleColumns: visibleColumns,\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    var result = [];\r\n                    (0, _iterator.each)(items, function(index, item) {\r\n                        if ((0, _type.isDefined)(item)) {\r\n                            options.rowIndex = index - rowIndexDelta;\r\n                            item = that._processItem(item, options);\r\n                            result.push(item)\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this._generateDataItem(item, options);\r\n                    item = this._processDataItem(item, options);\r\n                    item.dataIndex = options.dataIndex++;\r\n                    return item\r\n                },\r\n                _generateDataItem: function(data) {\r\n                    return {\r\n                        rowType: \"data\",\r\n                        data: data,\r\n                        key: this.keyOf(data)\r\n                    }\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n                    return dataItem\r\n                },\r\n                generateDataValues: function(data, columns, isModified) {\r\n                    var values = [];\r\n                    var value;\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        var column = columns[i];\r\n                        value = isModified ? void 0 : null;\r\n                        if (!column.command) {\r\n                            if (column.calculateCellValue) {\r\n                                value = column.calculateCellValue(data)\r\n                            } else {\r\n                                if (column.dataField) {\r\n                                    value = data[column.dataField]\r\n                                }\r\n                            }\r\n                        }\r\n                        values.push(value)\r\n                    }\r\n                    return values\r\n                },\r\n                _applyChange: function(change) {\r\n                    var that = this;\r\n                    if (\"update\" === change.changeType) {\r\n                        that._applyChangeUpdate(change)\r\n                    } else {\r\n                        if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n                            that._applyChangesOnly(change)\r\n                        } else {\r\n                            if (\"refresh\" === change.changeType) {\r\n                                that._applyChangeFull(change)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _applyChangeFull: function(change) {\r\n                    this._items = change.items.slice(0)\r\n                },\r\n                _getRowIndices: function(change) {\r\n                    var rowIndices = change.rowIndices.slice(0);\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    rowIndices.sort(function(a, b) {\r\n                        return a - b\r\n                    });\r\n                    for (var i = 0; i < rowIndices.length; i++) {\r\n                        var correctedRowIndex = rowIndices[i];\r\n                        if (change.allowInvisibleRowIndices) {\r\n                            correctedRowIndex += rowIndexDelta\r\n                        }\r\n                        if (correctedRowIndex < 0) {\r\n                            rowIndices.splice(i, 1);\r\n                            i--\r\n                        }\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    var that = this;\r\n                    var items = change.items;\r\n                    var rowIndices = that._getRowIndices(change);\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n                    var prevIndex = -1;\r\n                    var rowIndexCorrection = 0;\r\n                    var changeType;\r\n                    change.items = [];\r\n                    change.rowIndices = [];\r\n                    change.columnIndices = [];\r\n                    change.changeTypes = [];\r\n                    var equalItems = function(item1, item2, strict) {\r\n                        var result = item1 && item2 && (0, _common.equalByValue)(item1.key, item2.key);\r\n                        if (result && strict) {\r\n                            result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n                        }\r\n                        return result\r\n                    };\r\n                    (0, _iterator.each)(rowIndices, function(index, rowIndex) {\r\n                        var columnIndices;\r\n                        rowIndex += rowIndexCorrection + rowIndexDelta;\r\n                        if (prevIndex === rowIndex) {\r\n                            return\r\n                        }\r\n                        prevIndex = rowIndex;\r\n                        var oldItem = that._items[rowIndex];\r\n                        var oldNextItem = that._items[rowIndex + 1];\r\n                        var newItem = items[rowIndex];\r\n                        var newNextItem = items[rowIndex + 1];\r\n                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n                        if (newItem) {\r\n                            newItem.rowIndex = rowIndex;\r\n                            change.items.push(newItem)\r\n                        }\r\n                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem;\r\n                            if (oldItem.visible !== newItem.visible) {\r\n                                change.items.splice(-1, 1, {\r\n                                    visible: newItem.visible\r\n                                })\r\n                            } else {\r\n                                if (repaintChangesOnly && !change.isFullUpdate) {\r\n                                    columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                                changeType = \"insert\";\r\n                                that._items.splice(rowIndex, 0, newItem);\r\n                                rowIndexCorrection++\r\n                            } else {\r\n                                if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                                    changeType = \"remove\";\r\n                                    that._items.splice(rowIndex, 1);\r\n                                    rowIndexCorrection--;\r\n                                    prevIndex = -1\r\n                                } else {\r\n                                    if (newItem) {\r\n                                        changeType = \"update\";\r\n                                        that._items[rowIndex] = newItem\r\n                                    } else {\r\n                                        return\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        change.rowIndices.push(rowIndex - rowIndexDelta);\r\n                        change.changeTypes.push(changeType);\r\n                        change.columnIndices.push(columnIndices)\r\n                    })\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n                        return true\r\n                    }\r\n\r\n                    function isCellModified(row, columnIndex) {\r\n                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n                    }\r\n                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    if (oldItem.rowType === newItem.rowType && \"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                        var columnIndices = [];\r\n                        if (\"detail\" !== newItem.rowType) {\r\n                            for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                                if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                                    columnIndices.push(columnIndex)\r\n                                }\r\n                            }\r\n                        }\r\n                        return columnIndices\r\n                    }\r\n                },\r\n                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n                    if (changedColumnIndices) {\r\n                        oldItem.cells && oldItem.cells.forEach(function(cell, columnIndex) {\r\n                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                            if (!isCellChanged && cell && cell.update) {\r\n                                cell.update(newItem)\r\n                            }\r\n                        });\r\n                        newItem.update = oldItem.update;\r\n                        newItem.watch = oldItem.watch;\r\n                        newItem.cells = oldItem.cells;\r\n                        if (isLiveUpdate) {\r\n                            newItem.oldValues = oldItem.values\r\n                        }\r\n                        oldItem.update && oldItem.update(newItem)\r\n                    }\r\n                    return changedColumnIndices\r\n                },\r\n                _isItemEquals: function(item1, item2) {\r\n                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n                        return false\r\n                    }\r\n                    var compareFields = [\"modified\", \"isNewRow\", \"removed\", \"isEditing\"];\r\n                    if (compareFields.some(function(field) {\r\n                            return item1[field] !== item2[field]\r\n                        })) {\r\n                        return false\r\n                    }\r\n                    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n                        var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n                        var expandedMatch = item1.isExpanded === item2.isExpanded;\r\n                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    var _this2 = this;\r\n                    var rowIndices = [];\r\n                    var columnIndices = [];\r\n                    var changeTypes = [];\r\n                    var items = [];\r\n                    var newIndexByKey = {};\r\n\r\n                    function getRowKey(row) {\r\n                        if (row) {\r\n                            return row.rowType + \",\" + JSON.stringify(row.key)\r\n                        }\r\n                    }\r\n                    var isItemEquals = function(item1, item2) {\r\n                        if (!_this2._isItemEquals(item1, item2)) {\r\n                            return false\r\n                        }\r\n                        if (item1.cells) {\r\n                            item1.update && item1.update(item2);\r\n                            item1.cells.forEach(function(cell) {\r\n                                if (cell && cell.update) {\r\n                                    cell.update(item2)\r\n                                }\r\n                            })\r\n                        }\r\n                        return true\r\n                    };\r\n                    var oldItems = this._items.slice();\r\n                    change.items.forEach(function(item, index) {\r\n                        var key = getRowKey(item);\r\n                        newIndexByKey[key] = index;\r\n                        item.rowIndex = index\r\n                    });\r\n                    var result = (0, _array_compare.findChanges)(oldItems, change.items, getRowKey, isItemEquals);\r\n                    if (!result) {\r\n                        this._applyChangeFull(change);\r\n                        return\r\n                    }\r\n                    result.forEach(function(change) {\r\n                        switch (change.type) {\r\n                            case \"update\":\r\n                                var index = change.index;\r\n                                var newItem = change.data;\r\n                                var oldItem = change.oldItem;\r\n                                var changedColumnIndices = _this2._partialUpdateRow(oldItem, newItem, index, true);\r\n                                rowIndices.push(index);\r\n                                changeTypes.push(\"update\");\r\n                                items.push(newItem);\r\n                                _this2._items[index] = newItem;\r\n                                columnIndices.push(changedColumnIndices);\r\n                                break;\r\n                            case \"insert\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"insert\");\r\n                                items.push(change.data);\r\n                                columnIndices.push(void 0);\r\n                                _this2._items.splice(change.index, 0, change.data);\r\n                                break;\r\n                            case \"remove\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"remove\");\r\n                                _this2._items.splice(change.index, 1);\r\n                                items.push(change.oldItem);\r\n                                columnIndices.push(void 0)\r\n                        }\r\n                    });\r\n                    change.repaintChangesOnly = true;\r\n                    change.changeType = \"update\";\r\n                    change.rowIndices = rowIndices;\r\n                    change.columnIndices = columnIndices;\r\n                    change.changeTypes = changeTypes;\r\n                    change.items = items;\r\n                    if (oldItems.length) {\r\n                        change.isLiveUpdate = true\r\n                    }\r\n                    this._correctRowIndices(function(rowIndex) {\r\n                        var oldItem = oldItems[rowIndex];\r\n                        var key = getRowKey(oldItem);\r\n                        var newRowIndex = newIndexByKey[key];\r\n                        return newRowIndex >= 0 ? newRowIndex - rowIndex : 0\r\n                    })\r\n                },\r\n                _correctRowIndices: _common.noop,\r\n                _updateItemsCore: function(change) {\r\n                    var that = this;\r\n                    var items;\r\n                    var dataSource = that._dataSource;\r\n                    var changeType = change.changeType || \"refresh\";\r\n                    change.changeType = changeType;\r\n                    if (dataSource) {\r\n                        items = change.items || dataSource.items();\r\n                        items = that._beforeProcessItems(items);\r\n                        items = that._processItems(items, change);\r\n                        change.items = items;\r\n                        var oldItems = that._items.length === items.length && that._items;\r\n                        that._applyChange(change);\r\n                        var rowIndexDelta = that.getRowIndexDelta();\r\n                        (0, _iterator.each)(that._items, function(index, item) {\r\n                            item.rowIndex = index - rowIndexDelta;\r\n                            if (oldItems) {\r\n                                item.cells = oldItems[index].cells || []\r\n                            }\r\n                        })\r\n                    } else {\r\n                        that._items = []\r\n                    }\r\n                },\r\n                _handleChanging: function(e) {\r\n                    var that = this;\r\n                    var rows = that.getVisibleRows();\r\n                    var dataSource = that.dataSource();\r\n                    if (dataSource) {\r\n                        e.changes.forEach(function(change) {\r\n                            if (\"insert\" === change.type && change.index >= 0) {\r\n                                var dataIndex = 0;\r\n                                for (var i = 0; i < change.index; i++) {\r\n                                    var row = rows[i];\r\n                                    if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                                        dataIndex++\r\n                                    }\r\n                                }\r\n                                change.index = dataIndex\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                updateItems: function(change, isDataChanged) {\r\n                    change = change || {};\r\n                    var that = this;\r\n                    if (void 0 !== that._repaintChangesOnly) {\r\n                        change.repaintChangesOnly = that._repaintChangesOnly\r\n                    } else {\r\n                        if (change.changes) {\r\n                            change.repaintChangesOnly = that.option(\"repaintChangesOnly\")\r\n                        } else {\r\n                            if (isDataChanged) {\r\n                                var operationTypes = that.dataSource().operationTypes();\r\n                                change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\r\n                                change.isDataChanged = true;\r\n                                if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                                    change.needUpdateDimensions = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (that._updateLockCount) {\r\n                        that._changes.push(change);\r\n                        return\r\n                    }\r\n                    that._updateItemsCore(change);\r\n                    if (change.cancel) {\r\n                        return\r\n                    }\r\n                    that._fireChanged(change)\r\n                },\r\n                loadingOperationTypes: function() {\r\n                    var dataSource = this.dataSource();\r\n                    return dataSource && dataSource.loadingOperationTypes() || {}\r\n                },\r\n                _fireChanged: function(change) {\r\n                    var _this3 = this;\r\n                    if (this._currentOperationTypes) {\r\n                        change.operationTypes = this._currentOperationTypes;\r\n                        this._currentOperationTypes = null\r\n                    }(0, _common.deferRender)(function() {\r\n                        _this3.changed.fire(change)\r\n                    })\r\n                },\r\n                isLoading: function() {\r\n                    return this._isLoading || this._isCustomLoading\r\n                },\r\n                _fireLoadingChanged: function() {\r\n                    this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n                },\r\n                _calculateAdditionalFilter: function() {\r\n                    return null\r\n                },\r\n                _applyFilter: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        dataSource.pageIndex(0);\r\n                        return that.reload().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                    }\r\n                },\r\n                filter: function filter(filterExpr) {\r\n                    var dataSource = this._dataSource;\r\n                    var filter = dataSource && dataSource.filter();\r\n                    if (0 === arguments.length) {\r\n                        return filter\r\n                    }\r\n                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n                    if (_uiGrid_core2.default.equalFilterParameters(filter, filterExpr)) {\r\n                        return\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource.filter(filterExpr)\r\n                    }\r\n                    this._applyFilter()\r\n                },\r\n                clearFilter: function(filterName) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var clearColumnOption = function(optionName) {\r\n                        var columnCount = columnsController.columnCount();\r\n                        for (var index = 0; index < columnCount; index++) {\r\n                            columnsController.columnOption(index, optionName, void 0)\r\n                        }\r\n                    };\r\n                    that.component.beginUpdate();\r\n                    if (arguments.length > 0) {\r\n                        switch (filterName) {\r\n                            case \"dataSource\":\r\n                                that.filter(null);\r\n                                break;\r\n                            case \"search\":\r\n                                that.searchByText(\"\");\r\n                                break;\r\n                            case \"header\":\r\n                                clearColumnOption(\"filterValues\");\r\n                                break;\r\n                            case \"row\":\r\n                                clearColumnOption(\"filterValue\")\r\n                        }\r\n                    } else {\r\n                        that.filter(null);\r\n                        that.searchByText(\"\");\r\n                        clearColumnOption(\"filterValue\");\r\n                        clearColumnOption(\"bufferedFilterValue\");\r\n                        clearColumnOption(\"filterValues\")\r\n                    }\r\n                    that.component.endUpdate()\r\n                },\r\n                _fireDataSourceChanged: function() {\r\n                    var that = this;\r\n                    var changedHandler = function changedHandler() {\r\n                        that.changed.remove(changedHandler);\r\n                        that.dataSourceChanged.fire()\r\n                    };\r\n                    that.changed.add(changedHandler)\r\n                },\r\n                _getDataSourceAdapter: _common.noop,\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n                    dataSourceAdapter.init(dataSource, remoteOperations);\r\n                    return dataSourceAdapter\r\n                },\r\n                isLocalStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof _array_store.default\r\n                },\r\n                isCustomStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof _custom_store.default\r\n                },\r\n                _createDataSourceAdapter: function(dataSource) {\r\n                    var remoteOperations = this.option(\"remoteOperations\");\r\n                    var store = dataSource.store();\r\n                    var enabledRemoteOperations = {\r\n                        filtering: true,\r\n                        sorting: true,\r\n                        paging: true,\r\n                        grouping: true,\r\n                        summary: true\r\n                    };\r\n                    if (remoteOperations && remoteOperations.groupPaging) {\r\n                        remoteOperations = (0, _extend.extend)({}, enabledRemoteOperations, remoteOperations)\r\n                    }\r\n                    if (\"auto\" === remoteOperations) {\r\n                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                            filtering: true,\r\n                            sorting: true,\r\n                            paging: true\r\n                        }\r\n                    }\r\n                    if (true === remoteOperations) {\r\n                        remoteOperations = enabledRemoteOperations\r\n                    }\r\n                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n                },\r\n                setDataSource: function(dataSource) {\r\n                    var that = this;\r\n                    var oldDataSource = that._dataSource;\r\n                    if (!dataSource && oldDataSource) {\r\n                        oldDataSource.cancelAll();\r\n                        oldDataSource.changed.remove(that._dataChangedHandler);\r\n                        oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\r\n                        oldDataSource.loadError.remove(that._loadErrorHandler);\r\n                        oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\r\n                        oldDataSource.changing.remove(that._changingHandler);\r\n                        oldDataSource.dispose(that._isSharedDataSource)\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource = that._createDataSourceAdapter(dataSource)\r\n                    }\r\n                    that._dataSource = dataSource;\r\n                    if (dataSource) {\r\n                        that._fireDataSourceChanged();\r\n                        that._isLoading = !dataSource.isLoaded();\r\n                        that._needApplyFilter = true;\r\n                        that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\r\n                        dataSource.changed.add(that._dataChangedHandler);\r\n                        dataSource.loadingChanged.add(that._loadingChangedHandler);\r\n                        dataSource.loadError.add(that._loadErrorHandler);\r\n                        dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\r\n                        dataSource.changing.add(that._changingHandler)\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return this._items\r\n                },\r\n                isEmpty: function() {\r\n                    return !this.items().length\r\n                },\r\n                pageCount: function() {\r\n                    return this._dataSource ? this._dataSource.pageCount() : 1\r\n                },\r\n                dataSource: function() {\r\n                    return this._dataSource\r\n                },\r\n                store: function() {\r\n                    var dataSource = this._dataSource;\r\n                    return dataSource && dataSource.store()\r\n                },\r\n                loadAll: function(data) {\r\n                    var that = this;\r\n                    var d = new _deferred.Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        if (data) {\r\n                            var options = {\r\n                                data: data,\r\n                                isCustomLoading: true,\r\n                                storeLoadOptions: {\r\n                                    isLoadingAll: true\r\n                                },\r\n                                loadOptions: {\r\n                                    filter: that.getCombinedFilter(),\r\n                                    group: dataSource.group(),\r\n                                    sort: dataSource.sort()\r\n                                }\r\n                            };\r\n                            dataSource._handleDataLoaded(options);\r\n                            (0, _deferred.when)(options.data).done(function(data) {\r\n                                data = that._beforeProcessItems(data);\r\n                                d.resolve(that._processItems(data, {\r\n                                    changeType: \"loadingAll\"\r\n                                }), options.extra && options.extra.summary)\r\n                            }).fail(d.reject)\r\n                        } else {\r\n                            if (!dataSource.isLoading()) {\r\n                                var loadOptions = (0, _extend.extend)({}, dataSource.loadOptions(), {\r\n                                    isLoadingAll: true,\r\n                                    requireTotalCount: false\r\n                                });\r\n                                dataSource.load(loadOptions).done(function(items, extra) {\r\n                                    items = that._beforeProcessItems(items);\r\n                                    items = that._processItems(items, {\r\n                                        changeType: \"loadingAll\"\r\n                                    });\r\n                                    d.resolve(items, extra && extra.summary)\r\n                                }).fail(d.reject)\r\n                            } else {\r\n                                d.reject()\r\n                            }\r\n                        }\r\n                    } else {\r\n                        d.resolve([])\r\n                    }\r\n                    return d\r\n                },\r\n                getKeyByRowIndex: function(rowIndex, byLoaded) {\r\n                    var item = this.items(byLoaded)[rowIndex];\r\n                    if (item) {\r\n                        return item.key\r\n                    }\r\n                },\r\n                getRowIndexByKey: function(key, byLoaded) {\r\n                    return _uiGrid_core2.default.getIndexByKey(key, this.items(byLoaded))\r\n                },\r\n                keyOf: function(data) {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.keyOf(data)\r\n                    }\r\n                },\r\n                byKey: function(key) {\r\n                    var store = this.store();\r\n                    var rowIndex = this.getRowIndexByKey(key);\r\n                    var result;\r\n                    if (!store) {\r\n                        return\r\n                    }\r\n                    if (rowIndex >= 0) {\r\n                        result = (new _deferred.Deferred).resolve(this.items()[rowIndex].data)\r\n                    }\r\n                    return result || store.byKey(key)\r\n                },\r\n                key: function() {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.key()\r\n                    }\r\n                },\r\n                getRowIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                getDataByKeys: function(rowKeys) {\r\n                    var that = this;\r\n                    var result = new _deferred.Deferred;\r\n                    var deferreds = [];\r\n                    var data = [];\r\n                    (0, _iterator.each)(rowKeys, function(index, key) {\r\n                        deferreds.push(that.byKey(key).done(function(keyData) {\r\n                            data[index] = keyData\r\n                        }))\r\n                    });\r\n                    _deferred.when.apply(_renderer.default, deferreds).always(function() {\r\n                        result.resolve(data)\r\n                    });\r\n                    return result\r\n                },\r\n                pageIndex: function(value) {\r\n                    return changePaging(this, \"pageIndex\", value)\r\n                },\r\n                pageSize: function(value) {\r\n                    return changePaging(this, \"pageSize\", value)\r\n                },\r\n                beginCustomLoading: function(messageText) {\r\n                    this._isCustomLoading = true;\r\n                    this._loadingText = messageText || \"\";\r\n                    this._fireLoadingChanged()\r\n                },\r\n                endCustomLoading: function() {\r\n                    this._isCustomLoading = false;\r\n                    this._loadingText = void 0;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                refresh: function(options) {\r\n                    if (true === options) {\r\n                        options = {\r\n                            reload: true,\r\n                            changesOnly: true\r\n                        }\r\n                    } else {\r\n                        if (!options) {\r\n                            options = {\r\n                                lookup: true,\r\n                                selection: true,\r\n                                reload: true\r\n                            }\r\n                        }\r\n                    }\r\n                    var that = this;\r\n                    var dataSource = that.getDataSource();\r\n                    var changesOnly = options.changesOnly;\r\n                    var d = new _deferred.Deferred;\r\n                    var customizeLoadResult = function() {\r\n                        that._repaintChangesOnly = !!changesOnly\r\n                    };\r\n                    (0, _deferred.when)(!options.lookup || that._columnsController.refresh()).always(function() {\r\n                        if (options.load || options.reload) {\r\n                            dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                            (0, _deferred.when)(that.reload(options.reload, changesOnly)).always(function() {\r\n                                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                                that._repaintChangesOnly = void 0\r\n                            }).done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            that.updateItems({\r\n                                repaintChangesOnly: options.changesOnly\r\n                            });\r\n                            d.resolve()\r\n                        }\r\n                    });\r\n                    return d.promise()\r\n                },\r\n                getVisibleRows: function() {\r\n                    return this.items()\r\n                },\r\n                _disposeDataSource: function() {\r\n                    this.setDataSource(null)\r\n                },\r\n                dispose: function() {\r\n                    this._disposeDataSource();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function(rowIndexes, changesOnly) {\r\n                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n                    if (rowIndexes.length > 1 || (0, _type.isDefined)(rowIndexes[0])) {\r\n                        this.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndexes,\r\n                            isFullUpdate: !changesOnly\r\n                        })\r\n                    }\r\n                },\r\n                skipProcessingPagingChange: function(fullName) {\r\n                    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n                },\r\n                getUserState: function() {\r\n                    return {\r\n                        searchText: this.option(\"searchPanel.text\"),\r\n                        pageIndex: this.pageIndex(),\r\n                        pageSize: this.pageSize()\r\n                    }\r\n                },\r\n                getCachedStoreData: function() {\r\n                    return this._dataSource && this._dataSource.getCachedStoreData()\r\n                }\r\n            };\r\n            _uiGrid_core2.default.proxyMethod(members, \"load\");\r\n            _uiGrid_core2.default.proxyMethod(members, \"reload\");\r\n            _uiGrid_core2.default.proxyMethod(members, \"push\");\r\n            _uiGrid_core2.default.proxyMethod(members, \"itemsCount\", 0);\r\n            _uiGrid_core2.default.proxyMethod(members, \"totalItemsCount\", 0);\r\n            _uiGrid_core2.default.proxyMethod(members, \"hasKnownLastPage\", true);\r\n            _uiGrid_core2.default.proxyMethod(members, \"isLoaded\", true);\r\n            _uiGrid_core2.default.proxyMethod(members, \"totalCount\", 0);\r\n            return members\r\n        }())\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}