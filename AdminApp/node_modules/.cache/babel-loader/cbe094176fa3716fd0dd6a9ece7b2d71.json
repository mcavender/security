{"ast":null,"code":"/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\n\nvar _utils = _interopRequireDefault(require(\"./utils.caret\"));\n\nvar _utils2 = require(\"./utils.support\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _index = require(\"../../events/utils/index\");\n\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _selectors = require(\"../widget/selectors\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _string = require(\"../../core/utils/string\");\n\nvar _wheel = require(\"../../events/core/wheel\");\n\nvar _uiText_editorMask = require(\"./ui.text_editor.mask.rule\");\n\nvar _uiText_editor = _interopRequireDefault(require(\"./ui.text_editor.base\"));\n\nvar _uiText_editorMaskStrategy = _interopRequireDefault(require(\"./ui.text_editor.mask.strategy.default\"));\n\nvar _uiText_editorMaskStrategy2 = _interopRequireDefault(require(\"./ui.text_editor.mask.strategy.input_events\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar stubCaret = function () {\n  return {};\n};\n\nvar caret = _utils.default;\nvar EMPTY_CHAR = \" \";\nvar ESCAPED_CHAR = \"\\\\\";\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\nvar FORWARD_DIRECTION = \"forward\";\nvar BACKWARD_DIRECTION = \"backward\";\nvar buildInMaskRules = {\n  0: /[0-9]/,\n  9: /[0-9\\s]/,\n  \"#\": /[-+0-9\\s]/,\n  L: function (char) {\n    return isLiteralChar(char);\n  },\n  l: function (char) {\n    return isLiteralChar(char) || isSpaceChar(char);\n  },\n  C: /\\S/,\n  c: /./,\n  A: function (char) {\n    return isLiteralChar(char) || isNumericChar(char);\n  },\n  a: function (char) {\n    return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char);\n  }\n};\n\nfunction isNumericChar(char) {\n  return /[0-9]/.test(char);\n}\n\nfunction isLiteralChar(char) {\n  var code = char.charCodeAt();\n  return 64 < code && code < 91 || 96 < code && code < 123 || code > 127;\n}\n\nfunction isSpaceChar(char) {\n  return \" \" === char;\n}\n\nvar TextEditorMask = _uiText_editor.default.inherit({\n  _getDefaultOptions: function () {\n    return (0, _extend.extend)(this.callBase(), {\n      mask: \"\",\n      maskChar: \"_\",\n      maskRules: {},\n      maskInvalidMessage: _message.default.format(\"validation-mask\"),\n      useMaskedValue: false,\n      showMaskMode: \"always\"\n    });\n  },\n  _supportedKeys: function () {\n    var that = this;\n    var keyHandlerMap = {\n      backspace: that._maskStrategy.getHandler(\"backspace\"),\n      del: that._maskStrategy.getHandler(\"del\"),\n      enter: that._changeHandler\n    };\n    var result = that.callBase();\n    (0, _iterator.each)(keyHandlerMap, function (key, callback) {\n      var parentHandler = result[key];\n\n      result[key] = function (e) {\n        that.option(\"mask\") && callback.call(that, e);\n        parentHandler && parentHandler(e);\n      };\n    });\n    return result;\n  },\n  _getSubmitElement: function () {\n    return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement;\n  },\n  _init: function () {\n    this.callBase();\n\n    this._initMaskStrategy();\n  },\n  _initMaskStrategy: function () {\n    this._maskStrategy = (0, _utils2.isInputEventsL2Supported)() ? new _uiText_editorMaskStrategy2.default(this) : new _uiText_editorMaskStrategy.default(this);\n  },\n  _initMarkup: function () {\n    this._renderHiddenElement();\n\n    this.callBase();\n  },\n  _attachMouseWheelEventHandlers: function () {\n    var hasMouseWheelHandler = this._onMouseWheel !== _common.noop;\n\n    if (!hasMouseWheelHandler) {\n      return;\n    }\n\n    var input = this._input();\n\n    var eventName = (0, _index.addNamespace)(_wheel.name, this.NAME);\n\n    var mouseWheelAction = this._createAction(function (e) {\n      var event = e.event;\n\n      if ((0, _selectors.focused)(input) && !(0, _index.isCommandKeyPressed)(event)) {\n        this._onMouseWheel(event);\n\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    }.bind(this));\n\n    _events_engine.default.off(input, eventName);\n\n    _events_engine.default.on(input, eventName, function (e) {\n      mouseWheelAction({\n        event: e\n      });\n    });\n  },\n  _onMouseWheel: _common.noop,\n  _render: function () {\n    this._renderMask();\n\n    this.callBase();\n\n    this._attachMouseWheelEventHandlers();\n  },\n  _renderHiddenElement: function () {\n    if (this.option(\"mask\")) {\n      this._$hiddenElement = (0, _renderer.default)(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper());\n    }\n  },\n  _removeHiddenElement: function () {\n    this._$hiddenElement && this._$hiddenElement.remove();\n  },\n  _renderMask: function () {\n    this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\n    this._maskRulesChain = null;\n\n    this._maskStrategy.detachEvents();\n\n    if (!this.option(\"mask\")) {\n      return;\n    }\n\n    this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\n\n    this._maskStrategy.attachEvents();\n\n    this._parseMask();\n\n    this._renderMaskedValue();\n  },\n  _suppressCaretChanging: function (callback, args) {\n    caret = stubCaret;\n\n    try {\n      callback.apply(this, args);\n    } finally {\n      caret = _utils.default;\n    }\n  },\n  _changeHandler: function (e) {\n    var $input = this._input();\n\n    var inputValue = $input.val();\n\n    if (inputValue === this._changedValue) {\n      return;\n    }\n\n    this._changedValue = inputValue;\n    var changeEvent = (0, _index.createEvent)(e, {\n      type: \"change\"\n    });\n\n    _events_engine.default.trigger($input, changeEvent);\n  },\n  _parseMask: function () {\n    this._maskRules = (0, _extend.extend)({}, buildInMaskRules, this.option(\"maskRules\"));\n    this._maskRulesChain = this._parseMaskRule(0);\n  },\n  _parseMaskRule: function (index) {\n    var mask = this.option(\"mask\");\n\n    if (index >= mask.length) {\n      return new _uiText_editorMask.EmptyMaskRule();\n    }\n\n    var currentMaskChar = mask[index];\n    var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\n    var result = isEscapedChar ? new _uiText_editorMask.StubMaskRule({\n      maskChar: mask[index + 1]\n    }) : this._getMaskRule(currentMaskChar);\n    result.next(this._parseMaskRule(index + 1 + isEscapedChar));\n    return result;\n  },\n  _getMaskRule: function (pattern) {\n    var ruleConfig;\n    (0, _iterator.each)(this._maskRules, function (rulePattern, allowedChars) {\n      if (rulePattern === pattern) {\n        ruleConfig = {\n          pattern: rulePattern,\n          allowedChars: allowedChars\n        };\n        return false;\n      }\n    });\n    return (0, _type.isDefined)(ruleConfig) ? new _uiText_editorMask.MaskRule((0, _extend.extend)({\n      maskChar: this.option(\"maskChar\")\n    }, ruleConfig)) : new _uiText_editorMask.StubMaskRule({\n      maskChar: pattern\n    });\n  },\n  _renderMaskedValue: function () {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var value = this.option(\"value\") || \"\";\n\n    this._maskRulesChain.clear(this._normalizeChainArguments());\n\n    var chainArgs = {\n      length: value.length\n    };\n    chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\n\n    this._handleChain(chainArgs);\n\n    this._displayMask();\n  },\n  _replaceSelectedText: function (text, selection, char) {\n    if (void 0 === char) {\n      return text;\n    }\n\n    var textBefore = text.slice(0, selection.start);\n    var textAfter = text.slice(selection.end);\n    var edited = textBefore + char + textAfter;\n    return edited;\n  },\n  _isMaskedValueMode: function () {\n    return this.option(\"useMaskedValue\");\n  },\n  _displayMask: function (caret) {\n    caret = caret || this._caret();\n\n    this._renderValue();\n\n    this._caret(caret);\n  },\n  _isValueEmpty: function () {\n    return (0, _string.isEmpty)(this._value);\n  },\n  _shouldShowMask: function () {\n    var showMaskMode = this.option(\"showMaskMode\");\n\n    if (\"onFocus\" === showMaskMode) {\n      return (0, _selectors.focused)(this._input()) || !this._isValueEmpty();\n    }\n\n    return true;\n  },\n  _showMaskPlaceholder: function () {\n    if (this._shouldShowMask()) {\n      var text = this._maskRulesChain.text();\n\n      this.option(\"text\", text);\n\n      if (\"onFocus\" === this.option(\"showMaskMode\")) {\n        this._renderDisplayText(text);\n      }\n    }\n  },\n  _renderValue: function () {\n    if (this._maskRulesChain) {\n      this._showMaskPlaceholder();\n\n      if (this._$hiddenElement) {\n        var value = this._maskRulesChain.value();\n\n        var submitElementValue = !(0, _string.isEmpty)(value) ? this._getPreparedValue() : \"\";\n\n        this._$hiddenElement.val(submitElementValue);\n      }\n    }\n\n    return this.callBase();\n  },\n  _getPreparedValue: function () {\n    return this._convertToValue().replace(/\\s+$/, \"\");\n  },\n  _valueChangeEventHandler: function (e) {\n    if (!this._maskRulesChain) {\n      this.callBase.apply(this, arguments);\n      return;\n    }\n\n    this._saveValueChangeEvent(e);\n\n    this.option(\"value\", this._getPreparedValue());\n  },\n  _isControlKeyFired: function (e) {\n    return this._isControlKey((0, _index.normalizeKeyName)(e)) || (0, _index.isCommandKeyPressed)(e);\n  },\n  _handleChain: function (args) {\n    var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\n\n    this._value = this._maskRulesChain.value();\n    this._textValue = this._maskRulesChain.text();\n    return handledCount;\n  },\n  _normalizeChainArguments: function (args) {\n    args = args || {};\n    args.index = 0;\n    args.fullText = this._maskRulesChain.text();\n    return args;\n  },\n  _convertToValue: function (text) {\n    if (this._isMaskedValueMode()) {\n      text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\");\n    } else {\n      text = text || this._value || \"\";\n    }\n\n    return text;\n  },\n  _replaceMaskCharWithEmpty: function (text) {\n    return text.replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR);\n  },\n  _maskKeyHandler: function (e, keyHandler) {\n    var _this = this;\n\n    if (this.option(\"readOnly\")) {\n      return;\n    }\n\n    this.setForwardDirection();\n    e.preventDefault();\n\n    this._handleSelection();\n\n    var previousText = this._input().val();\n\n    var raiseInputEvent = function () {\n      if (previousText !== _this._input().val()) {\n        _this._maskStrategy.runWithoutEventProcessing(function () {\n          return _events_engine.default.trigger(_this._input(), \"input\");\n        });\n      }\n    };\n\n    var handled = keyHandler();\n\n    if (handled) {\n      handled.then(raiseInputEvent);\n    } else {\n      this.setForwardDirection();\n\n      this._adjustCaret();\n\n      this._displayMask();\n\n      this._maskRulesChain.reset();\n\n      raiseInputEvent();\n    }\n  },\n  _handleKey: function (key, direction) {\n    this._direction(direction || FORWARD_DIRECTION);\n\n    this._adjustCaret(key);\n\n    this._handleKeyChain(key);\n\n    this._moveCaret();\n  },\n  _handleSelection: function () {\n    if (!this._hasSelection()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\n\n    this._handleKeyChain(emptyChars);\n  },\n  _handleKeyChain: function (chars) {\n    var caret = this._caret();\n\n    var start = this.isForwardDirection() ? caret.start : caret.start - 1;\n    var end = this.isForwardDirection() ? caret.end : caret.end - 1;\n    var length = start === end ? 1 : end - start;\n\n    this._handleChain({\n      text: chars,\n      start: start,\n      length: length\n    });\n  },\n  _tryMoveCaretBackward: function () {\n    this.setBackwardDirection();\n\n    var currentCaret = this._caret().start;\n\n    this._adjustCaret();\n\n    return !currentCaret || currentCaret !== this._caret().start;\n  },\n  _adjustCaret: function (char) {\n    var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this.isForwardDirection(), char);\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _moveCaret: function () {\n    var currentCaret = this._caret().start;\n\n    var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\n    var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\n\n    this._caret({\n      start: caret,\n      end: caret\n    });\n  },\n  _caret: function (position) {\n    var $input = this._input();\n\n    if (!$input.length) {\n      return;\n    }\n\n    if (!arguments.length) {\n      return caret($input);\n    }\n\n    caret($input, position);\n  },\n  _hasSelection: function () {\n    var caret = this._caret();\n\n    return caret.start !== caret.end;\n  },\n  _direction: function (direction) {\n    if (!arguments.length) {\n      return this._typingDirection;\n    }\n\n    this._typingDirection = direction;\n  },\n  setForwardDirection: function () {\n    this._direction(FORWARD_DIRECTION);\n  },\n  setBackwardDirection: function () {\n    this._direction(BACKWARD_DIRECTION);\n  },\n  isForwardDirection: function () {\n    return this._direction() === FORWARD_DIRECTION;\n  },\n  _clean: function () {\n    this._maskStrategy && this._maskStrategy.clean();\n    this.callBase();\n  },\n  _validateMask: function () {\n    if (!this._maskRulesChain) {\n      return;\n    }\n\n    var isValid = (0, _string.isEmpty)(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"maskInvalidMessage\")\n      }\n    });\n  },\n  _updateHiddenElement: function () {\n    this._removeHiddenElement();\n\n    if (this.option(\"mask\")) {\n      this._input().removeAttr(\"name\");\n\n      this._renderHiddenElement();\n    }\n\n    this._setSubmitElementName(this.option(\"name\"));\n  },\n  _updateMaskOption: function () {\n    this._updateHiddenElement();\n\n    this._renderMask();\n\n    this._validateMask();\n  },\n  _processEmptyMask: function (mask) {\n    if (mask) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n    this.option({\n      text: value,\n      isValid: true\n    });\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n\n    this._renderValue();\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"mask\":\n        this._updateMaskOption();\n\n        this._processEmptyMask(args.value);\n\n        break;\n\n      case \"maskChar\":\n      case \"maskRules\":\n      case \"useMaskedValue\":\n        this._updateMaskOption();\n\n        break;\n\n      case \"value\":\n        this._renderMaskedValue();\n\n        this._validateMask();\n\n        this.callBase(args);\n        this._changedValue = this._input().val();\n        break;\n\n      case \"maskInvalidMessage\":\n        break;\n\n      case \"showMaskMode\":\n        this.option(\"text\", \"\");\n\n        this._renderValue();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\n\nvar _default = TextEditorMask;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["C:/Users/CapiniaC/Desktop/Collection/Work/project/security/node_modules/devextreme/ui/text_box/ui.text_editor.mask.js"],"names":["exports","default","_renderer","_interopRequireDefault","require","_utils","_utils2","_iterator","_index","_events_engine","_extend","_selectors","_type","_message","_common","_string","_wheel","_uiText_editorMask","_uiText_editor","_uiText_editorMaskStrategy","_uiText_editorMaskStrategy2","obj","__esModule","stubCaret","caret","EMPTY_CHAR","ESCAPED_CHAR","TEXTEDITOR_MASKED_CLASS","FORWARD_DIRECTION","BACKWARD_DIRECTION","buildInMaskRules","L","char","isLiteralChar","l","isSpaceChar","C","c","A","isNumericChar","a","test","code","charCodeAt","TextEditorMask","inherit","_getDefaultOptions","extend","callBase","mask","maskChar","maskRules","maskInvalidMessage","format","useMaskedValue","showMaskMode","_supportedKeys","that","keyHandlerMap","backspace","_maskStrategy","getHandler","del","enter","_changeHandler","result","each","key","callback","parentHandler","e","option","call","_getSubmitElement","_$hiddenElement","_init","_initMaskStrategy","isInputEventsL2Supported","_initMarkup","_renderHiddenElement","_attachMouseWheelEventHandlers","hasMouseWheelHandler","_onMouseWheel","noop","input","_input","eventName","addNamespace","name","NAME","mouseWheelAction","_createAction","event","focused","isCommandKeyPressed","preventDefault","stopPropagation","bind","off","on","_render","_renderMask","attr","appendTo","_inputWrapper","_removeHiddenElement","remove","$element","removeClass","_maskRulesChain","detachEvents","addClass","attachEvents","_parseMask","_renderMaskedValue","_suppressCaretChanging","args","apply","$input","inputValue","val","_changedValue","changeEvent","createEvent","type","trigger","_maskRules","_parseMaskRule","index","length","EmptyMaskRule","currentMaskChar","isEscapedChar","StubMaskRule","_getMaskRule","next","pattern","ruleConfig","rulePattern","allowedChars","isDefined","MaskRule","value","clear","_normalizeChainArguments","chainArgs","_isMaskedValueMode","_handleChain","_displayMask","_replaceSelectedText","text","selection","textBefore","slice","start","textAfter","end","edited","_caret","_renderValue","_isValueEmpty","isEmpty","_value","_shouldShowMask","_showMaskPlaceholder","_renderDisplayText","submitElementValue","_getPreparedValue","_convertToValue","replace","_valueChangeEventHandler","arguments","_saveValueChangeEvent","_isControlKeyFired","_isControlKey","normalizeKeyName","handledCount","handle","_textValue","fullText","_replaceMaskCharWithEmpty","RegExp","_maskKeyHandler","keyHandler","_this","setForwardDirection","_handleSelection","previousText","raiseInputEvent","runWithoutEventProcessing","handled","then","_adjustCaret","reset","_handleKey","direction","_direction","_handleKeyChain","_moveCaret","_hasSelection","emptyChars","Array","join","chars","isForwardDirection","_tryMoveCaretBackward","setBackwardDirection","currentCaret","adjustedCaret","maskRuleIndex","isAccepted","position","_typingDirection","_clean","clean","_validateMask","isValid","validationError","editorSpecific","message","_updateHiddenElement","removeAttr","_setSubmitElementName","_updateMaskOption","_processEmptyMask","validationRequest","fire","editor","_optionChanged","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/text_box/ui.text_editor.mask.js)\r\n * Version: 20.2.6\r\n * Build date: Tue Mar 16 2021\r\n *\r\n * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _renderer = _interopRequireDefault(require(\"../../core/renderer\"));\r\nvar _utils = _interopRequireDefault(require(\"./utils.caret\"));\r\nvar _utils2 = require(\"./utils.support\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _index = require(\"../../events/utils/index\");\r\nvar _events_engine = _interopRequireDefault(require(\"../../events/core/events_engine\"));\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _selectors = require(\"../widget/selectors\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _message = _interopRequireDefault(require(\"../../localization/message\"));\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _string = require(\"../../core/utils/string\");\r\nvar _wheel = require(\"../../events/core/wheel\");\r\nvar _uiText_editorMask = require(\"./ui.text_editor.mask.rule\");\r\nvar _uiText_editor = _interopRequireDefault(require(\"./ui.text_editor.base\"));\r\nvar _uiText_editorMaskStrategy = _interopRequireDefault(require(\"./ui.text_editor.mask.strategy.default\"));\r\nvar _uiText_editorMaskStrategy2 = _interopRequireDefault(require(\"./ui.text_editor.mask.strategy.input_events\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar stubCaret = function() {\r\n    return {}\r\n};\r\nvar caret = _utils.default;\r\nvar EMPTY_CHAR = \" \";\r\nvar ESCAPED_CHAR = \"\\\\\";\r\nvar TEXTEDITOR_MASKED_CLASS = \"dx-texteditor-masked\";\r\nvar FORWARD_DIRECTION = \"forward\";\r\nvar BACKWARD_DIRECTION = \"backward\";\r\nvar buildInMaskRules = {\r\n    0: /[0-9]/,\r\n    9: /[0-9\\s]/,\r\n    \"#\": /[-+0-9\\s]/,\r\n    L: function(char) {\r\n        return isLiteralChar(char)\r\n    },\r\n    l: function(char) {\r\n        return isLiteralChar(char) || isSpaceChar(char)\r\n    },\r\n    C: /\\S/,\r\n    c: /./,\r\n    A: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char)\r\n    },\r\n    a: function(char) {\r\n        return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char)\r\n    }\r\n};\r\n\r\nfunction isNumericChar(char) {\r\n    return /[0-9]/.test(char)\r\n}\r\n\r\nfunction isLiteralChar(char) {\r\n    var code = char.charCodeAt();\r\n    return 64 < code && code < 91 || 96 < code && code < 123 || code > 127\r\n}\r\n\r\nfunction isSpaceChar(char) {\r\n    return \" \" === char\r\n}\r\nvar TextEditorMask = _uiText_editor.default.inherit({\r\n    _getDefaultOptions: function() {\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            mask: \"\",\r\n            maskChar: \"_\",\r\n            maskRules: {},\r\n            maskInvalidMessage: _message.default.format(\"validation-mask\"),\r\n            useMaskedValue: false,\r\n            showMaskMode: \"always\"\r\n        })\r\n    },\r\n    _supportedKeys: function() {\r\n        var that = this;\r\n        var keyHandlerMap = {\r\n            backspace: that._maskStrategy.getHandler(\"backspace\"),\r\n            del: that._maskStrategy.getHandler(\"del\"),\r\n            enter: that._changeHandler\r\n        };\r\n        var result = that.callBase();\r\n        (0, _iterator.each)(keyHandlerMap, function(key, callback) {\r\n            var parentHandler = result[key];\r\n            result[key] = function(e) {\r\n                that.option(\"mask\") && callback.call(that, e);\r\n                parentHandler && parentHandler(e)\r\n            }\r\n        });\r\n        return result\r\n    },\r\n    _getSubmitElement: function() {\r\n        return !this.option(\"mask\") ? this.callBase() : this._$hiddenElement\r\n    },\r\n    _init: function() {\r\n        this.callBase();\r\n        this._initMaskStrategy()\r\n    },\r\n    _initMaskStrategy: function() {\r\n        this._maskStrategy = (0, _utils2.isInputEventsL2Supported)() ? new _uiText_editorMaskStrategy2.default(this) : new _uiText_editorMaskStrategy.default(this)\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderHiddenElement();\r\n        this.callBase()\r\n    },\r\n    _attachMouseWheelEventHandlers: function() {\r\n        var hasMouseWheelHandler = this._onMouseWheel !== _common.noop;\r\n        if (!hasMouseWheelHandler) {\r\n            return\r\n        }\r\n        var input = this._input();\r\n        var eventName = (0, _index.addNamespace)(_wheel.name, this.NAME);\r\n        var mouseWheelAction = this._createAction(function(e) {\r\n            var event = e.event;\r\n            if ((0, _selectors.focused)(input) && !(0, _index.isCommandKeyPressed)(event)) {\r\n                this._onMouseWheel(event);\r\n                event.preventDefault();\r\n                event.stopPropagation()\r\n            }\r\n        }.bind(this));\r\n        _events_engine.default.off(input, eventName);\r\n        _events_engine.default.on(input, eventName, function(e) {\r\n            mouseWheelAction({\r\n                event: e\r\n            })\r\n        })\r\n    },\r\n    _onMouseWheel: _common.noop,\r\n    _render: function() {\r\n        this._renderMask();\r\n        this.callBase();\r\n        this._attachMouseWheelEventHandlers()\r\n    },\r\n    _renderHiddenElement: function() {\r\n        if (this.option(\"mask\")) {\r\n            this._$hiddenElement = (0, _renderer.default)(\"<input>\").attr(\"type\", \"hidden\").appendTo(this._inputWrapper())\r\n        }\r\n    },\r\n    _removeHiddenElement: function() {\r\n        this._$hiddenElement && this._$hiddenElement.remove()\r\n    },\r\n    _renderMask: function() {\r\n        this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._maskRulesChain = null;\r\n        this._maskStrategy.detachEvents();\r\n        if (!this.option(\"mask\")) {\r\n            return\r\n        }\r\n        this.$element().addClass(TEXTEDITOR_MASKED_CLASS);\r\n        this._maskStrategy.attachEvents();\r\n        this._parseMask();\r\n        this._renderMaskedValue()\r\n    },\r\n    _suppressCaretChanging: function(callback, args) {\r\n        caret = stubCaret;\r\n        try {\r\n            callback.apply(this, args)\r\n        } finally {\r\n            caret = _utils.default\r\n        }\r\n    },\r\n    _changeHandler: function(e) {\r\n        var $input = this._input();\r\n        var inputValue = $input.val();\r\n        if (inputValue === this._changedValue) {\r\n            return\r\n        }\r\n        this._changedValue = inputValue;\r\n        var changeEvent = (0, _index.createEvent)(e, {\r\n            type: \"change\"\r\n        });\r\n        _events_engine.default.trigger($input, changeEvent)\r\n    },\r\n    _parseMask: function() {\r\n        this._maskRules = (0, _extend.extend)({}, buildInMaskRules, this.option(\"maskRules\"));\r\n        this._maskRulesChain = this._parseMaskRule(0)\r\n    },\r\n    _parseMaskRule: function(index) {\r\n        var mask = this.option(\"mask\");\r\n        if (index >= mask.length) {\r\n            return new _uiText_editorMask.EmptyMaskRule\r\n        }\r\n        var currentMaskChar = mask[index];\r\n        var isEscapedChar = currentMaskChar === ESCAPED_CHAR;\r\n        var result = isEscapedChar ? new _uiText_editorMask.StubMaskRule({\r\n            maskChar: mask[index + 1]\r\n        }) : this._getMaskRule(currentMaskChar);\r\n        result.next(this._parseMaskRule(index + 1 + isEscapedChar));\r\n        return result\r\n    },\r\n    _getMaskRule: function(pattern) {\r\n        var ruleConfig;\r\n        (0, _iterator.each)(this._maskRules, function(rulePattern, allowedChars) {\r\n            if (rulePattern === pattern) {\r\n                ruleConfig = {\r\n                    pattern: rulePattern,\r\n                    allowedChars: allowedChars\r\n                };\r\n                return false\r\n            }\r\n        });\r\n        return (0, _type.isDefined)(ruleConfig) ? new _uiText_editorMask.MaskRule((0, _extend.extend)({\r\n            maskChar: this.option(\"maskChar\")\r\n        }, ruleConfig)) : new _uiText_editorMask.StubMaskRule({\r\n            maskChar: pattern\r\n        })\r\n    },\r\n    _renderMaskedValue: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\") || \"\";\r\n        this._maskRulesChain.clear(this._normalizeChainArguments());\r\n        var chainArgs = {\r\n            length: value.length\r\n        };\r\n        chainArgs[this._isMaskedValueMode() ? \"text\" : \"value\"] = value;\r\n        this._handleChain(chainArgs);\r\n        this._displayMask()\r\n    },\r\n    _replaceSelectedText: function(text, selection, char) {\r\n        if (void 0 === char) {\r\n            return text\r\n        }\r\n        var textBefore = text.slice(0, selection.start);\r\n        var textAfter = text.slice(selection.end);\r\n        var edited = textBefore + char + textAfter;\r\n        return edited\r\n    },\r\n    _isMaskedValueMode: function() {\r\n        return this.option(\"useMaskedValue\")\r\n    },\r\n    _displayMask: function(caret) {\r\n        caret = caret || this._caret();\r\n        this._renderValue();\r\n        this._caret(caret)\r\n    },\r\n    _isValueEmpty: function() {\r\n        return (0, _string.isEmpty)(this._value)\r\n    },\r\n    _shouldShowMask: function() {\r\n        var showMaskMode = this.option(\"showMaskMode\");\r\n        if (\"onFocus\" === showMaskMode) {\r\n            return (0, _selectors.focused)(this._input()) || !this._isValueEmpty()\r\n        }\r\n        return true\r\n    },\r\n    _showMaskPlaceholder: function() {\r\n        if (this._shouldShowMask()) {\r\n            var text = this._maskRulesChain.text();\r\n            this.option(\"text\", text);\r\n            if (\"onFocus\" === this.option(\"showMaskMode\")) {\r\n                this._renderDisplayText(text)\r\n            }\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._maskRulesChain) {\r\n            this._showMaskPlaceholder();\r\n            if (this._$hiddenElement) {\r\n                var value = this._maskRulesChain.value();\r\n                var submitElementValue = !(0, _string.isEmpty)(value) ? this._getPreparedValue() : \"\";\r\n                this._$hiddenElement.val(submitElementValue)\r\n            }\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _getPreparedValue: function() {\r\n        return this._convertToValue().replace(/\\s+$/, \"\")\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._maskRulesChain) {\r\n            this.callBase.apply(this, arguments);\r\n            return\r\n        }\r\n        this._saveValueChangeEvent(e);\r\n        this.option(\"value\", this._getPreparedValue())\r\n    },\r\n    _isControlKeyFired: function(e) {\r\n        return this._isControlKey((0, _index.normalizeKeyName)(e)) || (0, _index.isCommandKeyPressed)(e)\r\n    },\r\n    _handleChain: function(args) {\r\n        var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));\r\n        this._value = this._maskRulesChain.value();\r\n        this._textValue = this._maskRulesChain.text();\r\n        return handledCount\r\n    },\r\n    _normalizeChainArguments: function(args) {\r\n        args = args || {};\r\n        args.index = 0;\r\n        args.fullText = this._maskRulesChain.text();\r\n        return args\r\n    },\r\n    _convertToValue: function(text) {\r\n        if (this._isMaskedValueMode()) {\r\n            text = this._replaceMaskCharWithEmpty(text || this._textValue || \"\")\r\n        } else {\r\n            text = text || this._value || \"\"\r\n        }\r\n        return text\r\n    },\r\n    _replaceMaskCharWithEmpty: function(text) {\r\n        return text.replace(new RegExp(this.option(\"maskChar\"), \"g\"), EMPTY_CHAR)\r\n    },\r\n    _maskKeyHandler: function(e, keyHandler) {\r\n        var _this = this;\r\n        if (this.option(\"readOnly\")) {\r\n            return\r\n        }\r\n        this.setForwardDirection();\r\n        e.preventDefault();\r\n        this._handleSelection();\r\n        var previousText = this._input().val();\r\n        var raiseInputEvent = function() {\r\n            if (previousText !== _this._input().val()) {\r\n                _this._maskStrategy.runWithoutEventProcessing(function() {\r\n                    return _events_engine.default.trigger(_this._input(), \"input\")\r\n                })\r\n            }\r\n        };\r\n        var handled = keyHandler();\r\n        if (handled) {\r\n            handled.then(raiseInputEvent)\r\n        } else {\r\n            this.setForwardDirection();\r\n            this._adjustCaret();\r\n            this._displayMask();\r\n            this._maskRulesChain.reset();\r\n            raiseInputEvent()\r\n        }\r\n    },\r\n    _handleKey: function(key, direction) {\r\n        this._direction(direction || FORWARD_DIRECTION);\r\n        this._adjustCaret(key);\r\n        this._handleKeyChain(key);\r\n        this._moveCaret()\r\n    },\r\n    _handleSelection: function() {\r\n        if (!this._hasSelection()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);\r\n        this._handleKeyChain(emptyChars)\r\n    },\r\n    _handleKeyChain: function(chars) {\r\n        var caret = this._caret();\r\n        var start = this.isForwardDirection() ? caret.start : caret.start - 1;\r\n        var end = this.isForwardDirection() ? caret.end : caret.end - 1;\r\n        var length = start === end ? 1 : end - start;\r\n        this._handleChain({\r\n            text: chars,\r\n            start: start,\r\n            length: length\r\n        })\r\n    },\r\n    _tryMoveCaretBackward: function() {\r\n        this.setBackwardDirection();\r\n        var currentCaret = this._caret().start;\r\n        this._adjustCaret();\r\n        return !currentCaret || currentCaret !== this._caret().start\r\n    },\r\n    _adjustCaret: function(char) {\r\n        var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this.isForwardDirection(), char);\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _moveCaret: function() {\r\n        var currentCaret = this._caret().start;\r\n        var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);\r\n        var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;\r\n        this._caret({\r\n            start: caret,\r\n            end: caret\r\n        })\r\n    },\r\n    _caret: function(position) {\r\n        var $input = this._input();\r\n        if (!$input.length) {\r\n            return\r\n        }\r\n        if (!arguments.length) {\r\n            return caret($input)\r\n        }\r\n        caret($input, position)\r\n    },\r\n    _hasSelection: function() {\r\n        var caret = this._caret();\r\n        return caret.start !== caret.end\r\n    },\r\n    _direction: function(direction) {\r\n        if (!arguments.length) {\r\n            return this._typingDirection\r\n        }\r\n        this._typingDirection = direction\r\n    },\r\n    setForwardDirection: function() {\r\n        this._direction(FORWARD_DIRECTION)\r\n    },\r\n    setBackwardDirection: function() {\r\n        this._direction(BACKWARD_DIRECTION)\r\n    },\r\n    isForwardDirection: function() {\r\n        return this._direction() === FORWARD_DIRECTION\r\n    },\r\n    _clean: function() {\r\n        this._maskStrategy && this._maskStrategy.clean();\r\n        this.callBase()\r\n    },\r\n    _validateMask: function() {\r\n        if (!this._maskRulesChain) {\r\n            return\r\n        }\r\n        var isValid = (0, _string.isEmpty)(this.option(\"value\")) || this._maskRulesChain.isValid(this._normalizeChainArguments());\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"maskInvalidMessage\")\r\n            }\r\n        })\r\n    },\r\n    _updateHiddenElement: function() {\r\n        this._removeHiddenElement();\r\n        if (this.option(\"mask\")) {\r\n            this._input().removeAttr(\"name\");\r\n            this._renderHiddenElement()\r\n        }\r\n        this._setSubmitElementName(this.option(\"name\"))\r\n    },\r\n    _updateMaskOption: function() {\r\n        this._updateHiddenElement();\r\n        this._renderMask();\r\n        this._validateMask()\r\n    },\r\n    _processEmptyMask: function(mask) {\r\n        if (mask) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\");\r\n        this.option({\r\n            text: value,\r\n            isValid: true\r\n        });\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        });\r\n        this._renderValue()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"mask\":\r\n                this._updateMaskOption();\r\n                this._processEmptyMask(args.value);\r\n                break;\r\n            case \"maskChar\":\r\n            case \"maskRules\":\r\n            case \"useMaskedValue\":\r\n                this._updateMaskOption();\r\n                break;\r\n            case \"value\":\r\n                this._renderMaskedValue();\r\n                this._validateMask();\r\n                this.callBase(args);\r\n                this._changedValue = this._input().val();\r\n                break;\r\n            case \"maskInvalidMessage\":\r\n                break;\r\n            case \"showMaskMode\":\r\n                this.option(\"text\", \"\");\r\n                this._renderValue();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nvar _default = TextEditorMask;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}